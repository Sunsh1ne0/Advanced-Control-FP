
RLPendulume.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800a258  0800a258  0001a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b0  0800a6b0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b0  0800a6b0  0001a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6b8  0800a6b8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6b8  0800a6b8  0001a6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000220  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000408  20000408  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ecfb  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d1f  00000000  00000000  0002ef56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a40  00000000  00000000  00032a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a0f  00000000  00000000  00033470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010f19  00000000  00000000  00057e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d42da  00000000  00000000  00068d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004bf4  00000000  00000000  0013d074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00141c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a240 	.word	0x0800a240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a240 	.word	0x0800a240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <calc_crc>:
uint8_t CMD_LNG_IN[Count] =  {0, 4, 0,  0, 0};
uint8_t CMD_LNG_OUT[Count] = {0, 0, 12, 0, 14};

extern UART_HandleTypeDef huart5;

uint8_t calc_crc(uint8_t cmd, uint8_t* data, uint8_t data_length){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
	crc = cmd;
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <calc_crc+0x50>)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < data_length; i++){
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e00c      	b.n	8001026 <calc_crc+0x36>
		crc += data[i];
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <calc_crc+0x50>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4413      	add	r3, r2
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <calc_crc+0x50>)
 800101e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < data_length; i++){
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	3301      	adds	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	429a      	cmp	r2, r3
 800102c:	d3ee      	bcc.n	800100c <calc_crc+0x1c>
	}
	return crc;
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <calc_crc+0x50>)
 8001030:	781b      	ldrb	r3, [r3, #0]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000239 	.word	0x20000239

08001044 <Send_response>:

HAL_StatusTypeDef Send_response(uint8_t cmd, uint8_t* data){
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
	uint8_t data_length = CMD_LNG_OUT[cmd];
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <Send_response+0x74>)
 8001054:	5cd3      	ldrb	r3, [r2, r3]
 8001056:	73fb      	strb	r3, [r7, #15]
	if (data_length == 0){
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d108      	bne.n	8001070 <Send_response+0x2c>
		rsp[0] = cmd;
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <Send_response+0x78>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	7013      	strb	r3, [r2, #0]
		rsp[data_length+1] = cmd;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3301      	adds	r3, #1
 8001068:	4914      	ldr	r1, [pc, #80]	; (80010bc <Send_response+0x78>)
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	54ca      	strb	r2, [r1, r3]
 800106e:	e014      	b.n	800109a <Send_response+0x56>
	} else {
		rsp[0] = cmd;
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <Send_response+0x78>)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	7013      	strb	r3, [r2, #0]
		rsp[data_length+1] = calc_crc(cmd, data, data_length);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	1c5c      	adds	r4, r3, #1
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffb5 	bl	8000ff0 <calc_crc>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <Send_response+0x78>)
 800108c:	551a      	strb	r2, [r3, r4]
		memcpy((uint8_t*)&rsp+1, data, data_length);
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <Send_response+0x7c>)
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	461a      	mov	r2, r3
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	f005 fd1a 	bl	8006ace <memcpy>
	}
	return (HAL_UART_Transmit(&huart5, rsp, data_length+2, data_length+2));
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b29b      	uxth	r3, r3
 800109e:	3302      	adds	r3, #2
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	3302      	adds	r3, #2
 80010a6:	4905      	ldr	r1, [pc, #20]	; (80010bc <Send_response+0x78>)
 80010a8:	4806      	ldr	r0, [pc, #24]	; (80010c4 <Send_response+0x80>)
 80010aa:	f002 fe70 	bl	8003d8e <HAL_UART_Transmit>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000220 	.word	0x20000220
 80010c0:	20000221 	.word	0x20000221
 80010c4:	20000274 	.word	0x20000274

080010c8 <TERMINAL>:

void TERMINAL(uint8_t cmd, uint8_t* str){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]

	switch (cmd){
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d868      	bhi.n	80011ac <TERMINAL+0xe4>
 80010da:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <TERMINAL+0x18>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f5 	.word	0x080010f5
 80010e4:	08001103 	.word	0x08001103
 80010e8:	0800111b 	.word	0x0800111b
 80010ec:	08001159 	.word	0x08001159
 80010f0:	08001163 	.word	0x08001163
	case CALIBRATE:
		{
		Send_response(CALIBRATE, (uint8_t*)&rsp);
 80010f4:	492f      	ldr	r1, [pc, #188]	; (80011b4 <TERMINAL+0xec>)
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ffa4 	bl	8001044 <Send_response>
		calibration();
 80010fc:	f000 ff92 	bl	8002024 <calibration>
		}
		break;
 8001100:	e054      	b.n	80011ac <TERMINAL+0xe4>

	case SET_SPEED:
		{
		Send_response(SET_SPEED, (uint8_t*)&rsp);
 8001102:	492c      	ldr	r1, [pc, #176]	; (80011b4 <TERMINAL+0xec>)
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff ff9d 	bl	8001044 <Send_response>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
		int32_t speed;
		memcpy((uint8_t*)&speed, str, 4);
 800110e:	60fb      	str	r3, [r7, #12]
//		speedCart_target = speed;
		moveCarridge(speed);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fe38 	bl	8001d88 <moveCarridge>
		}
		break;
 8001118:	e048      	b.n	80011ac <TERMINAL+0xe4>

	case GET_STATE:
		{
		state.cart_pose = getTicksCartPosition();
 800111a:	f001 f895 	bl	8002248 <getTicksCartPosition>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <TERMINAL+0xf0>)
 8001124:	805a      	strh	r2, [r3, #2]
		state.pole_pose = getTicksPolePosition();
 8001126:	f001 f8ab 	bl	8002280 <getTicksPolePosition>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <TERMINAL+0xf0>)
 8001130:	801a      	strh	r2, [r3, #0]
		state.cart_speed = getCartSpeed();
 8001132:	f001 f8c1 	bl	80022b8 <getCartSpeed>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <TERMINAL+0xf0>)
 800113c:	edc3 7a02 	vstr	s15, [r3, #8]
		state.pole_speed = getPoleSpeed();
 8001140:	f001 f8f2 	bl	8002328 <getPoleSpeed>
 8001144:	eef0 7a40 	vmov.f32	s15, s0
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <TERMINAL+0xf0>)
 800114a:	edc3 7a01 	vstr	s15, [r3, #4]
		Send_response(GET_STATE, (uint8_t*)&state);
 800114e:	491a      	ldr	r1, [pc, #104]	; (80011b8 <TERMINAL+0xf0>)
 8001150:	2002      	movs	r0, #2
 8001152:	f7ff ff77 	bl	8001044 <Send_response>
		}
		break;
 8001156:	e029      	b.n	80011ac <TERMINAL+0xe4>

	case PING:
		{
		Send_response(PING, rsp);
 8001158:	4916      	ldr	r1, [pc, #88]	; (80011b4 <TERMINAL+0xec>)
 800115a:	2003      	movs	r0, #3
 800115c:	f7ff ff72 	bl	8001044 <Send_response>
		}
		break;
 8001160:	e024      	b.n	80011ac <TERMINAL+0xe4>

	case GET_STATE_TIME:
		{
		state_time.cart_pose = getTicksCartPosition();
 8001162:	f001 f871 	bl	8002248 <getTicksCartPosition>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <TERMINAL+0xf4>)
 800116c:	805a      	strh	r2, [r3, #2]
		state_time.pole_pose = getTicksPolePosition();
 800116e:	f001 f887 	bl	8002280 <getTicksPolePosition>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <TERMINAL+0xf4>)
 8001178:	801a      	strh	r2, [r3, #0]
		state_time.cart_speed = getCartSpeed();
 800117a:	f001 f89d 	bl	80022b8 <getCartSpeed>
 800117e:	eef0 7a40 	vmov.f32	s15, s0
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <TERMINAL+0xf4>)
 8001184:	edc3 7a02 	vstr	s15, [r3, #8]
		state_time.pole_speed = getPoleSpeed();
 8001188:	f001 f8ce 	bl	8002328 <getPoleSpeed>
 800118c:	eef0 7a40 	vmov.f32	s15, s0
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <TERMINAL+0xf4>)
 8001192:	edc3 7a01 	vstr	s15, [r3, #4]
		state_time.time = HAL_GetTick();
 8001196:	f002 fa2d 	bl	80035f4 <HAL_GetTick>
 800119a:	4603      	mov	r3, r0
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <TERMINAL+0xf4>)
 80011a0:	819a      	strh	r2, [r3, #12]
		Send_response(GET_STATE_TIME, (uint8_t*)&state);
 80011a2:	4905      	ldr	r1, [pc, #20]	; (80011b8 <TERMINAL+0xf0>)
 80011a4:	2004      	movs	r0, #4
 80011a6:	f7ff ff4d 	bl	8001044 <Send_response>
		}
		break;
 80011aa:	bf00      	nop
	}
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000220 	.word	0x20000220
 80011b8:	2000023c 	.word	0x2000023c
 80011bc:	20000248 	.word	0x20000248

080011c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

	if (buf[0] == '!'){
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_UART_RxCpltCallback+0xb0>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b21      	cmp	r3, #33	; 0x21
 80011ce:	d145      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
		if (HAL_UART_Receive(huart, buf+1, 1, 1) == HAL_OK && buf[1] == '!'){
 80011d0:	4928      	ldr	r1, [pc, #160]	; (8001274 <HAL_UART_RxCpltCallback+0xb4>)
 80011d2:	2301      	movs	r3, #1
 80011d4:	2201      	movs	r2, #1
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f002 fe6b 	bl	8003eb2 <HAL_UART_Receive>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d13c      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_UART_RxCpltCallback+0xb0>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	2b21      	cmp	r3, #33	; 0x21
 80011e8:	d138      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
			if ((HAL_UART_Receive(huart, buf+2, 1, 1) == HAL_OK) && (buf[2] < Count)){
 80011ea:	4923      	ldr	r1, [pc, #140]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011ec:	2301      	movs	r3, #1
 80011ee:	2201      	movs	r2, #1
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f002 fe5e 	bl	8003eb2 <HAL_UART_Receive>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d12f      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_UART_RxCpltCallback+0xb0>)
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d82b      	bhi.n	800125c <HAL_UART_RxCpltCallback+0x9c>

				uint8_t cmd = buf[2];
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_UART_RxCpltCallback+0xb0>)
 8001206:	789b      	ldrb	r3, [r3, #2]
 8001208:	73fb      	strb	r3, [r7, #15]
				uint8_t cmd_lenght = CMD_LNG_IN[cmd];
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_UART_RxCpltCallback+0xbc>)
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	73bb      	strb	r3, [r7, #14]
				if (HAL_UART_Receive(huart, str, cmd_lenght+1, cmd_lenght+1) == HAL_OK){
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	b29b      	uxth	r3, r3
 8001216:	3301      	adds	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	3301      	adds	r3, #1
 800121e:	4918      	ldr	r1, [pc, #96]	; (8001280 <HAL_UART_RxCpltCallback+0xc0>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f002 fe46 	bl	8003eb2 <HAL_UART_Receive>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d117      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>

					uint8_t crc_recieved = str[cmd_lenght];
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_UART_RxCpltCallback+0xc0>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	737b      	strb	r3, [r7, #13]
					crc = calc_crc(cmd, str, cmd_lenght);
 8001234:	7bba      	ldrb	r2, [r7, #14]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4911      	ldr	r1, [pc, #68]	; (8001280 <HAL_UART_RxCpltCallback+0xc0>)
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fed8 	bl	8000ff0 <calc_crc>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_UART_RxCpltCallback+0xc4>)
 8001246:	701a      	strb	r2, [r3, #0]
					if (crc == crc_recieved){
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_UART_RxCpltCallback+0xc4>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	7b7a      	ldrb	r2, [r7, #13]
 800124e:	429a      	cmp	r2, r3
 8001250:	d104      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>

						TERMINAL(cmd, str);
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	490a      	ldr	r1, [pc, #40]	; (8001280 <HAL_UART_RxCpltCallback+0xc0>)
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff36 	bl	80010c8 <TERMINAL>
					}
				}
			}
		}
	}
	HAL_UART_Receive_IT (huart, buf, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	4904      	ldr	r1, [pc, #16]	; (8001270 <HAL_UART_RxCpltCallback+0xb0>)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f002 fec8 	bl	8003ff6 <HAL_UART_Receive_IT>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000258 	.word	0x20000258
 8001274:	20000259 	.word	0x20000259
 8001278:	2000025a 	.word	0x2000025a
 800127c:	20000000 	.word	0x20000000
 8001280:	20000204 	.word	0x20000204
 8001284:	20000239 	.word	0x20000239

08001288 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4313      	orrs	r3, r2
 800129a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4013      	ands	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40023800 	.word	0x40023800

080012b8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <LL_SYSCFG_SetEXTISource+0x58>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	43db      	mvns	r3, r3
 80012d4:	ea02 0103 	and.w	r1, r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	fa03 f202 	lsl.w	r2, r3, r2
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <LL_SYSCFG_SetEXTISource+0x58>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	430a      	orrs	r2, r1
 80012fe:	3302      	adds	r3, #2
 8001300:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40013800 	.word	0x40013800

08001314 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	613b      	str	r3, [r7, #16]
  return result;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2103      	movs	r1, #3
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	61bb      	str	r3, [r7, #24]
  return result;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	431a      	orrs	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001372:	b480      	push	{r7}
 8001374:	b089      	sub	sp, #36	; 0x24
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	613b      	str	r3, [r7, #16]
  return result;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2103      	movs	r1, #3
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	61bb      	str	r3, [r7, #24]
  return result;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	431a      	orrs	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	60da      	str	r2, [r3, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	619a      	str	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800142c:	2010      	movs	r0, #16
 800142e:	f7ff ff2b 	bl	8001288 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001432:	2004      	movs	r0, #4
 8001434:	f7ff ff28 	bl	8001288 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001438:	2080      	movs	r0, #128	; 0x80
 800143a:	f7ff ff25 	bl	8001288 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff ff22 	bl	8001288 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff ff1f 	bl	8001288 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800144a:	2008      	movs	r0, #8
 800144c:	f7ff ff1c 	bl	8001288 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, CS_I2C_SPI_Pin|LL_GPIO_PIN_9);
 8001450:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001454:	487c      	ldr	r0, [pc, #496]	; (8001648 <MX_GPIO_Init+0x23c>)
 8001456:	f7ff ffc9 	bl	80013ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 800145a:	2106      	movs	r1, #6
 800145c:	487b      	ldr	r0, [pc, #492]	; (800164c <MX_GPIO_Init+0x240>)
 800145e:	f7ff ffc5 	bl	80013ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001462:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001466:	487a      	ldr	r0, [pc, #488]	; (8001650 <MX_GPIO_Init+0x244>)
 8001468:	f7ff ffc0 	bl	80013ec <LL_GPIO_ResetOutputPin>
                          |Audio_RST_Pin);

  /**/
  LL_GPIO_SetOutputPin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin);
 800146c:	2101      	movs	r1, #1
 800146e:	4877      	ldr	r0, [pc, #476]	; (800164c <MX_GPIO_Init+0x240>)
 8001470:	f7ff ffae 	bl	80013d0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001474:	2308      	movs	r3, #8
 8001476:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001478:	2301      	movs	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	486e      	ldr	r0, [pc, #440]	; (8001648 <MX_GPIO_Init+0x23c>)
 800148e:	f003 ff67 	bl	8005360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001492:	2301      	movs	r3, #1
 8001494:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001496:	2301      	movs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4868      	ldr	r0, [pc, #416]	; (800164c <MX_GPIO_Init+0x240>)
 80014ac:	f003 ff58 	bl	8005360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80014b0:	2302      	movs	r3, #2
 80014b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b4:	2301      	movs	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80014c0:	2302      	movs	r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4860      	ldr	r0, [pc, #384]	; (800164c <MX_GPIO_Init+0x240>)
 80014ca:	f003 ff49 	bl	8005360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80014ce:	2304      	movs	r3, #4
 80014d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80014de:	2302      	movs	r3, #2
 80014e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	4859      	ldr	r0, [pc, #356]	; (800164c <MX_GPIO_Init+0x240>)
 80014e8:	f003 ff3a 	bl	8005360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014ec:	2304      	movs	r3, #4
 80014ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	4855      	ldr	r0, [pc, #340]	; (8001654 <MX_GPIO_Init+0x248>)
 80014fe:	f003 ff2f 	bl	8005360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001508:	2301      	movs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	484a      	ldr	r0, [pc, #296]	; (8001648 <MX_GPIO_Init+0x23c>)
 800151e:	f003 ff1f 	bl	8005360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001522:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001526:	603b      	str	r3, [r7, #0]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001528:	2301      	movs	r3, #1
 800152a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	4844      	ldr	r0, [pc, #272]	; (8001650 <MX_GPIO_Init+0x244>)
 800153e:	f003 ff0f 	bl	8005360 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001542:	2320      	movs	r3, #32
 8001544:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	483f      	ldr	r0, [pc, #252]	; (8001650 <MX_GPIO_Init+0x244>)
 8001554:	f003 ff04 	bl	8005360 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001558:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff feab 	bl	80012b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE9);
 8001562:	493d      	ldr	r1, [pc, #244]	; (8001658 <MX_GPIO_Init+0x24c>)
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff fea7 	bl	80012b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);
 800156a:	493c      	ldr	r1, [pc, #240]	; (800165c <MX_GPIO_Init+0x250>)
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fea3 	bl	80012b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8001572:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001576:	2004      	movs	r0, #4
 8001578:	f7ff fe9e 	bl	80012b8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001580:	2301      	movs	r3, #1
 8001582:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001584:	2301      	movs	r3, #1
 8001586:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001588:	2301      	movs	r3, #1
 800158a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fd61 	bl	8005058 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8001596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800159c:	2301      	movs	r3, #1
 800159e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80015a4:	2302      	movs	r3, #2
 80015a6:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fd53 	bl	8005058 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80015b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015bc:	2300      	movs	r3, #0
 80015be:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80015c0:	2302      	movs	r3, #2
 80015c2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fd45 	bl	8005058 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015d2:	2301      	movs	r3, #1
 80015d4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 80015d6:	2301      	movs	r3, #1
 80015d8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80015da:	2301      	movs	r3, #1
 80015dc:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fd38 	bl	8005058 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2101      	movs	r1, #1
 80015ec:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_GPIO_Init+0x254>)
 80015ee:	f7ff fec0 	bl	8001372 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_9, LL_GPIO_PULL_UP);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <MX_GPIO_Init+0x240>)
 80015fa:	f7ff feba 	bl	8001372 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_15, LL_GPIO_PULL_UP);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001604:	4816      	ldr	r0, [pc, #88]	; (8001660 <MX_GPIO_Init+0x254>)
 8001606:	f7ff feb4 	bl	8001372 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 800160a:	2200      	movs	r2, #0
 800160c:	2102      	movs	r1, #2
 800160e:	480e      	ldr	r0, [pc, #56]	; (8001648 <MX_GPIO_Init+0x23c>)
 8001610:	f7ff feaf 	bl	8001372 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_GPIO_Init+0x254>)
 800161a:	f7ff fe7b 	bl	8001314 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <MX_GPIO_Init+0x240>)
 8001626:	f7ff fe75 	bl	8001314 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <MX_GPIO_Init+0x254>)
 8001632:	f7ff fe6f 	bl	8001314 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 8001636:	2200      	movs	r2, #0
 8001638:	2102      	movs	r1, #2
 800163a:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_GPIO_Init+0x23c>)
 800163c:	f7ff fe6a 	bl	8001314 <LL_GPIO_SetPinMode>

}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40020400 	.word	0x40020400
 8001658:	00f00002 	.word	0x00f00002
 800165c:	f0000003 	.word	0xf0000003
 8001660:	40020000 	.word	0x40020000

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db12      	blt.n	80016f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	490a      	ldr	r1, [pc, #40]	; (8001700 <__NVIC_DisableIRQ+0x44>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	3320      	adds	r3, #32
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e8:	f3bf 8f4f 	dsb	sy
}
 80016ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ee:	f3bf 8f6f 	isb	sy
}
 80016f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LL_RCC_HSE_Enable+0x1c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <LL_RCC_HSE_Enable+0x1c>)
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <LL_RCC_HSE_IsReady+0x24>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017f0:	bf0c      	ite	eq
 80017f2:	2301      	moveq	r3, #1
 80017f4:	2300      	movne	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <LL_RCC_SetSysClkSource+0x24>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 0203 	bic.w	r2, r3, #3
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <LL_RCC_SetSysClkSource+0x24>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40023800 	.word	0x40023800

08001830 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <LL_RCC_GetSysClkSource+0x18>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <LL_RCC_SetAHBPrescaler+0x24>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <LL_RCC_SetAHBPrescaler+0x24>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40023800 	.word	0x40023800

08001874 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <LL_RCC_SetAPB1Prescaler+0x24>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	4904      	ldr	r1, [pc, #16]	; (8001898 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40023800 	.word	0x40023800

0800189c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40023800 	.word	0x40023800

080018c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <LL_RCC_PLL_Enable+0x1c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <LL_RCC_PLL_Enable+0x1c>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <LL_RCC_PLL_IsReady+0x24>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001920:	4013      	ands	r3, r2
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	0192      	lsls	r2, r2, #6
 800192c:	430a      	orrs	r2, r1
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800193c:	4904      	ldr	r1, [pc, #16]	; (8001950 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40023800 	.word	0x40023800
 8001954:	ffbf8000 	.word	0xffbf8000

08001958 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <LL_FLASH_SetLatency+0x24>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 0207 	bic.w	r2, r3, #7
 8001968:	4904      	ldr	r1, [pc, #16]	; (800197c <LL_FLASH_SetLatency+0x24>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40023c00 	.word	0x40023c00

08001980 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <LL_FLASH_GetLatency+0x18>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00

0800199c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80019ac:	4904      	ldr	r1, [pc, #16]	; (80019c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40007000 	.word	0x40007000

080019c4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1a      	ldr	r2, [r3, #32]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	621a      	str	r2, [r3, #32]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_GPIO_SetOutputPin>:
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	619a      	str	r2, [r3, #24]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_GPIO_ResetOutputPin>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	041a      	lsls	r2, r3, #16
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8c:	f001 fd4c 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a90:	f000 f872 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a94:	f7ff fcba 	bl	800140c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a98:	f001 fa64 	bl	8002f64 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001a9c:	f001 fb1c 	bl	80030d8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001aa0:	f001 fbf0 	bl	8003284 <MX_TIM8_Init>
  MX_UART5_Init();
 8001aa4:	f001 fc7c 	bl	80033a0 <MX_UART5_Init>
  MX_TIM5_Init();
 8001aa8:	f001 fb92 	bl	80031d0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001aac:	f001 fae4 	bl	8003078 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001ab0:	f001 fbbe 	bl	8003230 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ab4:	f000 f8b0 	bl	8001c18 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
//  NVIC_DisableIRQ(UART5_IRQn);

  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4826      	ldr	r0, [pc, #152]	; (8001b54 <main+0xcc>)
 8001abc:	f7ff ffd5 	bl	8001a6a <LL_GPIO_ResetOutputPin>

  LL_TIM_EnableCounter(TIM4); // Start timer 4 to read pendulum (pole) encoder. 4096 ticks per round.
 8001ac0:	4825      	ldr	r0, [pc, #148]	; (8001b58 <main+0xd0>)
 8001ac2:	f7ff ff93 	bl	80019ec <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM8); // Start timer 8 to read carriage (cart) encoder. 2000 ticks per round.
 8001ac6:	4825      	ldr	r0, [pc, #148]	; (8001b5c <main+0xd4>)
 8001ac8:	f7ff ff90 	bl	80019ec <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM5); // Start timer 5, get the 1kk ticks per second, each microsecond.
 8001acc:	4824      	ldr	r0, [pc, #144]	; (8001b60 <main+0xd8>)
 8001ace:	f7ff ff8d 	bl	80019ec <LL_TIM_EnableCounter>
  NVIC_DisableIRQ(TIM3_IRQn);
 8001ad2:	201d      	movs	r0, #29
 8001ad4:	f7ff fdf2 	bl	80016bc <__NVIC_DisableIRQ>
  NVIC_DisableIRQ(TIM7_IRQn);
 8001ad8:	2037      	movs	r0, #55	; 0x37
 8001ada:	f7ff fdef 	bl	80016bc <__NVIC_DisableIRQ>


  LL_TIM_EnableIT_UPDATE(TIM3); // Start timer 3
 8001ade:	4821      	ldr	r0, [pc, #132]	; (8001b64 <main+0xdc>)
 8001ae0:	f7ff ffa5 	bl	8001a2e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);   // Start timer 3
 8001ae4:	481f      	ldr	r0, [pc, #124]	; (8001b64 <main+0xdc>)
 8001ae6:	f7ff ff81 	bl	80019ec <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7); // Start timer 7
 8001aea:	481f      	ldr	r0, [pc, #124]	; (8001b68 <main+0xe0>)
 8001aec:	f7ff ff9f 	bl	8001a2e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);   // Start timer 7
 8001af0:	481d      	ldr	r0, [pc, #116]	; (8001b68 <main+0xe0>)
 8001af2:	f7ff ff7b 	bl	80019ec <LL_TIM_EnableCounter>

//  UART5->CR1 |= USART_CR1_TE | USART_CR1_RE;
//  LL_USART_EnableIT_RXNE(UART5);
//  LL_USART_EnableIT_ERROR(UART5);
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8001af6:	2110      	movs	r1, #16
 8001af8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001afc:	f7ff ff86 	bl	8001a0c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8001b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b08:	f7ff ff80 	bl	8001a0c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8001b0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b10:	f7ff ff6c 	bl	80019ec <LL_TIM_EnableCounter>

	LL_GPIO_ResetOutputPin (GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin);
 8001b14:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001b18:	4814      	ldr	r0, [pc, #80]	; (8001b6c <main+0xe4>)
 8001b1a:	f7ff ffa6 	bl	8001a6a <LL_GPIO_ResetOutputPin>
	start_melody();
 8001b1e:	f000 fc3b 	bl	8002398 <start_melody>

	calibration();
 8001b22:	f000 fa7f 	bl	8002024 <calibration>
	LL_GPIO_SetOutputPin (GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin);
 8001b26:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001b2a:	4810      	ldr	r0, [pc, #64]	; (8001b6c <main+0xe4>)
 8001b2c:	f7ff ff8f 	bl	8001a4e <LL_GPIO_SetOutputPin>
	start_melody();
 8001b30:	f000 fc32 	bl	8002398 <start_melody>

//  LL_GPIO_TogglePin (GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin);

  NVIC_EnableIRQ(TIM3_IRQn);
 8001b34:	201d      	movs	r0, #29
 8001b36:	f7ff fda3 	bl	8001680 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM7_IRQn);
 8001b3a:	2037      	movs	r0, #55	; 0x37
 8001b3c:	f7ff fda0 	bl	8001680 <__NVIC_EnableIRQ>
//  NVIC_EnableIRQ(UART5_IRQn);
  LL_mDelay(1000);
 8001b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b44:	f003 ff72 	bl	8005a2c <LL_mDelay>


  HAL_UART_Receive_IT (&huart5, buf, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4909      	ldr	r1, [pc, #36]	; (8001b70 <main+0xe8>)
 8001b4c:	4809      	ldr	r0, [pc, #36]	; (8001b74 <main+0xec>)
 8001b4e:	f002 fa52 	bl	8003ff6 <HAL_UART_Receive_IT>
//  uint8_t command = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <main+0xca>
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40000800 	.word	0x40000800
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	40000c00 	.word	0x40000c00
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40001400 	.word	0x40001400
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	20000258 	.word	0x20000258
 8001b74:	20000274 	.word	0x20000274

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f7ff feeb 	bl	8001958 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001b82:	bf00      	nop
 8001b84:	f7ff fefc 	bl	8001980 <LL_FLASH_GetLatency>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d1fa      	bne.n	8001b84 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b92:	f7ff ff03 	bl	800199c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001b96:	f7ff fe13 	bl	80017c0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001b9a:	bf00      	nop
 8001b9c:	f7ff fe20 	bl	80017e0 <LL_RCC_HSE_IsReady>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d1fa      	bne.n	8001b9c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001bac:	2108      	movs	r1, #8
 8001bae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001bb2:	f7ff feab 	bl	800190c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001bb6:	f7ff fe85 	bl	80018c4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001bba:	bf00      	nop
 8001bbc:	f7ff fe92 	bl	80018e4 <LL_RCC_PLL_IsReady>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d1fa      	bne.n	8001bbc <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff fefc 	bl	80019c4 <LL_PWR_IsActiveFlag_VOS>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0fa      	beq.n	8001bc8 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fe3a 	bl	800184c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001bd8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001bdc:	f7ff fe4a 	bl	8001874 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001be0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001be4:	f7ff fe5a 	bl	800189c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001be8:	2002      	movs	r0, #2
 8001bea:	f7ff fe0d 	bl	8001808 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bee:	bf00      	nop
 8001bf0:	f7ff fe1e 	bl	8001830 <LL_RCC_GetSysClkSource>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d1fa      	bne.n	8001bf0 <SystemClock_Config+0x78>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <SystemClock_Config+0x9c>)
 8001bfc:	f003 ff3c 	bl	8005a78 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001c00:	2000      	movs	r0, #0
 8001c02:	f001 fcb3 	bl	800356c <HAL_InitTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c0c:	f000 f868 	bl	8001ce0 <Error_Handler>
  }
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0a037a00 	.word	0x0a037a00

08001c18 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c1c:	f7ff fd22 	bl	8001664 <__NVIC_GetPriorityGrouping>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fd96 	bl	8001758 <NVIC_EncodePriority>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2017      	movs	r0, #23
 8001c32:	f7ff fd67 	bl	8001704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c36:	2017      	movs	r0, #23
 8001c38:	f7ff fd22 	bl	8001680 <__NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c3c:	f7ff fd12 	bl	8001664 <__NVIC_GetPriorityGrouping>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fd86 	bl	8001758 <NVIC_EncodePriority>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	201d      	movs	r0, #29
 8001c52:	f7ff fd57 	bl	8001704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7ff fd12 	bl	8001680 <__NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c5c:	f7ff fd02 	bl	8001664 <__NVIC_GetPriorityGrouping>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fd76 	bl	8001758 <NVIC_EncodePriority>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	201e      	movs	r0, #30
 8001c72:	f7ff fd47 	bl	8001704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8001c76:	201e      	movs	r0, #30
 8001c78:	f7ff fd02 	bl	8001680 <__NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c7c:	f7ff fcf2 	bl	8001664 <__NVIC_GetPriorityGrouping>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fd66 	bl	8001758 <NVIC_EncodePriority>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	2028      	movs	r0, #40	; 0x28
 8001c92:	f7ff fd37 	bl	8001704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c96:	2028      	movs	r0, #40	; 0x28
 8001c98:	f7ff fcf2 	bl	8001680 <__NVIC_EnableIRQ>
  /* TIM8_BRK_TIM12_IRQn interrupt configuration */
  NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c9c:	f7ff fce2 	bl	8001664 <__NVIC_GetPriorityGrouping>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fd56 	bl	8001758 <NVIC_EncodePriority>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	202b      	movs	r0, #43	; 0x2b
 8001cb2:	f7ff fd27 	bl	8001704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001cb6:	202b      	movs	r0, #43	; 0x2b
 8001cb8:	f7ff fce2 	bl	8001680 <__NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001cbc:	f7ff fcd2 	bl	8001664 <__NVIC_GetPriorityGrouping>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fd46 	bl	8001758 <NVIC_EncodePriority>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	2037      	movs	r0, #55	; 0x37
 8001cd2:	f7ff fd17 	bl	8001704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8001cd6:	2037      	movs	r0, #55	; 0x37
 8001cd8:	f7ff fcd2 	bl	8001680 <__NVIC_EnableIRQ>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>

08001cea <LL_TIM_OC_SetCompareCH2>:
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_TIM_OC_SetCompareCH3>:
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_GPIO_IsInputPinSet>:
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4013      	ands	r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_GPIO_SetOutputPin>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	619a      	str	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_GPIO_ResetOutputPin>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <moveCarridge>:
//  	snprintf(dataForTransmitt, sizeof(dataForTransmitt), "%f\n", speedErr);
//  	transmitData(UART5, (uint8_t*) dataForTransmitt);
}

void moveCarridge(int32_t speed)
	{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	 * moveCarridge(-number); // Left moving
	 * moveCarridge(+number); // Right moving
	*/


	  int shift = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1); // Enable moving
 8001d94:	2102      	movs	r1, #2
 8001d96:	482c      	ldr	r0, [pc, #176]	; (8001e48 <moveCarridge+0xc0>)
 8001d98:	f7ff ffd8 	bl	8001d4c <LL_GPIO_SetOutputPin>

	  if (speed < 0)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da03      	bge.n	8001daa <moveCarridge+0x22>
	  {speed -= shift;}
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	607b      	str	r3, [r7, #4]

	  if (speed == 0)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10e      	bne.n	8001dce <moveCarridge+0x46>
	  {
	      LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1); // Disable moving
 8001db0:	2102      	movs	r1, #2
 8001db2:	4825      	ldr	r0, [pc, #148]	; (8001e48 <moveCarridge+0xc0>)
 8001db4:	f7ff ffd8 	bl	8001d68 <LL_GPIO_ResetOutputPin>
	      LL_TIM_OC_SetCompareCH3(TIM2, 0);             // Stop moving
 8001db8:	2100      	movs	r1, #0
 8001dba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dbe:	f7ff ffa2 	bl	8001d06 <LL_TIM_OC_SetCompareCH3>
	      LL_TIM_OC_SetCompareCH2(TIM2, 0);             // Stop moving
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dc8:	f7ff ff8f 	bl	8001cea <LL_TIM_OC_SetCompareCH2>

	    LL_TIM_OC_SetCompareCH2(TIM2, 0);            			 // Right moving
	    LL_TIM_OC_SetCompareCH3(TIM2, (uint32_t)(speed));        // Right moving
	  }

	}
 8001dcc:	e037      	b.n	8001e3e <moveCarridge+0xb6>
	  else if (speed < 0)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da1a      	bge.n	8001e0a <moveCarridge+0x82>
	    if (speed < -maxspeed)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8001dda:	da03      	bge.n	8001de4 <moveCarridge+0x5c>
	    {speed = -maxspeed - shift;}
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <moveCarridge+0xc4>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	607b      	str	r3, [r7, #4]
	    if (speed > -minspeed)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	dd02      	ble.n	8001df0 <moveCarridge+0x68>
	    {speed = -minspeed - shift;}
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	425b      	negs	r3, r3
 8001dee:	607b      	str	r3, [r7, #4]
	    LL_TIM_OC_SetCompareCH3(TIM2, 0);            			  // Left moving
 8001df0:	2100      	movs	r1, #0
 8001df2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001df6:	f7ff ff86 	bl	8001d06 <LL_TIM_OC_SetCompareCH3>
	    LL_TIM_OC_SetCompareCH2(TIM2, (-((int32_t)speed)));       // Left moving
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e04:	f7ff ff71 	bl	8001cea <LL_TIM_OC_SetCompareCH2>
	}
 8001e08:	e019      	b.n	8001e3e <moveCarridge+0xb6>
	  else if (speed > 0)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	dd16      	ble.n	8001e3e <moveCarridge+0xb6>
	    if (speed > maxspeed)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001e16:	dd02      	ble.n	8001e1e <moveCarridge+0x96>
	    		speed = maxspeed;
 8001e18:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001e1c:	607b      	str	r3, [r7, #4]
	    if (speed < minspeed)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da01      	bge.n	8001e28 <moveCarridge+0xa0>
	    {speed = minspeed;}
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
	    LL_TIM_OC_SetCompareCH2(TIM2, 0);            			 // Right moving
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e2e:	f7ff ff5c 	bl	8001cea <LL_TIM_OC_SetCompareCH2>
	    LL_TIM_OC_SetCompareCH3(TIM2, (uint32_t)(speed));        // Right moving
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e3a:	f7ff ff64 	bl	8001d06 <LL_TIM_OC_SetCompareCH3>
	}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	fffffda8 	.word	0xfffffda8

08001e50 <moveToPosition>:

uint8_t moveToPosition(float setpoint)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	ed87 0a01 	vstr	s0, [r7, #4]
	float kp = 0.01;
 8001e5a:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <moveToPosition+0x164>)
 8001e5c:	613b      	str	r3, [r7, #16]
	float kd = 0.02;
 8001e5e:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <moveToPosition+0x168>)
 8001e60:	60fb      	str	r3, [r7, #12]
	int32_t needed_speed = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]

	float err = 0;
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
	float prevErr = 0;
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
	float diff = 0;
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]


	err = setpoint - getTicksCartPosition();
 8001e78:	f000 f9e6 	bl	8002248 <getTicksCartPosition>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e86:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8e:	edc7 7a06 	vstr	s15, [r7, #24]
	while(abs((int)err) > 100)
 8001e92:	e07b      	b.n	8001f8c <moveToPosition+0x13c>
	{
		err = setpoint - getTicksCartPosition();
 8001e94:	f000 f9d8 	bl	8002248 <getTicksCartPosition>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eaa:	edc7 7a06 	vstr	s15, [r7, #24]
		integral += err;
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <moveToPosition+0x16c>)
 8001eb0:	ed93 7a00 	vldr	s14, [r3]
 8001eb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <moveToPosition+0x16c>)
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
		diff = (err - prevErr);
 8001ec2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ece:	edc7 7a02 	vstr	s15, [r7, #8]
		prevErr = err;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	617b      	str	r3, [r7, #20]
		needed_speed = (int32_t) err * kp + diff * kd;
 8001ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eea:	edd7 6a02 	vldr	s13, [r7, #8]
 8001eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efe:	ee17 3a90 	vmov	r3, s15
 8001f02:	61fb      	str	r3, [r7, #28]

		if ((needed_speed == 0) && (err>0))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <moveToPosition+0xce>
 8001f0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	dd02      	ble.n	8001f1e <moveToPosition+0xce>
		{needed_speed = 1;}
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	e016      	b.n	8001f4c <moveToPosition+0xfc>
		else if ((needed_speed == 0) & (err<0))
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	bf4c      	ite	mi
 8001f38:	2301      	movmi	r3, #1
 8001f3a:	2300      	movpl	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <moveToPosition+0xfc>
		{needed_speed = -1;}
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	61fb      	str	r3, [r7, #28]

		if (needed_speed < 0){
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da0d      	bge.n	8001f6e <moveToPosition+0x11e>
			needed_speed = constrain(needed_speed, -maxspeed, -110);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8001f58:	db06      	blt.n	8001f68 <moveToPosition+0x118>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
 8001f60:	4293      	cmp	r3, r2
 8001f62:	bfa8      	it	ge
 8001f64:	4613      	movge	r3, r2
 8001f66:	e000      	b.n	8001f6a <moveToPosition+0x11a>
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <moveToPosition+0x170>)
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	e00b      	b.n	8001f86 <moveToPosition+0x136>
		} else {
			needed_speed = constrain(needed_speed, 110, maxspeed);
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	2b6d      	cmp	r3, #109	; 0x6d
 8001f72:	dd06      	ble.n	8001f82 <moveToPosition+0x132>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f7a:	bfa8      	it	ge
 8001f7c:	f44f 7316 	movge.w	r3, #600	; 0x258
 8001f80:	e000      	b.n	8001f84 <moveToPosition+0x134>
 8001f82:	236e      	movs	r3, #110	; 0x6e
 8001f84:	61fb      	str	r3, [r7, #28]
		}

		moveCarridge(needed_speed);
 8001f86:	69f8      	ldr	r0, [r7, #28]
 8001f88:	f7ff fefe 	bl	8001d88 <moveCarridge>
	while(abs((int)err) > 100)
 8001f8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bfb8      	it	lt
 8001f9c:	425b      	neglt	r3, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	f73f af78 	bgt.w	8001e94 <moveToPosition+0x44>
	}
	moveCarridge(0);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff feef 	bl	8001d88 <moveCarridge>
//	LL_mDelay(10);
	return 1;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	3c23d70a 	.word	0x3c23d70a
 8001fb8:	3ca3d70a 	.word	0x3ca3d70a
 8001fbc:	20000264 	.word	0x20000264
 8001fc0:	fffffda8 	.word	0xfffffda8

08001fc4 <poleCalibration>:

int8_t poleCalibration(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	uint8_t tempCounter = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i=0; i<450; i=i+2)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	80bb      	strh	r3, [r7, #4]
 8001fd2:	e01b      	b.n	800200c <poleCalibration+0x48>
	{
		uint16_t firstPos = TIM4->CNT;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <poleCalibration+0x5c>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	807b      	strh	r3, [r7, #2]
		LL_mDelay(50 + i);
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	3332      	adds	r3, #50	; 0x32
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fd24 	bl	8005a2c <LL_mDelay>
		if (firstPos == TIM4->CNT)
 8001fe4:	887a      	ldrh	r2, [r7, #2]
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <poleCalibration+0x5c>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d102      	bne.n	8001ff4 <poleCalibration+0x30>
			tempCounter++;
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	71fb      	strb	r3, [r7, #7]

		if (tempCounter == 30)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2b1e      	cmp	r3, #30
 8001ff8:	d105      	bne.n	8002006 <poleCalibration+0x42>
		{
			TIM4->CNT = 32000;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <poleCalibration+0x5c>)
 8001ffc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
			return 1;
 8002002:	2301      	movs	r3, #1
 8002004:	e008      	b.n	8002018 <poleCalibration+0x54>
	for(uint16_t i=0; i<450; i=i+2)
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	3302      	adds	r3, #2
 800200a:	80bb      	strh	r3, [r7, #4]
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8002012:	d3df      	bcc.n	8001fd4 <poleCalibration+0x10>
		}
	}
	return -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40000800 	.word	0x40000800

08002024 <calibration>:

uint8_t calibration(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0


	TIM5->CNT = 0;
 800202a:	4b7b      	ldr	r3, [pc, #492]	; (8002218 <calibration+0x1f4>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
	moveCarridge(0);
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff fea9 	bl	8001d88 <moveCarridge>
  __ASM volatile ("cpsie i" : : : "memory");
 8002036:	b662      	cpsie	i
}
 8002038:	bf00      	nop
	__enable_irq ();
	isCalibration = 1;
 800203a:	4b78      	ldr	r3, [pc, #480]	; (800221c <calibration+0x1f8>)
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
	int32_t speed = 120;
 8002040:	2378      	movs	r3, #120	; 0x78
 8002042:	603b      	str	r3, [r7, #0]

	moveCarridge(-speed);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	425b      	negs	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe9d 	bl	8001d88 <moveCarridge>
	uint16_t currPosition = TIM8->CNT;
 800204e:	4b74      	ldr	r3, [pc, #464]	; (8002220 <calibration+0x1fc>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	80fb      	strh	r3, [r7, #6]
	while(leftSwitch == 0)
 8002054:	e021      	b.n	800209a <calibration+0x76>
	{
		if (TIM8->CNT - currPosition != 0)
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <calibration+0x1fc>)
 8002058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	429a      	cmp	r2, r3
 800205e:	d003      	beq.n	8002068 <calibration+0x44>
			TIM5->CNT = 0;
 8002060:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <calibration+0x1f4>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
 8002066:	e015      	b.n	8002094 <calibration+0x70>
		else
			if (TIM5->CNT > 100000 && !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_9))
 8002068:	4b6b      	ldr	r3, [pc, #428]	; (8002218 <calibration+0x1f4>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	4a6d      	ldr	r2, [pc, #436]	; (8002224 <calibration+0x200>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d910      	bls.n	8002094 <calibration+0x70>
 8002072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002076:	486c      	ldr	r0, [pc, #432]	; (8002228 <calibration+0x204>)
 8002078:	f7ff fe53 	bl	8001d22 <LL_GPIO_IsInputPinSet>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <calibration+0x70>
			{
				moveCarridge(speed);
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	f7ff fe80 	bl	8001d88 <moveCarridge>
				LL_mDelay(100);
 8002088:	2064      	movs	r0, #100	; 0x64
 800208a:	f003 fccf 	bl	8005a2c <LL_mDelay>
				moveCarridge(0);
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fe7a 	bl	8001d88 <moveCarridge>
			}
		currPosition = TIM8->CNT;
 8002094:	4b62      	ldr	r3, [pc, #392]	; (8002220 <calibration+0x1fc>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	80fb      	strh	r3, [r7, #6]
	while(leftSwitch == 0)
 800209a:	4b64      	ldr	r3, [pc, #400]	; (800222c <calibration+0x208>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0d9      	beq.n	8002056 <calibration+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 80020a2:	b672      	cpsid	i
}
 80020a4:	bf00      	nop
	}
	__disable_irq ();
	moveCarridge(0);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fe6e 	bl	8001d88 <moveCarridge>
	leftSwitch = 0;
 80020ac:	4b5f      	ldr	r3, [pc, #380]	; (800222c <calibration+0x208>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
	TIM8->CNT = 0;
 80020b2:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <calibration+0x1fc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24
	moveCarridge(speed);
 80020b8:	6838      	ldr	r0, [r7, #0]
 80020ba:	f7ff fe65 	bl	8001d88 <moveCarridge>
	LL_mDelay(100);
 80020be:	2064      	movs	r0, #100	; 0x64
 80020c0:	f003 fcb4 	bl	8005a2c <LL_mDelay>
  __ASM volatile ("cpsie i" : : : "memory");
 80020c4:	b662      	cpsie	i
}
 80020c6:	bf00      	nop
	__enable_irq ();
	currPosition = TIM8->CNT;
 80020c8:	4b55      	ldr	r3, [pc, #340]	; (8002220 <calibration+0x1fc>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	80fb      	strh	r3, [r7, #6]
	TIM5->CNT = 0;
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <calibration+0x1f4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
	while(rightSwitch == 0){
 80020d4:	e023      	b.n	800211e <calibration+0xfa>
		if (TIM8->CNT - currPosition != 0)
 80020d6:	4b52      	ldr	r3, [pc, #328]	; (8002220 <calibration+0x1fc>)
 80020d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d003      	beq.n	80020e8 <calibration+0xc4>
			TIM5->CNT = 0;
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <calibration+0x1f4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
 80020e6:	e017      	b.n	8002118 <calibration+0xf4>
		else
			if (TIM5->CNT > 100000 && !LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_15))
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <calibration+0x1f4>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <calibration+0x200>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d912      	bls.n	8002118 <calibration+0xf4>
 80020f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f6:	484e      	ldr	r0, [pc, #312]	; (8002230 <calibration+0x20c>)
 80020f8:	f7ff fe13 	bl	8001d22 <LL_GPIO_IsInputPinSet>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <calibration+0xf4>
			{
				moveCarridge(-speed);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	425b      	negs	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fe3e 	bl	8001d88 <moveCarridge>
				LL_mDelay(100);
 800210c:	2064      	movs	r0, #100	; 0x64
 800210e:	f003 fc8d 	bl	8005a2c <LL_mDelay>
				moveCarridge(0);
 8002112:	2000      	movs	r0, #0
 8002114:	f7ff fe38 	bl	8001d88 <moveCarridge>
			}
		currPosition = TIM8->CNT;
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <calibration+0x1fc>)
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	80fb      	strh	r3, [r7, #6]
	while(rightSwitch == 0){
 800211e:	4b45      	ldr	r3, [pc, #276]	; (8002234 <calibration+0x210>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0d7      	beq.n	80020d6 <calibration+0xb2>
  __ASM volatile ("cpsid i" : : : "memory");
 8002126:	b672      	cpsid	i
}
 8002128:	bf00      	nop
	}
	__disable_irq ();
	moveCarridge(0);
 800212a:	2000      	movs	r0, #0
 800212c:	f7ff fe2c 	bl	8001d88 <moveCarridge>
	rightSwitch = 0;
 8002130:	4b40      	ldr	r3, [pc, #256]	; (8002234 <calibration+0x210>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
	cartMovLength = (float)TIM8->CNT;
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <calibration+0x1fc>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <calibration+0x214>)
 8002144:	edc3 7a00 	vstr	s15, [r3]


	if (cartMovLength < 22000)
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <calibration+0x214>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800223c <calibration+0x218>
 8002152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	d516      	bpl.n	800218a <calibration+0x166>
	{
		moveCarridge(0);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fe13 	bl	8001d88 <moveCarridge>
		isCalibration = 0;
 8002162:	4b2e      	ldr	r3, [pc, #184]	; (800221c <calibration+0x1f8>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
		LL_mDelay (2000);
 8002168:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800216c:	f003 fc5e 	bl	8005a2c <LL_mDelay>
		cartMovLength = 0;
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <calibration+0x214>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
		repeatCalibrationFlag++;
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <calibration+0x21c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <calibration+0x21c>)
 8002182:	701a      	strb	r2, [r3, #0]
		calibration();
 8002184:	f7ff ff4e 	bl	8002024 <calibration>
 8002188:	e02c      	b.n	80021e4 <calibration+0x1c0>
	}
	else
	{
		TIM8->CNT += SHIFT;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <calibration+0x1fc>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <calibration+0x220>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <calibration+0x1fc>)
 80021a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a6:	ee17 2a90 	vmov	r2, s15
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
		moveToPosition(cartMovLength/2);
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <calibration+0x214>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021ba:	eeb0 0a47 	vmov.f32	s0, s14
 80021be:	f7ff fe47 	bl	8001e50 <moveToPosition>
		LL_mDelay(50);
 80021c2:	2032      	movs	r0, #50	; 0x32
 80021c4:	f003 fc32 	bl	8005a2c <LL_mDelay>
  __ASM volatile ("cpsie i" : : : "memory");
 80021c8:	b662      	cpsie	i
}
 80021ca:	bf00      	nop
		__enable_irq ();
		TIM8->CNT = SHIFT;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <calibration+0x220>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <calibration+0x1fc>)
 80021d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d8:	ee17 2a90 	vmov	r2, s15
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
		isCalibration = 0;
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <calibration+0x1f8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
	}

	if (repeatCalibrationFlag==0)
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <calibration+0x21c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <calibration+0x1d8>
		{
		while (poleCalibration() != 1)
 80021ec:	bf00      	nop
 80021ee:	f7ff fee9 	bl	8001fc4 <poleCalibration>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d1fa      	bne.n	80021ee <calibration+0x1ca>
		;
		return (1);
 80021f8:	2301      	movs	r3, #1
 80021fa:	e008      	b.n	800220e <calibration+0x1ea>
		}
	else
		repeatCalibrationFlag--;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <calibration+0x21c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	3b01      	subs	r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <calibration+0x21c>)
 8002206:	701a      	strb	r2, [r3, #0]

	moveCarridge(0);
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff fdbd 	bl	8001d88 <moveCarridge>


}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40000c00 	.word	0x40000c00
 800221c:	2000025d 	.word	0x2000025d
 8002220:	40010400 	.word	0x40010400
 8002224:	000186a0 	.word	0x000186a0
 8002228:	40020800 	.word	0x40020800
 800222c:	2000025c 	.word	0x2000025c
 8002230:	40020000 	.word	0x40020000
 8002234:	2000025b 	.word	0x2000025b
 8002238:	20000260 	.word	0x20000260
 800223c:	46abe000 	.word	0x46abe000
 8002240:	2000025e 	.word	0x2000025e
 8002244:	0800a258 	.word	0x0800a258

08002248 <getTicksCartPosition>:

int16_t getTicksCartPosition(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
	return (TIM8->CNT - SHIFT);
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <getTicksCartPosition+0x30>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <getTicksCartPosition+0x34>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	b21b      	sxth	r3, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40010400 	.word	0x40010400
 800227c:	0800a258 	.word	0x0800a258

08002280 <getTicksPolePosition>:

int16_t getTicksPolePosition(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
	return (TIM4->CNT - SHIFT);
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <getTicksPolePosition+0x30>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <getTicksPolePosition+0x34>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229e:	ee17 3a90 	vmov	r3, s15
 80022a2:	b21b      	sxth	r3, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40000800 	.word	0x40000800
 80022b4:	0800a258 	.word	0x0800a258

080022b8 <getCartSpeed>:

float getCartSpeed(void)
{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	/*
	 * Send to computer current speed
	 * Speed shows as ticks per microseconds
	*/

	return ((18.8495559 * (float)speedCart) / timeStep); // Meters per second
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <getCartSpeed+0x68>)
 80022be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ca:	ee17 0a90 	vmov	r0, s15
 80022ce:	f7fe f93b 	bl	8000548 <__aeabi_f2d>
 80022d2:	a311      	add	r3, pc, #68	; (adr r3, 8002318 <getCartSpeed+0x60>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe f98e 	bl	80005f8 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4614      	mov	r4, r2
 80022e2:	461d      	mov	r5, r3
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <getCartSpeed+0x6c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f92d 	bl	8000548 <__aeabi_f2d>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4620      	mov	r0, r4
 80022f4:	4629      	mov	r1, r5
 80022f6:	f7fe faa9 	bl	800084c <__aeabi_ddiv>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f7fe fc71 	bl	8000be8 <__aeabi_d2f>
 8002306:	4603      	mov	r3, r0
 8002308:	ee07 3a90 	vmov	s15, r3
//	return ((float)time);
}
 800230c:	eeb0 0a67 	vmov.f32	s0, s15
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
 8002312:	bf00      	nop
 8002314:	f3af 8000 	nop.w
 8002318:	7ed69fb4 	.word	0x7ed69fb4
 800231c:	4032d97c 	.word	0x4032d97c
 8002320:	20000268 	.word	0x20000268
 8002324:	20000010 	.word	0x20000010

08002328 <getPoleSpeed>:

float getPoleSpeed(void)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	af00      	add	r7, sp, #0

	return ((1533.98079 * (float)speedPole) / timeStep); // Ticks per second
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <getPoleSpeed+0x68>)
 800232e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	ee17 0a90 	vmov	r0, s15
 800233e:	f7fe f903 	bl	8000548 <__aeabi_f2d>
 8002342:	a311      	add	r3, pc, #68	; (adr r3, 8002388 <getPoleSpeed+0x60>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f956 	bl	80005f8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4614      	mov	r4, r2
 8002352:	461d      	mov	r5, r3
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <getPoleSpeed+0x6c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f8f5 	bl	8000548 <__aeabi_f2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fe fa71 	bl	800084c <__aeabi_ddiv>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f7fe fc39 	bl	8000be8 <__aeabi_d2f>
 8002376:	4603      	mov	r3, r0
 8002378:	ee07 3a90 	vmov	s15, r3
//	return ((float)time);
}
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	bdb0      	pop	{r4, r5, r7, pc}
 8002382:	bf00      	nop
 8002384:	f3af 8000 	nop.w
 8002388:	5436b8fa 	.word	0x5436b8fa
 800238c:	4097f7ec 	.word	0x4097f7ec
 8002390:	2000026c 	.word	0x2000026c
 8002394:	20000010 	.word	0x20000010

08002398 <start_melody>:

void start_melody(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	uint8_t delay_ms = 16;
 800239e:	2310      	movs	r3, #16
 80023a0:	71fb      	strb	r3, [r7, #7]

	GPIOE->ODR |= (1<<9);
 80023a2:	4b69      	ldr	r3, [pc, #420]	; (8002548 <start_melody+0x1b0>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4a68      	ldr	r2, [pc, #416]	; (8002548 <start_melody+0x1b0>)
 80023a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ac:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fb3b 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 80023b6:	4b64      	ldr	r3, [pc, #400]	; (8002548 <start_melody+0x1b0>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4a63      	ldr	r2, [pc, #396]	; (8002548 <start_melody+0x1b0>)
 80023bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023c0:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fb31 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 80023ca:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <start_melody+0x1b0>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4a5e      	ldr	r2, [pc, #376]	; (8002548 <start_melody+0x1b0>)
 80023d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d4:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fb27 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 80023de:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <start_melody+0x1b0>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4a59      	ldr	r2, [pc, #356]	; (8002548 <start_melody+0x1b0>)
 80023e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023e8:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fb1d 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 80023f2:	4b55      	ldr	r3, [pc, #340]	; (8002548 <start_melody+0x1b0>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a54      	ldr	r2, [pc, #336]	; (8002548 <start_melody+0x1b0>)
 80023f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fc:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fb13 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 8002406:	4b50      	ldr	r3, [pc, #320]	; (8002548 <start_melody+0x1b0>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4a4f      	ldr	r2, [pc, #316]	; (8002548 <start_melody+0x1b0>)
 800240c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002410:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fb09 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <start_melody+0x1b0>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	4a4a      	ldr	r2, [pc, #296]	; (8002548 <start_melody+0x1b0>)
 8002420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002424:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f003 faff 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 800242e:	4b46      	ldr	r3, [pc, #280]	; (8002548 <start_melody+0x1b0>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4a45      	ldr	r2, [pc, #276]	; (8002548 <start_melody+0x1b0>)
 8002434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002438:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f003 faf5 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <start_melody+0x1b0>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4a40      	ldr	r2, [pc, #256]	; (8002548 <start_melody+0x1b0>)
 8002448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244c:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 faeb 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 8002456:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <start_melody+0x1b0>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	4a3b      	ldr	r2, [pc, #236]	; (8002548 <start_melody+0x1b0>)
 800245c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002460:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f003 fae1 	bl	8005a2c <LL_mDelay>

	LL_mDelay(70);
 800246a:	2046      	movs	r0, #70	; 0x46
 800246c:	f003 fade 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 8002470:	4b35      	ldr	r3, [pc, #212]	; (8002548 <start_melody+0x1b0>)
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	4a34      	ldr	r2, [pc, #208]	; (8002548 <start_melody+0x1b0>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247a:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fad4 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <start_melody+0x1b0>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	4a2f      	ldr	r2, [pc, #188]	; (8002548 <start_melody+0x1b0>)
 800248a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800248e:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4618      	mov	r0, r3
 8002494:	f003 faca 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <start_melody+0x1b0>)
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <start_melody+0x1b0>)
 800249e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a2:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fac0 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <start_melody+0x1b0>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	4a25      	ldr	r2, [pc, #148]	; (8002548 <start_melody+0x1b0>)
 80024b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b6:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fab6 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <start_melody+0x1b0>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	4a20      	ldr	r2, [pc, #128]	; (8002548 <start_melody+0x1b0>)
 80024c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ca:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 faac 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <start_melody+0x1b0>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <start_melody+0x1b0>)
 80024da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024de:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 faa2 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <start_melody+0x1b0>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	4a16      	ldr	r2, [pc, #88]	; (8002548 <start_melody+0x1b0>)
 80024ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f2:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fa98 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <start_melody+0x1b0>)
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <start_melody+0x1b0>)
 8002502:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002506:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fa8e 	bl	8005a2c <LL_mDelay>

	GPIOE->ODR |= (1<<9);
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <start_melody+0x1b0>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <start_melody+0x1b0>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251a:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fa84 	bl	8005a2c <LL_mDelay>
	GPIOE->ODR &= ~(1<<9);
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <start_melody+0x1b0>)
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <start_melody+0x1b0>)
 800252a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800252e:	6153      	str	r3, [r2, #20]
	LL_mDelay(delay_ms);
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4618      	mov	r0, r3
 8002534:	f003 fa7a 	bl	8005a2c <LL_mDelay>

	LL_mDelay(200);
 8002538:	20c8      	movs	r0, #200	; 0xc8
 800253a:	f003 fa77 	bl	8005a2c <LL_mDelay>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000

0800254c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_MspInit+0x4c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_MspInit+0x4c>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_MspInit+0x4c>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800258a:	2007      	movs	r0, #7
 800258c:	f001 f90e 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800

0800259c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6153      	str	r3, [r2, #20]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <LL_TIM_ClearFlag_UPDATE>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f06f 0201 	mvn.w	r2, #1
 80025f6:	611a      	str	r2, [r3, #16]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800262e:	e7fe      	b.n	800262e <NMI_Handler+0x4>

08002630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <HardFault_Handler+0x4>

08002636 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <MemManage_Handler+0x4>

0800263c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <BusFault_Handler+0x4>

08002642 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <UsageFault_Handler+0x4>

08002648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002676:	f000 ffa9 	bl	80035cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}

0800267e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8002682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002686:	f7ff ff89 	bl	800259c <LL_EXTI_IsActiveFlag_0_31>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <EXTI9_5_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8002690:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002694:	f7ff ff98 	bl	80025c8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_9 */
    EXTI9_Callback();
 8002698:	f000 f892 	bl	80027c0 <EXTI9_Callback>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <TIM3_IRQHandler+0x1c>)
 80026a6:	f7ff ffad 	bl	8002604 <LL_TIM_IsActiveFlag_UPDATE>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <TIM3_IRQHandler+0x16>
	  {
	    LL_TIM_ClearFlag_UPDATE(TIM3);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM3_IRQHandler+0x1c>)
 80026b2:	f7ff ff99 	bl	80025e8 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40000400 	.word	0x40000400

080026c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80026d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026d6:	f7ff ff61 	bl	800259c <LL_EXTI_IsActiveFlag_0_31>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80026e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026e4:	f7ff ff70 	bl	80025c8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15 */
    EXTI15_Callback();
 80026e8:	f000 f856 	bl	8002798 <EXTI15_Callback>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
//		rxBuffer[rxBufferCounter] = UART5->DR;
//		LL_USART_ClearFlag_RXNE(UART5);
//	    rxBufferCounter ++;
//	}
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <UART5_IRQHandler+0x10>)
 8002712:	f001 fca1 	bl	8004058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
//
  /* USER CODE END UART5_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000274 	.word	0x20000274

08002720 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8002726:	4817      	ldr	r0, [pc, #92]	; (8002784 <TIM7_IRQHandler+0x64>)
 8002728:	f7ff ff6c 	bl	8002604 <LL_TIM_IsActiveFlag_UPDATE>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d024      	beq.n	800277c <TIM7_IRQHandler+0x5c>
	  {
	    LL_TIM_ClearFlag_UPDATE(TIM7);
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <TIM7_IRQHandler+0x64>)
 8002734:	f7ff ff58 	bl	80025e8 <LL_TIM_ClearFlag_UPDATE>
	    int16_t currentPosCart = getTicksCartPosition();
 8002738:	f7ff fd86 	bl	8002248 <getTicksCartPosition>
 800273c:	4603      	mov	r3, r0
 800273e:	80fb      	strh	r3, [r7, #6]
	    int16_t currentPosPole = getTicksPolePosition();
 8002740:	f7ff fd9e 	bl	8002280 <getTicksPolePosition>
 8002744:	4603      	mov	r3, r0
 8002746:	80bb      	strh	r3, [r7, #4]
	    speedCart = currentPosCart - privPosCart;
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <TIM7_IRQHandler+0x68>)
 800274c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002750:	b29b      	uxth	r3, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	b29b      	uxth	r3, r3
 8002756:	b21a      	sxth	r2, r3
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <TIM7_IRQHandler+0x6c>)
 800275a:	801a      	strh	r2, [r3, #0]
	    speedPole = currentPosPole - privPosPole;
 800275c:	88ba      	ldrh	r2, [r7, #4]
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <TIM7_IRQHandler+0x70>)
 8002760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002764:	b29b      	uxth	r3, r3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	b29b      	uxth	r3, r3
 800276a:	b21a      	sxth	r2, r3
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <TIM7_IRQHandler+0x74>)
 800276e:	801a      	strh	r2, [r3, #0]
	    privPosCart = currentPosCart;
 8002770:	4a05      	ldr	r2, [pc, #20]	; (8002788 <TIM7_IRQHandler+0x68>)
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	8013      	strh	r3, [r2, #0]
	    privPosPole = currentPosPole;
 8002776:	4a06      	ldr	r2, [pc, #24]	; (8002790 <TIM7_IRQHandler+0x70>)
 8002778:	88bb      	ldrh	r3, [r7, #4]
 800277a:	8013      	strh	r3, [r2, #0]
	  }
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40001400 	.word	0x40001400
 8002788:	2000026a 	.word	0x2000026a
 800278c:	20000268 	.word	0x20000268
 8002790:	2000026e 	.word	0x2000026e
 8002794:	2000026c 	.word	0x2000026c

08002798 <EXTI15_Callback>:

/* USER CODE BEGIN 1 */

void EXTI15_Callback(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	if (isCalibration == 0)
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <EXTI15_Callback+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <EXTI15_Callback+0x14>
		moveCarridge(0);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff faef 	bl	8001d88 <moveCarridge>
	else
		rightSwitch = 1;
}
 80027aa:	e002      	b.n	80027b2 <EXTI15_Callback+0x1a>
		rightSwitch = 1;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <EXTI15_Callback+0x24>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000025d 	.word	0x2000025d
 80027bc:	2000025b 	.word	0x2000025b

080027c0 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	if (isCalibration == 0)
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <EXTI9_Callback+0x20>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <EXTI9_Callback+0x14>
		moveCarridge(0);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7ff fadb 	bl	8001d88 <moveCarridge>
	else
		leftSwitch = 1;
}
 80027d2:	e002      	b.n	80027da <EXTI9_Callback+0x1a>
		leftSwitch = 1;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <EXTI9_Callback+0x24>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000025d 	.word	0x2000025d
 80027e4:	2000025c 	.word	0x2000025c

080027e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
	return 1;
 80027ec:	2301      	movs	r3, #1
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_kill>:

int _kill(int pid, int sig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002802:	f004 f937 	bl	8006a74 <__errno>
 8002806:	4603      	mov	r3, r0
 8002808:	2216      	movs	r2, #22
 800280a:	601a      	str	r2, [r3, #0]
	return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_exit>:

void _exit (int status)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ffe7 	bl	80027f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800282a:	e7fe      	b.n	800282a <_exit+0x12>

0800282c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	e00a      	b.n	8002854 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800283e:	f3af 8000 	nop.w
 8002842:	4601      	mov	r1, r0
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	60ba      	str	r2, [r7, #8]
 800284a:	b2ca      	uxtb	r2, r1
 800284c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbf0      	blt.n	800283e <_read+0x12>
	}

return len;
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e009      	b.n	800288c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	60ba      	str	r2, [r7, #8]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbf1      	blt.n	8002878 <_write+0x12>
	}
	return len;
 8002894:	687b      	ldr	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <_close>:

int _close(int file)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
	return -1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028c6:	605a      	str	r2, [r3, #4]
	return 0;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_isatty>:

int _isatty(int file)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	return 1;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
	return 0;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <_sbrk+0x5c>)
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <_sbrk+0x60>)
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <_sbrk+0x64>)
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <_sbrk+0x68>)
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <_sbrk+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	429a      	cmp	r2, r3
 8002936:	d207      	bcs.n	8002948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002938:	f004 f89c 	bl	8006a74 <__errno>
 800293c:	4603      	mov	r3, r0
 800293e:	220c      	movs	r2, #12
 8002940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	e009      	b.n	800295c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <_sbrk+0x64>)
 8002958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20020000 	.word	0x20020000
 8002968:	00000400 	.word	0x00000400
 800296c:	20000270 	.word	0x20000270
 8002970:	20000408 	.word	0x20000408

08002974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <SystemInit+0x20>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <SystemInit+0x20>)
 8002980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <LL_AHB1_GRP1_EnableClock>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40023800 	.word	0x40023800

08002adc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40023800 	.word	0x40023800

08002b0c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40023800 	.word	0x40023800

08002b3c <LL_TIM_DisableARRPreload>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	601a      	str	r2, [r3, #0]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_TIM_OC_DisableFast>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d01c      	beq.n	8002ba6 <LL_TIM_OC_DisableFast+0x4a>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d017      	beq.n	8002ba2 <LL_TIM_OC_DisableFast+0x46>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d012      	beq.n	8002b9e <LL_TIM_OC_DisableFast+0x42>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d00d      	beq.n	8002b9a <LL_TIM_OC_DisableFast+0x3e>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b84:	d007      	beq.n	8002b96 <LL_TIM_OC_DisableFast+0x3a>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	d101      	bne.n	8002b92 <LL_TIM_OC_DisableFast+0x36>
 8002b8e:	2305      	movs	r3, #5
 8002b90:	e00a      	b.n	8002ba8 <LL_TIM_OC_DisableFast+0x4c>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e008      	b.n	8002ba8 <LL_TIM_OC_DisableFast+0x4c>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e006      	b.n	8002ba8 <LL_TIM_OC_DisableFast+0x4c>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <LL_TIM_OC_DisableFast+0x4c>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <LL_TIM_OC_DisableFast+0x4c>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <LL_TIM_OC_DisableFast+0x4c>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3318      	adds	r3, #24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <LL_TIM_OC_DisableFast+0x84>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	4908      	ldr	r1, [pc, #32]	; (8002be4 <LL_TIM_OC_DisableFast+0x88>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	408b      	lsls	r3, r1
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	401a      	ands	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	0800a264 	.word	0x0800a264
 8002be4:	0800a26c 	.word	0x0800a26c

08002be8 <LL_TIM_OC_EnablePreload>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d01c      	beq.n	8002c32 <LL_TIM_OC_EnablePreload+0x4a>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d017      	beq.n	8002c2e <LL_TIM_OC_EnablePreload+0x46>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d012      	beq.n	8002c2a <LL_TIM_OC_EnablePreload+0x42>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d00d      	beq.n	8002c26 <LL_TIM_OC_EnablePreload+0x3e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c10:	d007      	beq.n	8002c22 <LL_TIM_OC_EnablePreload+0x3a>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d101      	bne.n	8002c1e <LL_TIM_OC_EnablePreload+0x36>
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	e00a      	b.n	8002c34 <LL_TIM_OC_EnablePreload+0x4c>
 8002c1e:	2306      	movs	r3, #6
 8002c20:	e008      	b.n	8002c34 <LL_TIM_OC_EnablePreload+0x4c>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e006      	b.n	8002c34 <LL_TIM_OC_EnablePreload+0x4c>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e004      	b.n	8002c34 <LL_TIM_OC_EnablePreload+0x4c>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <LL_TIM_OC_EnablePreload+0x4c>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_TIM_OC_EnablePreload+0x4c>
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3318      	adds	r3, #24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <LL_TIM_OC_EnablePreload+0x80>)
 8002c40:	5cd3      	ldrb	r3, [r2, r3]
 8002c42:	440b      	add	r3, r1
 8002c44:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <LL_TIM_OC_EnablePreload+0x84>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	4619      	mov	r1, r3
 8002c52:	2308      	movs	r3, #8
 8002c54:	408b      	lsls	r3, r1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	0800a264 	.word	0x0800a264
 8002c6c:	0800a26c 	.word	0x0800a26c

08002c70 <LL_TIM_IC_SetActiveInput>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d01c      	beq.n	8002cbc <LL_TIM_IC_SetActiveInput+0x4c>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d017      	beq.n	8002cb8 <LL_TIM_IC_SetActiveInput+0x48>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d012      	beq.n	8002cb4 <LL_TIM_IC_SetActiveInput+0x44>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d00d      	beq.n	8002cb0 <LL_TIM_IC_SetActiveInput+0x40>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9a:	d007      	beq.n	8002cac <LL_TIM_IC_SetActiveInput+0x3c>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d101      	bne.n	8002ca8 <LL_TIM_IC_SetActiveInput+0x38>
 8002ca4:	2305      	movs	r3, #5
 8002ca6:	e00a      	b.n	8002cbe <LL_TIM_IC_SetActiveInput+0x4e>
 8002ca8:	2306      	movs	r3, #6
 8002caa:	e008      	b.n	8002cbe <LL_TIM_IC_SetActiveInput+0x4e>
 8002cac:	2304      	movs	r3, #4
 8002cae:	e006      	b.n	8002cbe <LL_TIM_IC_SetActiveInput+0x4e>
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e004      	b.n	8002cbe <LL_TIM_IC_SetActiveInput+0x4e>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e002      	b.n	8002cbe <LL_TIM_IC_SetActiveInput+0x4e>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_TIM_IC_SetActiveInput+0x4e>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <LL_TIM_IC_SetActiveInput+0x94>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	440b      	add	r3, r1
 8002cce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	490c      	ldr	r1, [pc, #48]	; (8002d08 <LL_TIM_IC_SetActiveInput+0x98>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	2303      	movs	r3, #3
 8002cde:	408b      	lsls	r3, r1
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	7df9      	ldrb	r1, [r7, #23]
 8002cea:	4807      	ldr	r0, [pc, #28]	; (8002d08 <LL_TIM_IC_SetActiveInput+0x98>)
 8002cec:	5c41      	ldrb	r1, [r0, r1]
 8002cee:	408b      	lsls	r3, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	0800a264 	.word	0x0800a264
 8002d08:	0800a274 	.word	0x0800a274

08002d0c <LL_TIM_IC_SetPrescaler>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d01c      	beq.n	8002d58 <LL_TIM_IC_SetPrescaler+0x4c>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d017      	beq.n	8002d54 <LL_TIM_IC_SetPrescaler+0x48>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d012      	beq.n	8002d50 <LL_TIM_IC_SetPrescaler+0x44>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d00d      	beq.n	8002d4c <LL_TIM_IC_SetPrescaler+0x40>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d36:	d007      	beq.n	8002d48 <LL_TIM_IC_SetPrescaler+0x3c>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	d101      	bne.n	8002d44 <LL_TIM_IC_SetPrescaler+0x38>
 8002d40:	2305      	movs	r3, #5
 8002d42:	e00a      	b.n	8002d5a <LL_TIM_IC_SetPrescaler+0x4e>
 8002d44:	2306      	movs	r3, #6
 8002d46:	e008      	b.n	8002d5a <LL_TIM_IC_SetPrescaler+0x4e>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	e006      	b.n	8002d5a <LL_TIM_IC_SetPrescaler+0x4e>
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e004      	b.n	8002d5a <LL_TIM_IC_SetPrescaler+0x4e>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e002      	b.n	8002d5a <LL_TIM_IC_SetPrescaler+0x4e>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <LL_TIM_IC_SetPrescaler+0x4e>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3318      	adds	r3, #24
 8002d60:	4619      	mov	r1, r3
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <LL_TIM_IC_SetPrescaler+0x94>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	440b      	add	r3, r1
 8002d6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	490c      	ldr	r1, [pc, #48]	; (8002da4 <LL_TIM_IC_SetPrescaler+0x98>)
 8002d74:	5ccb      	ldrb	r3, [r1, r3]
 8002d76:	4619      	mov	r1, r3
 8002d78:	230c      	movs	r3, #12
 8002d7a:	408b      	lsls	r3, r1
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	401a      	ands	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	7df9      	ldrb	r1, [r7, #23]
 8002d86:	4807      	ldr	r0, [pc, #28]	; (8002da4 <LL_TIM_IC_SetPrescaler+0x98>)
 8002d88:	5c41      	ldrb	r1, [r0, r1]
 8002d8a:	408b      	lsls	r3, r1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	601a      	str	r2, [r3, #0]
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	0800a264 	.word	0x0800a264
 8002da4:	0800a274 	.word	0x0800a274

08002da8 <LL_TIM_IC_SetFilter>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d01c      	beq.n	8002df4 <LL_TIM_IC_SetFilter+0x4c>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d017      	beq.n	8002df0 <LL_TIM_IC_SetFilter+0x48>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d012      	beq.n	8002dec <LL_TIM_IC_SetFilter+0x44>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d00d      	beq.n	8002de8 <LL_TIM_IC_SetFilter+0x40>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd2:	d007      	beq.n	8002de4 <LL_TIM_IC_SetFilter+0x3c>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d101      	bne.n	8002de0 <LL_TIM_IC_SetFilter+0x38>
 8002ddc:	2305      	movs	r3, #5
 8002dde:	e00a      	b.n	8002df6 <LL_TIM_IC_SetFilter+0x4e>
 8002de0:	2306      	movs	r3, #6
 8002de2:	e008      	b.n	8002df6 <LL_TIM_IC_SetFilter+0x4e>
 8002de4:	2304      	movs	r3, #4
 8002de6:	e006      	b.n	8002df6 <LL_TIM_IC_SetFilter+0x4e>
 8002de8:	2303      	movs	r3, #3
 8002dea:	e004      	b.n	8002df6 <LL_TIM_IC_SetFilter+0x4e>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e002      	b.n	8002df6 <LL_TIM_IC_SetFilter+0x4e>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_TIM_IC_SetFilter+0x4e>
 8002df4:	2300      	movs	r3, #0
 8002df6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <LL_TIM_IC_SetFilter+0x94>)
 8002e02:	5cd3      	ldrb	r3, [r2, r3]
 8002e04:	440b      	add	r3, r1
 8002e06:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	490c      	ldr	r1, [pc, #48]	; (8002e40 <LL_TIM_IC_SetFilter+0x98>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	4619      	mov	r1, r3
 8002e14:	23f0      	movs	r3, #240	; 0xf0
 8002e16:	408b      	lsls	r3, r1
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	7df9      	ldrb	r1, [r7, #23]
 8002e22:	4807      	ldr	r0, [pc, #28]	; (8002e40 <LL_TIM_IC_SetFilter+0x98>)
 8002e24:	5c41      	ldrb	r1, [r0, r1]
 8002e26:	408b      	lsls	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	0800a264 	.word	0x0800a264
 8002e40:	0800a274 	.word	0x0800a274

08002e44 <LL_TIM_IC_SetPolarity>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d01c      	beq.n	8002e90 <LL_TIM_IC_SetPolarity+0x4c>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d017      	beq.n	8002e8c <LL_TIM_IC_SetPolarity+0x48>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d012      	beq.n	8002e88 <LL_TIM_IC_SetPolarity+0x44>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d00d      	beq.n	8002e84 <LL_TIM_IC_SetPolarity+0x40>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6e:	d007      	beq.n	8002e80 <LL_TIM_IC_SetPolarity+0x3c>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e76:	d101      	bne.n	8002e7c <LL_TIM_IC_SetPolarity+0x38>
 8002e78:	2305      	movs	r3, #5
 8002e7a:	e00a      	b.n	8002e92 <LL_TIM_IC_SetPolarity+0x4e>
 8002e7c:	2306      	movs	r3, #6
 8002e7e:	e008      	b.n	8002e92 <LL_TIM_IC_SetPolarity+0x4e>
 8002e80:	2304      	movs	r3, #4
 8002e82:	e006      	b.n	8002e92 <LL_TIM_IC_SetPolarity+0x4e>
 8002e84:	2303      	movs	r3, #3
 8002e86:	e004      	b.n	8002e92 <LL_TIM_IC_SetPolarity+0x4e>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e002      	b.n	8002e92 <LL_TIM_IC_SetPolarity+0x4e>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_TIM_IC_SetPolarity+0x4e>
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	490b      	ldr	r1, [pc, #44]	; (8002ec8 <LL_TIM_IC_SetPolarity+0x84>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	230a      	movs	r3, #10
 8002ea2:	408b      	lsls	r3, r1
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <LL_TIM_IC_SetPolarity+0x84>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	408b      	lsls	r3, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	0800a27c 	.word	0x0800a27c

08002ecc <LL_TIM_SetClockSource>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ede:	f023 0307 	bic.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_TIM_SetEncoderMode>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 0207 	bic.w	r2, r3, #7
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_TIM_SetTriggerOutput>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	605a      	str	r2, [r3, #4]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_TIM_DisableMasterSlaveMode>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b094      	sub	sp, #80	; 0x50
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002f6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	2220      	movs	r2, #32
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fd23 	bl	80069ce <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7ff fd9f 	bl	8002adc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000;
 8002fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002faa:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002fb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fba:	f002 fab7 	bl	800552c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002fbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fc2:	f7ff fdbb 	bl	8002b3c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fcc:	f7ff ff7e 	bl	8002ecc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fd6:	f7ff fe07 	bl	8002be8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002fda:	2360      	movs	r3, #96	; 0x60
 8002fdc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002fee:	f107 031c 	add.w	r3, r7, #28
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2110      	movs	r1, #16
 8002ff6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ffa:	f002 fb31 	bl	8005660 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002ffe:	2110      	movs	r1, #16
 8003000:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003004:	f7ff fdaa 	bl	8002b5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8003008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003010:	f7ff fdea 	bl	8002be8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	461a      	mov	r2, r3
 800301a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800301e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003022:	f002 fb1d 	bl	8005660 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8003026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800302a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800302e:	f7ff fd95 	bl	8002b5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003032:	2100      	movs	r1, #0
 8003034:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003038:	f7ff ff70 	bl	8002f1c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800303c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003040:	f7ff ff7f 	bl	8002f42 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003044:	2001      	movs	r0, #1
 8003046:	f7ff fd31 	bl	8002aac <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 800304a:	2306      	movs	r3, #6
 800304c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800304e:	2302      	movs	r3, #2
 8003050:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4803      	ldr	r0, [pc, #12]	; (8003074 <MX_TIM2_Init+0x110>)
 8003068:	f002 f97a 	bl	8005360 <LL_GPIO_Init>

}
 800306c:	bf00      	nop
 800306e:	3750      	adds	r7, #80	; 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40020000 	.word	0x40020000

08003078 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800308c:	2002      	movs	r0, #2
 800308e:	f7ff fd25 	bl	8002adc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8003092:	2353      	movs	r3, #83	; 0x53
 8003094:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000;
 800309a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	480a      	ldr	r0, [pc, #40]	; (80030d4 <MX_TIM3_Init+0x5c>)
 80030aa:	f002 fa3f 	bl	800552c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80030ae:	4809      	ldr	r0, [pc, #36]	; (80030d4 <MX_TIM3_Init+0x5c>)
 80030b0:	f7ff fd44 	bl	8002b3c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80030b4:	2100      	movs	r1, #0
 80030b6:	4807      	ldr	r0, [pc, #28]	; (80030d4 <MX_TIM3_Init+0x5c>)
 80030b8:	f7ff ff08 	bl	8002ecc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 80030bc:	2120      	movs	r1, #32
 80030be:	4805      	ldr	r0, [pc, #20]	; (80030d4 <MX_TIM3_Init+0x5c>)
 80030c0:	f7ff ff2c 	bl	8002f1c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80030c4:	4803      	ldr	r0, [pc, #12]	; (80030d4 <MX_TIM3_Init+0x5c>)
 80030c6:	f7ff ff3c 	bl	8002f42 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40000400 	.word	0x40000400

080030d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
 80030fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80030fe:	2004      	movs	r0, #4
 8003100:	f7ff fcec 	bl	8002adc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003104:	2002      	movs	r0, #2
 8003106:	f7ff fcd1 	bl	8002aac <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800310a:	23c0      	movs	r3, #192	; 0xc0
 800310c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800310e:	2302      	movs	r3, #2
 8003110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003112:	2303      	movs	r3, #3
 8003114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800311a:	2301      	movs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800311e:	2302      	movs	r3, #2
 8003120:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4828      	ldr	r0, [pc, #160]	; (80031c8 <MX_TIM4_Init+0xf0>)
 8003128:	f002 f91a 	bl	8005360 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X4_TI12);
 800312c:	2103      	movs	r1, #3
 800312e:	4827      	ldr	r0, [pc, #156]	; (80031cc <MX_TIM4_Init+0xf4>)
 8003130:	f7ff fee1 	bl	8002ef6 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8003134:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003138:	2101      	movs	r1, #1
 800313a:	4824      	ldr	r0, [pc, #144]	; (80031cc <MX_TIM4_Init+0xf4>)
 800313c:	f7ff fd98 	bl	8002c70 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	4821      	ldr	r0, [pc, #132]	; (80031cc <MX_TIM4_Init+0xf4>)
 8003146:	f7ff fde1 	bl	8002d0c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 800314a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800314e:	2101      	movs	r1, #1
 8003150:	481e      	ldr	r0, [pc, #120]	; (80031cc <MX_TIM4_Init+0xf4>)
 8003152:	f7ff fe29 	bl	8002da8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8003156:	2200      	movs	r2, #0
 8003158:	2101      	movs	r1, #1
 800315a:	481c      	ldr	r0, [pc, #112]	; (80031cc <MX_TIM4_Init+0xf4>)
 800315c:	f7ff fe72 	bl	8002e44 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8003160:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003164:	2110      	movs	r1, #16
 8003166:	4819      	ldr	r0, [pc, #100]	; (80031cc <MX_TIM4_Init+0xf4>)
 8003168:	f7ff fd82 	bl	8002c70 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800316c:	2200      	movs	r2, #0
 800316e:	2110      	movs	r1, #16
 8003170:	4816      	ldr	r0, [pc, #88]	; (80031cc <MX_TIM4_Init+0xf4>)
 8003172:	f7ff fdcb 	bl	8002d0c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 8003176:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800317a:	2110      	movs	r1, #16
 800317c:	4813      	ldr	r0, [pc, #76]	; (80031cc <MX_TIM4_Init+0xf4>)
 800317e:	f7ff fe13 	bl	8002da8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8003182:	2200      	movs	r2, #0
 8003184:	2110      	movs	r1, #16
 8003186:	4811      	ldr	r0, [pc, #68]	; (80031cc <MX_TIM4_Init+0xf4>)
 8003188:	f7ff fe5c 	bl	8002e44 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8003194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	4809      	ldr	r0, [pc, #36]	; (80031cc <MX_TIM4_Init+0xf4>)
 80031a6:	f002 f9c1 	bl	800552c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80031aa:	4808      	ldr	r0, [pc, #32]	; (80031cc <MX_TIM4_Init+0xf4>)
 80031ac:	f7ff fcc6 	bl	8002b3c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_UPDATE);
 80031b0:	2120      	movs	r1, #32
 80031b2:	4806      	ldr	r0, [pc, #24]	; (80031cc <MX_TIM4_Init+0xf4>)
 80031b4:	f7ff feb2 	bl	8002f1c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80031b8:	4804      	ldr	r0, [pc, #16]	; (80031cc <MX_TIM4_Init+0xf4>)
 80031ba:	f7ff fec2 	bl	8002f42 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80031be:	bf00      	nop
 80031c0:	3730      	adds	r7, #48	; 0x30
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40020400 	.word	0x40020400
 80031cc:	40000800 	.word	0x40000800

080031d0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80031e4:	2008      	movs	r0, #8
 80031e6:	f7ff fc79 	bl	8002adc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 80031ea:	2353      	movs	r3, #83	; 0x53
 80031ec:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	480a      	ldr	r0, [pc, #40]	; (800322c <MX_TIM5_Init+0x5c>)
 8003202:	f002 f993 	bl	800552c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8003206:	4809      	ldr	r0, [pc, #36]	; (800322c <MX_TIM5_Init+0x5c>)
 8003208:	f7ff fc98 	bl	8002b3c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800320c:	2100      	movs	r1, #0
 800320e:	4807      	ldr	r0, [pc, #28]	; (800322c <MX_TIM5_Init+0x5c>)
 8003210:	f7ff fe5c 	bl	8002ecc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8003214:	2100      	movs	r1, #0
 8003216:	4805      	ldr	r0, [pc, #20]	; (800322c <MX_TIM5_Init+0x5c>)
 8003218:	f7ff fe80 	bl	8002f1c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 800321c:	4803      	ldr	r0, [pc, #12]	; (800322c <MX_TIM5_Init+0x5c>)
 800321e:	f7ff fe90 	bl	8002f42 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40000c00 	.word	0x40000c00

08003230 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8003244:	2020      	movs	r0, #32
 8003246:	f7ff fc49 	bl	8002adc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 800324a:	2353      	movs	r3, #83	; 0x53
 800324c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 8003252:	f242 7310 	movw	r3, #10000	; 0x2710
 8003256:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	4619      	mov	r1, r3
 800325c:	4808      	ldr	r0, [pc, #32]	; (8003280 <MX_TIM7_Init+0x50>)
 800325e:	f002 f965 	bl	800552c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8003262:	4807      	ldr	r0, [pc, #28]	; (8003280 <MX_TIM7_Init+0x50>)
 8003264:	f7ff fc6a 	bl	8002b3c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8003268:	2100      	movs	r1, #0
 800326a:	4805      	ldr	r0, [pc, #20]	; (8003280 <MX_TIM7_Init+0x50>)
 800326c:	f7ff fe56 	bl	8002f1c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8003270:	4803      	ldr	r0, [pc, #12]	; (8003280 <MX_TIM7_Init+0x50>)
 8003272:	f7ff fe66 	bl	8002f42 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40001400 	.word	0x40001400

08003284 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
 80032a8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 80032aa:	2002      	movs	r0, #2
 80032ac:	f7ff fc2e 	bl	8002b0c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80032b0:	2004      	movs	r0, #4
 80032b2:	f7ff fbfb 	bl	8002aac <LL_AHB1_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC6   ------> TIM8_CH1
  PC7   ------> TIM8_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80032b6:	23c0      	movs	r3, #192	; 0xc0
 80032b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032ba:	2302      	movs	r3, #2
 80032bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80032ca:	2303      	movs	r3, #3
 80032cc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4831      	ldr	r0, [pc, #196]	; (8003398 <MX_TIM8_Init+0x114>)
 80032d4:	f002 f844 	bl	8005360 <LL_GPIO_Init>

  /* TIM8 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80032d8:	f7ff fb5e 	bl	8002998 <__NVIC_GetPriorityGrouping>
 80032dc:	4603      	mov	r3, r0
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fbae 	bl	8002a44 <NVIC_EncodePriority>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4619      	mov	r1, r3
 80032ec:	202c      	movs	r0, #44	; 0x2c
 80032ee:	f7ff fb7f 	bl	80029f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80032f2:	202c      	movs	r0, #44	; 0x2c
 80032f4:	f7ff fb5e 	bl	80029b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  LL_TIM_SetEncoderMode(TIM8, LL_TIM_ENCODERMODE_X4_TI12);
 80032f8:	2103      	movs	r1, #3
 80032fa:	4828      	ldr	r0, [pc, #160]	; (800339c <MX_TIM8_Init+0x118>)
 80032fc:	f7ff fdfb 	bl	8002ef6 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8003300:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003304:	2101      	movs	r1, #1
 8003306:	4825      	ldr	r0, [pc, #148]	; (800339c <MX_TIM8_Init+0x118>)
 8003308:	f7ff fcb2 	bl	8002c70 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800330c:	2200      	movs	r2, #0
 800330e:	2101      	movs	r1, #1
 8003310:	4822      	ldr	r0, [pc, #136]	; (800339c <MX_TIM8_Init+0x118>)
 8003312:	f7ff fcfb 	bl	8002d0c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 8003316:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800331a:	2101      	movs	r1, #1
 800331c:	481f      	ldr	r0, [pc, #124]	; (800339c <MX_TIM8_Init+0x118>)
 800331e:	f7ff fd43 	bl	8002da8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8003322:	2200      	movs	r2, #0
 8003324:	2101      	movs	r1, #1
 8003326:	481d      	ldr	r0, [pc, #116]	; (800339c <MX_TIM8_Init+0x118>)
 8003328:	f7ff fd8c 	bl	8002e44 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800332c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003330:	2110      	movs	r1, #16
 8003332:	481a      	ldr	r0, [pc, #104]	; (800339c <MX_TIM8_Init+0x118>)
 8003334:	f7ff fc9c 	bl	8002c70 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8003338:	2200      	movs	r2, #0
 800333a:	2110      	movs	r1, #16
 800333c:	4817      	ldr	r0, [pc, #92]	; (800339c <MX_TIM8_Init+0x118>)
 800333e:	f7ff fce5 	bl	8002d0c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 8003342:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8003346:	2110      	movs	r1, #16
 8003348:	4814      	ldr	r0, [pc, #80]	; (800339c <MX_TIM8_Init+0x118>)
 800334a:	f7ff fd2d 	bl	8002da8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800334e:	2200      	movs	r2, #0
 8003350:	2110      	movs	r1, #16
 8003352:	4812      	ldr	r0, [pc, #72]	; (800339c <MX_TIM8_Init+0x118>)
 8003354:	f7ff fd76 	bl	8002e44 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800335c:	2300      	movs	r3, #0
 800335e:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8003360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003366:	2300      	movs	r3, #0
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 800336e:	f107 031c 	add.w	r3, r7, #28
 8003372:	4619      	mov	r1, r3
 8003374:	4809      	ldr	r0, [pc, #36]	; (800339c <MX_TIM8_Init+0x118>)
 8003376:	f002 f8d9 	bl	800552c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 800337a:	4808      	ldr	r0, [pc, #32]	; (800339c <MX_TIM8_Init+0x118>)
 800337c:	f7ff fbde 	bl	8002b3c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_UPDATE);
 8003380:	2120      	movs	r1, #32
 8003382:	4806      	ldr	r0, [pc, #24]	; (800339c <MX_TIM8_Init+0x118>)
 8003384:	f7ff fdca 	bl	8002f1c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <MX_TIM8_Init+0x118>)
 800338a:	f7ff fdda 	bl	8002f42 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	; 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40020800 	.word	0x40020800
 800339c:	40010400 	.word	0x40010400

080033a0 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_UART5_Init+0x4c>)
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <MX_UART5_Init+0x50>)
 80033a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <MX_UART5_Init+0x4c>)
 80033ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_UART5_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <MX_UART5_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <MX_UART5_Init+0x4c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <MX_UART5_Init+0x4c>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <MX_UART5_Init+0x4c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <MX_UART5_Init+0x4c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033d6:	4805      	ldr	r0, [pc, #20]	; (80033ec <MX_UART5_Init+0x4c>)
 80033d8:	f000 fc8c 	bl	8003cf4 <HAL_UART_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80033e2:	f7fe fc7d 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000274 	.word	0x20000274
 80033f0:	40005000 	.word	0x40005000

080033f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <HAL_UART_MspInit+0xd0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d152      	bne.n	80034bc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 8003420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <HAL_UART_MspInit+0xd4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800346a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800347c:	2308      	movs	r3, #8
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	4619      	mov	r1, r3
 8003486:	4811      	ldr	r0, [pc, #68]	; (80034cc <HAL_UART_MspInit+0xd8>)
 8003488:	f000 fa64 	bl	8003954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800348c:	2304      	movs	r3, #4
 800348e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800349c:	2308      	movs	r3, #8
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4619      	mov	r1, r3
 80034a6:	480a      	ldr	r0, [pc, #40]	; (80034d0 <HAL_UART_MspInit+0xdc>)
 80034a8:	f000 fa54 	bl	8003954 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	2035      	movs	r0, #53	; 0x35
 80034b2:	f000 f986 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80034b6:	2035      	movs	r0, #53	; 0x35
 80034b8:	f000 f99f 	bl	80037fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80034bc:	bf00      	nop
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40005000 	.word	0x40005000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800350c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034da:	490e      	ldr	r1, [pc, #56]	; (8003514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034dc:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e0:	e002      	b.n	80034e8 <LoopCopyDataInit>

080034e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e6:	3304      	adds	r3, #4

080034e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034ec:	d3f9      	bcc.n	80034e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034f0:	4c0b      	ldr	r4, [pc, #44]	; (8003520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f4:	e001      	b.n	80034fa <LoopFillZerobss>

080034f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f8:	3204      	adds	r2, #4

080034fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034fc:	d3fb      	bcc.n	80034f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034fe:	f7ff fa39 	bl	8002974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003502:	f003 fabd 	bl	8006a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7fe fabf 	bl	8001a88 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800350c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003518:	0800a6c0 	.word	0x0800a6c0
  ldr r2, =_sbss
 800351c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003520:	20000408 	.word	0x20000408

08003524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_Init+0x40>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_Init+0x40>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <HAL_Init+0x40>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003550:	2003      	movs	r0, #3
 8003552:	f000 f92b 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003556:	2000      	movs	r0, #0
 8003558:	f000 f808 	bl	800356c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355c:	f7fe fff6 	bl	800254c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_InitTick+0x54>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x58>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4619      	mov	r1, r3
 800357e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003582:	fbb3 f3f1 	udiv	r3, r3, r1
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f943 	bl	8003816 <HAL_SYSTICK_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00e      	b.n	80035b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d80a      	bhi.n	80035b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a0:	2200      	movs	r2, #0
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f000 f90b 	bl	80037c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035ac:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <HAL_InitTick+0x5c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000014 	.word	0x20000014
 80035c4:	2000001c 	.word	0x2000001c
 80035c8:	20000018 	.word	0x20000018

080035cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_IncTick+0x20>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x24>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_IncTick+0x24>)
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	2000001c 	.word	0x2000001c
 80035f0:	200002b8 	.word	0x200002b8

080035f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return uwTick;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_GetTick+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	200002b8 	.word	0x200002b8

0800360c <__NVIC_SetPriorityGrouping>:
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003628:	4013      	ands	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363e:	4a04      	ldr	r2, [pc, #16]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60d3      	str	r3, [r2, #12]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_GetPriorityGrouping>:
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <__NVIC_GetPriorityGrouping+0x18>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 0307 	and.w	r3, r3, #7
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_EnableIRQ>:
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db0b      	blt.n	800369a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4907      	ldr	r1, [pc, #28]	; (80036a8 <__NVIC_EnableIRQ+0x38>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2001      	movs	r0, #1
 8003692:	fa00 f202 	lsl.w	r2, r0, r2
 8003696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000e100 	.word	0xe000e100

080036ac <__NVIC_SetPriority>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	6039      	str	r1, [r7, #0]
 80036b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	db0a      	blt.n	80036d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	490c      	ldr	r1, [pc, #48]	; (80036f8 <__NVIC_SetPriority+0x4c>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	440b      	add	r3, r1
 80036d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036d4:	e00a      	b.n	80036ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4908      	ldr	r1, [pc, #32]	; (80036fc <__NVIC_SetPriority+0x50>)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	3b04      	subs	r3, #4
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	440b      	add	r3, r1
 80036ea:	761a      	strb	r2, [r3, #24]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000e100 	.word	0xe000e100
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <NVIC_EncodePriority>:
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	; 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f1c3 0307 	rsb	r3, r3, #7
 800371a:	2b04      	cmp	r3, #4
 800371c:	bf28      	it	cs
 800371e:	2304      	movcs	r3, #4
 8003720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3304      	adds	r3, #4
 8003726:	2b06      	cmp	r3, #6
 8003728:	d902      	bls.n	8003730 <NVIC_EncodePriority+0x30>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3b03      	subs	r3, #3
 800372e:	e000      	b.n	8003732 <NVIC_EncodePriority+0x32>
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	f04f 32ff 	mov.w	r2, #4294967295
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	401a      	ands	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003748:	f04f 31ff 	mov.w	r1, #4294967295
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43d9      	mvns	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	4313      	orrs	r3, r2
}
 800375a:	4618      	mov	r0, r3
 800375c:	3724      	adds	r7, #36	; 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003778:	d301      	bcc.n	800377e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800377a:	2301      	movs	r3, #1
 800377c:	e00f      	b.n	800379e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <SysTick_Config+0x40>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003786:	210f      	movs	r1, #15
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f7ff ff8e 	bl	80036ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <SysTick_Config+0x40>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <SysTick_Config+0x40>)
 8003798:	2207      	movs	r2, #7
 800379a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	e000e010 	.word	0xe000e010

080037ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff29 	bl	800360c <__NVIC_SetPriorityGrouping>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037d4:	f7ff ff3e 	bl	8003654 <__NVIC_GetPriorityGrouping>
 80037d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	f7ff ff8e 	bl	8003700 <NVIC_EncodePriority>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff5d 	bl	80036ac <__NVIC_SetPriority>
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff31 	bl	8003670 <__NVIC_EnableIRQ>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffa2 	bl	8003768 <SysTick_Config>
 8003824:	4603      	mov	r3, r0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff feda 	bl	80035f4 <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d008      	beq.n	8003860 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2280      	movs	r2, #128	; 0x80
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e052      	b.n	8003906 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0216 	bic.w	r2, r2, #22
 800386e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800387e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <HAL_DMA_Abort+0x62>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0208 	bic.w	r2, r2, #8
 800389e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b0:	e013      	b.n	80038da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b2:	f7ff fe9f 	bl	80035f4 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d90c      	bls.n	80038da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2203      	movs	r2, #3
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e015      	b.n	8003906 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e4      	bne.n	80038b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	223f      	movs	r2, #63	; 0x3f
 80038ee:	409a      	lsls	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d004      	beq.n	800392c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e00c      	b.n	8003946 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2205      	movs	r2, #5
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	; 0x24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	e16b      	b.n	8003c48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003970:	2201      	movs	r2, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	f040 815a 	bne.w	8003c42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d005      	beq.n	80039a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d130      	bne.n	8003a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	2203      	movs	r2, #3
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039dc:	2201      	movs	r2, #1
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 0201 	and.w	r2, r3, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d017      	beq.n	8003a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	2203      	movs	r2, #3
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d123      	bne.n	8003a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	08da      	lsrs	r2, r3, #3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3208      	adds	r2, #8
 8003a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	220f      	movs	r2, #15
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	08da      	lsrs	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3208      	adds	r2, #8
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0203 	and.w	r2, r3, #3
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80b4 	beq.w	8003c42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <HAL_GPIO_Init+0x30c>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a5f      	ldr	r2, [pc, #380]	; (8003c60 <HAL_GPIO_Init+0x30c>)
 8003ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <HAL_GPIO_Init+0x30c>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003af6:	4a5b      	ldr	r2, [pc, #364]	; (8003c64 <HAL_GPIO_Init+0x310>)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3302      	adds	r3, #2
 8003afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	220f      	movs	r2, #15
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a52      	ldr	r2, [pc, #328]	; (8003c68 <HAL_GPIO_Init+0x314>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d02b      	beq.n	8003b7a <HAL_GPIO_Init+0x226>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a51      	ldr	r2, [pc, #324]	; (8003c6c <HAL_GPIO_Init+0x318>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d025      	beq.n	8003b76 <HAL_GPIO_Init+0x222>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a50      	ldr	r2, [pc, #320]	; (8003c70 <HAL_GPIO_Init+0x31c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01f      	beq.n	8003b72 <HAL_GPIO_Init+0x21e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4f      	ldr	r2, [pc, #316]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d019      	beq.n	8003b6e <HAL_GPIO_Init+0x21a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <HAL_GPIO_Init+0x324>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0x216>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4d      	ldr	r2, [pc, #308]	; (8003c7c <HAL_GPIO_Init+0x328>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00d      	beq.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_GPIO_Init+0x32c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <HAL_GPIO_Init+0x20e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4b      	ldr	r2, [pc, #300]	; (8003c84 <HAL_GPIO_Init+0x330>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_GPIO_Init+0x20a>
 8003b5a:	2307      	movs	r3, #7
 8003b5c:	e00e      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	e00c      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b62:	2306      	movs	r3, #6
 8003b64:	e00a      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b66:	2305      	movs	r3, #5
 8003b68:	e008      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e006      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e004      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e002      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_GPIO_Init+0x228>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	f002 0203 	and.w	r2, r2, #3
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	4093      	lsls	r3, r2
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b8c:	4935      	ldr	r1, [pc, #212]	; (8003c64 <HAL_GPIO_Init+0x310>)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bbe:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc4:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c3c:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <HAL_GPIO_Init+0x334>)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	f67f ae90 	bls.w	8003970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	40020400 	.word	0x40020400
 8003c70:	40020800 	.word	0x40020800
 8003c74:	40020c00 	.word	0x40020c00
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40021400 	.word	0x40021400
 8003c80:	40021800 	.word	0x40021800
 8003c84:	40021c00 	.word	0x40021c00
 8003c88:	40013c00 	.word	0x40013c00

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000014 	.word	0x20000014

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff0 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0a9b      	lsrs	r3, r3, #10
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	0800a25c 	.word	0x0800a25c

08003ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd0:	f7ff ffdc 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0b5b      	lsrs	r3, r3, #13
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	0800a25c 	.word	0x0800a25c

08003cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e03f      	b.n	8003d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fb6a 	bl	80033f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	; 0x24
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fe81 	bl	8004a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b08a      	sub	sp, #40	; 0x28
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d17c      	bne.n	8003ea8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_UART_Transmit+0x2c>
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e075      	b.n	8003eaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Transmit+0x3e>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e06e      	b.n	8003eaa <HAL_UART_Transmit+0x11c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2221      	movs	r2, #33	; 0x21
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de2:	f7ff fc07 	bl	80035f4 <HAL_GetTick>
 8003de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d108      	bne.n	8003e10 <HAL_UART_Transmit+0x82>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	e003      	b.n	8003e18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e20:	e02a      	b.n	8003e78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2180      	movs	r1, #128	; 0x80
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fbc1 	bl	80045b4 <UART_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e036      	b.n	8003eaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	3302      	adds	r3, #2
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e007      	b.n	8003e6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	3301      	adds	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1cf      	bne.n	8003e22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fb91 	bl	80045b4 <UART_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e006      	b.n	8003eaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b08a      	sub	sp, #40	; 0x28
 8003eb6:	af02      	add	r7, sp, #8
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	f040 808c 	bne.w	8003fec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_UART_Receive+0x2e>
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e084      	b.n	8003fee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Receive+0x40>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e07d      	b.n	8003fee <HAL_UART_Receive+0x13c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2222      	movs	r2, #34	; 0x22
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f0e:	f7ff fb71 	bl	80035f4 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	88fa      	ldrh	r2, [r7, #6]
 8003f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Receive+0x8a>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f4c:	e043      	b.n	8003fd6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2120      	movs	r1, #32
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fb2b 	bl	80045b4 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e042      	b.n	8003fee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10c      	bne.n	8003f88 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	3302      	adds	r3, #2
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e01f      	b.n	8003fc8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f90:	d007      	beq.n	8003fa2 <HAL_UART_Receive+0xf0>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <HAL_UART_Receive+0xfe>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e008      	b.n	8003fc2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1b6      	bne.n	8003f4e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b20      	cmp	r3, #32
 800400e:	d11d      	bne.n	800404c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_UART_Receive_IT+0x26>
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e016      	b.n	800404e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_UART_Receive_IT+0x38>
 800402a:	2302      	movs	r3, #2
 800402c:	e00f      	b.n	800404e <HAL_UART_Receive_IT+0x58>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	461a      	mov	r2, r3
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fb24 	bl	8004690 <UART_Start_Receive_IT>
 8004048:	4603      	mov	r3, r0
 800404a:	e000      	b.n	800404e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0ba      	sub	sp, #232	; 0xe8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10f      	bne.n	80040be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_UART_IRQHandler+0x66>
 80040aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fc07 	bl	80048ca <UART_Receive_IT>
      return;
 80040bc:	e256      	b.n	800456c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80de 	beq.w	8004284 <HAL_UART_IRQHandler+0x22c>
 80040c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80d1 	beq.w	8004284 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_UART_IRQHandler+0xae>
 80040ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_UART_IRQHandler+0xd2>
 8004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_UART_IRQHandler+0xf6>
 8004136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f043 0204 	orr.w	r2, r3, #4
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d011      	beq.n	800417e <HAL_UART_IRQHandler+0x126>
 800415a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d105      	bne.n	8004172 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0208 	orr.w	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 81ed 	beq.w	8004562 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_UART_IRQHandler+0x14e>
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fb92 	bl	80048ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <HAL_UART_IRQHandler+0x17a>
 80041ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04f      	beq.n	8004272 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa9a 	bl	800470c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d141      	bne.n	800426a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3314      	adds	r3, #20
 800420e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004212:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800421e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800422a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1d9      	bne.n	80041e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	2b00      	cmp	r3, #0
 8004238:	d013      	beq.n	8004262 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	4a7d      	ldr	r2, [pc, #500]	; (8004434 <HAL_UART_IRQHandler+0x3dc>)
 8004240:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fb61 	bl	800390e <HAL_DMA_Abort_IT>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800425c:	4610      	mov	r0, r2
 800425e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e00e      	b.n	8004280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f990 	bl	8004588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	e00a      	b.n	8004280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f98c 	bl	8004588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	e006      	b.n	8004280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f988 	bl	8004588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800427e:	e170      	b.n	8004562 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	bf00      	nop
    return;
 8004282:	e16e      	b.n	8004562 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 814a 	bne.w	8004522 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8143 	beq.w	8004522 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 813c 	beq.w	8004522 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	f040 80b4 	bne.w	8004438 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8140 	beq.w	8004566 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f080 8139 	bcs.w	8004566 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	f000 8088 	beq.w	800441a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800433a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004342:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800434e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d9      	bne.n	800430a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3314      	adds	r3, #20
 800435c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800437a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800437e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004382:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800438c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e1      	bne.n	8004356 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e3      	bne.n	8004392 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80043fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004402:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e3      	bne.n	80043d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fa0a 	bl	800382e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004422:	b29b      	uxth	r3, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	b29b      	uxth	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8b6 	bl	800459c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004430:	e099      	b.n	8004566 <HAL_UART_IRQHandler+0x50e>
 8004432:	bf00      	nop
 8004434:	080047d3 	.word	0x080047d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004440:	b29b      	uxth	r3, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 808b 	beq.w	800456a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8086 	beq.w	800456a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004482:	647a      	str	r2, [r7, #68]	; 0x44
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e3      	bne.n	800445e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3314      	adds	r3, #20
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	623b      	str	r3, [r7, #32]
   return(result);
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3314      	adds	r3, #20
 80044b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044ba:	633a      	str	r2, [r7, #48]	; 0x30
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e3      	bne.n	8004496 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0310 	bic.w	r3, r3, #16
 80044f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004500:	61fa      	str	r2, [r7, #28]
 8004502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	69b9      	ldr	r1, [r7, #24]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	617b      	str	r3, [r7, #20]
   return(result);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e3      	bne.n	80044dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f83e 	bl	800459c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004520:	e023      	b.n	800456a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_UART_IRQHandler+0x4ea>
 800452e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f95d 	bl	80047fa <UART_Transmit_IT>
    return;
 8004540:	e014      	b.n	800456c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <HAL_UART_IRQHandler+0x514>
 800454e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f99d 	bl	800489a <UART_EndTransmit_IT>
    return;
 8004560:	e004      	b.n	800456c <HAL_UART_IRQHandler+0x514>
    return;
 8004562:	bf00      	nop
 8004564:	e002      	b.n	800456c <HAL_UART_IRQHandler+0x514>
      return;
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <HAL_UART_IRQHandler+0x514>
      return;
 800456a:	bf00      	nop
  }
}
 800456c:	37e8      	adds	r7, #232	; 0xe8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop

08004574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b090      	sub	sp, #64	; 0x40
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c4:	e050      	b.n	8004668 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d04c      	beq.n	8004668 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80045d4:	f7ff f80e 	bl	80035f4 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d241      	bcs.n	8004668 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004604:	637a      	str	r2, [r7, #52]	; 0x34
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800460a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	613b      	str	r3, [r7, #16]
   return(result);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004638:	623a      	str	r2, [r7, #32]
 800463a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	69f9      	ldr	r1, [r7, #28]
 800463e:	6a3a      	ldr	r2, [r7, #32]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	61bb      	str	r3, [r7, #24]
   return(result);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e00f      	b.n	8004688 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	429a      	cmp	r2, r3
 8004684:	d09f      	beq.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3740      	adds	r7, #64	; 0x40
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2222      	movs	r2, #34	; 0x22
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0220 	orr.w	r2, r2, #32
 80046fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b095      	sub	sp, #84	; 0x54
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800472a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004734:	643a      	str	r2, [r7, #64]	; 0x40
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800473a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	61fb      	str	r3, [r7, #28]
   return(result);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800476e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e5      	bne.n	8004748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	2b01      	cmp	r3, #1
 8004782:	d119      	bne.n	80047b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	60bb      	str	r3, [r7, #8]
   return(result);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 0310 	bic.w	r3, r3, #16
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a4:	61ba      	str	r2, [r7, #24]
 80047a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6979      	ldr	r1, [r7, #20]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	613b      	str	r3, [r7, #16]
   return(result);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e5      	bne.n	8004784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047c6:	bf00      	nop
 80047c8:	3754      	adds	r7, #84	; 0x54
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fecb 	bl	8004588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b21      	cmp	r3, #33	; 0x21
 800480c:	d13e      	bne.n	800488c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	d114      	bne.n	8004842 <UART_Transmit_IT+0x48>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004834:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]
 8004840:	e008      	b.n	8004854 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6211      	str	r1, [r2, #32]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4619      	mov	r1, r3
 8004862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fe5a 	bl	8004574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08c      	sub	sp, #48	; 0x30
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b22      	cmp	r3, #34	; 0x22
 80048dc:	f040 80ab 	bne.w	8004a36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e8:	d117      	bne.n	800491a <UART_Receive_IT+0x50>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d113      	bne.n	800491a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	b29a      	uxth	r2, r3
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e026      	b.n	8004968 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d007      	beq.n	800493e <UART_Receive_IT+0x74>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <UART_Receive_IT+0x82>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e008      	b.n	800495e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004958:	b2da      	uxtb	r2, r3
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004978:	2b00      	cmp	r3, #0
 800497a:	d15a      	bne.n	8004a32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0220 	bic.w	r2, r2, #32
 800498a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800499a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d135      	bne.n	8004a28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	613b      	str	r3, [r7, #16]
   return(result);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f023 0310 	bic.w	r3, r3, #16
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	623a      	str	r2, [r7, #32]
 80049e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	69f9      	ldr	r1, [r7, #28]
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d10a      	bne.n	8004a1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fdbb 	bl	800459c <HAL_UARTEx_RxEventCallback>
 8004a26:	e002      	b.n	8004a2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fc fbc9 	bl	80011c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e002      	b.n	8004a38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3730      	adds	r7, #48	; 0x30
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a44:	b0c0      	sub	sp, #256	; 0x100
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	68d9      	ldr	r1, [r3, #12]
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	ea40 0301 	orr.w	r3, r0, r1
 8004a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a98:	f021 010c 	bic.w	r1, r1, #12
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	6999      	ldr	r1, [r3, #24]
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	ea40 0301 	orr.w	r3, r0, r1
 8004ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b8f      	ldr	r3, [pc, #572]	; (8004d0c <UART_SetConfig+0x2cc>)
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d005      	beq.n	8004ae0 <UART_SetConfig+0xa0>
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b8d      	ldr	r3, [pc, #564]	; (8004d10 <UART_SetConfig+0x2d0>)
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d104      	bne.n	8004aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ae0:	f7ff f8f4 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8004ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ae8:	e003      	b.n	8004af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aea:	f7ff f8db 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8004aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afc:	f040 810c 	bne.w	8004d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b12:	4622      	mov	r2, r4
 8004b14:	462b      	mov	r3, r5
 8004b16:	1891      	adds	r1, r2, r2
 8004b18:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b1a:	415b      	adcs	r3, r3
 8004b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b22:	4621      	mov	r1, r4
 8004b24:	eb12 0801 	adds.w	r8, r2, r1
 8004b28:	4629      	mov	r1, r5
 8004b2a:	eb43 0901 	adc.w	r9, r3, r1
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b42:	4690      	mov	r8, r2
 8004b44:	4699      	mov	r9, r3
 8004b46:	4623      	mov	r3, r4
 8004b48:	eb18 0303 	adds.w	r3, r8, r3
 8004b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b50:	462b      	mov	r3, r5
 8004b52:	eb49 0303 	adc.w	r3, r9, r3
 8004b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b6e:	460b      	mov	r3, r1
 8004b70:	18db      	adds	r3, r3, r3
 8004b72:	653b      	str	r3, [r7, #80]	; 0x50
 8004b74:	4613      	mov	r3, r2
 8004b76:	eb42 0303 	adc.w	r3, r2, r3
 8004b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b84:	f7fc f880 	bl	8000c88 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	011c      	lsls	r4, r3, #4
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	1891      	adds	r1, r2, r2
 8004bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bb8:	4641      	mov	r1, r8
 8004bba:	eb12 0a01 	adds.w	sl, r2, r1
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd8:	4692      	mov	sl, r2
 8004bda:	469b      	mov	fp, r3
 8004bdc:	4643      	mov	r3, r8
 8004bde:	eb1a 0303 	adds.w	r3, sl, r3
 8004be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004be6:	464b      	mov	r3, r9
 8004be8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c04:	460b      	mov	r3, r1
 8004c06:	18db      	adds	r3, r3, r3
 8004c08:	643b      	str	r3, [r7, #64]	; 0x40
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	647b      	str	r3, [r7, #68]	; 0x44
 8004c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c1a:	f7fc f835 	bl	8000c88 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	4b3b      	ldr	r3, [pc, #236]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004c26:	fba3 2301 	umull	r2, r3, r3, r1
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2264      	movs	r2, #100	; 0x64
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	1acb      	subs	r3, r1, r3
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c48:	441c      	add	r4, r3
 8004c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c64:	415b      	adcs	r3, r3
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	1851      	adds	r1, r2, r1
 8004c70:	6339      	str	r1, [r7, #48]	; 0x30
 8004c72:	4649      	mov	r1, r9
 8004c74:	414b      	adcs	r3, r1
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c84:	4659      	mov	r1, fp
 8004c86:	00cb      	lsls	r3, r1, #3
 8004c88:	4651      	mov	r1, sl
 8004c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8e:	4651      	mov	r1, sl
 8004c90:	00ca      	lsls	r2, r1, #3
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	4642      	mov	r2, r8
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	18db      	adds	r3, r3, r3
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	eb42 0303 	adc.w	r3, r2, r3
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cd6:	f7fb ffd7 	bl	8000c88 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	2164      	movs	r1, #100	; 0x64
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	3332      	adds	r3, #50	; 0x32
 8004cf2:	4a08      	ldr	r2, [pc, #32]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	f003 0207 	and.w	r2, r3, #7
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4422      	add	r2, r4
 8004d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d08:	e106      	b.n	8004f18 <UART_SetConfig+0x4d8>
 8004d0a:	bf00      	nop
 8004d0c:	40011000 	.word	0x40011000
 8004d10:	40011400 	.word	0x40011400
 8004d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d2a:	4642      	mov	r2, r8
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	1891      	adds	r1, r2, r2
 8004d30:	6239      	str	r1, [r7, #32]
 8004d32:	415b      	adcs	r3, r3
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
 8004d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	1854      	adds	r4, r2, r1
 8004d3e:	4649      	mov	r1, r9
 8004d40:	eb43 0501 	adc.w	r5, r3, r1
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	00eb      	lsls	r3, r5, #3
 8004d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d52:	00e2      	lsls	r2, r4, #3
 8004d54:	4614      	mov	r4, r2
 8004d56:	461d      	mov	r5, r3
 8004d58:	4643      	mov	r3, r8
 8004d5a:	18e3      	adds	r3, r4, r3
 8004d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d60:	464b      	mov	r3, r9
 8004d62:	eb45 0303 	adc.w	r3, r5, r3
 8004d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d86:	4629      	mov	r1, r5
 8004d88:	008b      	lsls	r3, r1, #2
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d90:	4621      	mov	r1, r4
 8004d92:	008a      	lsls	r2, r1, #2
 8004d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d98:	f7fb ff76 	bl	8000c88 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4b60      	ldr	r3, [pc, #384]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004da2:	fba3 2302 	umull	r2, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	011c      	lsls	r4, r3, #4
 8004daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	61b9      	str	r1, [r7, #24]
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dcc:	4641      	mov	r1, r8
 8004dce:	1851      	adds	r1, r2, r1
 8004dd0:	6139      	str	r1, [r7, #16]
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	414b      	adcs	r3, r1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de4:	4659      	mov	r1, fp
 8004de6:	00cb      	lsls	r3, r1, #3
 8004de8:	4651      	mov	r1, sl
 8004dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dee:	4651      	mov	r1, sl
 8004df0:	00ca      	lsls	r2, r1, #3
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	4642      	mov	r2, r8
 8004dfa:	189b      	adds	r3, r3, r2
 8004dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e00:	464b      	mov	r3, r9
 8004e02:	460a      	mov	r2, r1
 8004e04:	eb42 0303 	adc.w	r3, r2, r3
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e24:	4649      	mov	r1, r9
 8004e26:	008b      	lsls	r3, r1, #2
 8004e28:	4641      	mov	r1, r8
 8004e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2e:	4641      	mov	r1, r8
 8004e30:	008a      	lsls	r2, r1, #2
 8004e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e36:	f7fb ff27 	bl	8000c88 <__aeabi_uldivmod>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4b38      	ldr	r3, [pc, #224]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004e42:	fba3 2301 	umull	r2, r3, r3, r1
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2264      	movs	r2, #100	; 0x64
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	1acb      	subs	r3, r1, r3
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	3332      	adds	r3, #50	; 0x32
 8004e54:	4a33      	ldr	r2, [pc, #204]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e60:	441c      	add	r4, r3
 8004e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e66:	2200      	movs	r2, #0
 8004e68:	673b      	str	r3, [r7, #112]	; 0x70
 8004e6a:	677a      	str	r2, [r7, #116]	; 0x74
 8004e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e70:	4642      	mov	r2, r8
 8004e72:	464b      	mov	r3, r9
 8004e74:	1891      	adds	r1, r2, r2
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	415b      	adcs	r3, r3
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e80:	4641      	mov	r1, r8
 8004e82:	1851      	adds	r1, r2, r1
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	4649      	mov	r1, r9
 8004e88:	414b      	adcs	r3, r1
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e98:	4659      	mov	r1, fp
 8004e9a:	00cb      	lsls	r3, r1, #3
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea2:	4651      	mov	r1, sl
 8004ea4:	00ca      	lsls	r2, r1, #3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4642      	mov	r2, r8
 8004eae:	189b      	adds	r3, r3, r2
 8004eb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	460a      	mov	r2, r1
 8004eb6:	eb42 0303 	adc.w	r3, r2, r3
 8004eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec6:	667a      	str	r2, [r7, #100]	; 0x64
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	008b      	lsls	r3, r1, #2
 8004ed8:	4641      	mov	r1, r8
 8004eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ede:	4641      	mov	r1, r8
 8004ee0:	008a      	lsls	r2, r1, #2
 8004ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ee6:	f7fb fecf 	bl	8000c88 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2164      	movs	r1, #100	; 0x64
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f003 020f 	and.w	r2, r3, #15
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4422      	add	r2, r4
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f24:	51eb851f 	.word	0x51eb851f

08004f28 <LL_EXTI_EnableIT_0_31>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4904      	ldr	r1, [pc, #16]	; (8004f48 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40013c00 	.word	0x40013c00

08004f4c <LL_EXTI_DisableIT_0_31>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	4904      	ldr	r1, [pc, #16]	; (8004f70 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40013c00 	.word	0x40013c00

08004f74 <LL_EXTI_EnableEvent_0_31>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	4904      	ldr	r1, [pc, #16]	; (8004f94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40013c00 	.word	0x40013c00

08004f98 <LL_EXTI_DisableEvent_0_31>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <LL_EXTI_DisableEvent_0_31+0x24>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40013c00 	.word	0x40013c00

08004fc0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	4904      	ldr	r1, [pc, #16]	; (8004fe0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	608b      	str	r3, [r1, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40013c00 	.word	0x40013c00

08004fe4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	4904      	ldr	r1, [pc, #16]	; (8005008 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40013c00 	.word	0x40013c00

0800500c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	4904      	ldr	r1, [pc, #16]	; (800502c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4313      	orrs	r3, r2
 800501e:	60cb      	str	r3, [r1, #12]
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40013c00 	.word	0x40013c00

08005030 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005038:	4b06      	ldr	r3, [pc, #24]	; (8005054 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	43db      	mvns	r3, r3
 8005040:	4904      	ldr	r1, [pc, #16]	; (8005054 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005042:	4013      	ands	r3, r2
 8005044:	60cb      	str	r3, [r1, #12]
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40013c00 	.word	0x40013c00

08005058 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	791b      	ldrb	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d065      	beq.n	8005138 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d06b      	beq.n	800514c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	795b      	ldrb	r3, [r3, #5]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d01c      	beq.n	80050b6 <LL_EXTI_Init+0x5e>
 800507c:	2b02      	cmp	r3, #2
 800507e:	dc25      	bgt.n	80050cc <LL_EXTI_Init+0x74>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <LL_EXTI_Init+0x32>
 8005084:	2b01      	cmp	r3, #1
 8005086:	d00b      	beq.n	80050a0 <LL_EXTI_Init+0x48>
 8005088:	e020      	b.n	80050cc <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ff82 	bl	8004f98 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff ff45 	bl	8004f28 <LL_EXTI_EnableIT_0_31>
          break;
 800509e:	e018      	b.n	80050d2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff51 	bl	8004f4c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ff60 	bl	8004f74 <LL_EXTI_EnableEvent_0_31>
          break;
 80050b4:	e00d      	b.n	80050d2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ff34 	bl	8004f28 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ff55 	bl	8004f74 <LL_EXTI_EnableEvent_0_31>
          break;
 80050ca:	e002      	b.n	80050d2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
          break;
 80050d0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	799b      	ldrb	r3, [r3, #6]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d038      	beq.n	800514c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	799b      	ldrb	r3, [r3, #6]
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d01c      	beq.n	800511c <LL_EXTI_Init+0xc4>
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	dc25      	bgt.n	8005132 <LL_EXTI_Init+0xda>
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d002      	beq.n	80050f0 <LL_EXTI_Init+0x98>
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d00b      	beq.n	8005106 <LL_EXTI_Init+0xae>
 80050ee:	e020      	b.n	8005132 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff ff9b 	bl	8005030 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ff5e 	bl	8004fc0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005104:	e022      	b.n	800514c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ff6a 	bl	8004fe4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff79 	bl	800500c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800511a:	e017      	b.n	800514c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff4d 	bl	8004fc0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ff6e 	bl	800500c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005130:	e00c      	b.n	800514c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
            break;
 8005136:	e009      	b.n	800514c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff05 	bl	8004f4c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ff26 	bl	8004f98 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <LL_GPIO_SetPinMode>:
{
 8005156:	b480      	push	{r7}
 8005158:	b089      	sub	sp, #36	; 0x24
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	fa93 f3a3 	rbit	r3, r3
 8005170:	613b      	str	r3, [r7, #16]
  return result;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	fab3 f383 	clz	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2103      	movs	r1, #3
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	401a      	ands	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	fa93 f3a3 	rbit	r3, r3
 8005190:	61bb      	str	r3, [r7, #24]
  return result;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	fab3 f383 	clz	r3, r3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	601a      	str	r2, [r3, #0]
}
 80051a8:	bf00      	nop
 80051aa:	3724      	adds	r7, #36	; 0x24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_GPIO_SetPinOutputType>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	401a      	ands	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_GPIO_SetPinSpeed>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	613b      	str	r3, [r7, #16]
  return result;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	fab3 f383 	clz	r3, r3
 8005206:	b2db      	uxtb	r3, r3
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2103      	movs	r1, #3
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	fa93 f3a3 	rbit	r3, r3
 800521e:	61bb      	str	r3, [r7, #24]
  return result;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	fa01 f303 	lsl.w	r3, r1, r3
 8005230:	431a      	orrs	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	609a      	str	r2, [r3, #8]
}
 8005236:	bf00      	nop
 8005238:	3724      	adds	r7, #36	; 0x24
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_GPIO_SetPinPull>:
{
 8005242:	b480      	push	{r7}
 8005244:	b089      	sub	sp, #36	; 0x24
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	fa93 f3a3 	rbit	r3, r3
 800525c:	613b      	str	r3, [r7, #16]
  return result;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	fab3 f383 	clz	r3, r3
 8005264:	b2db      	uxtb	r3, r3
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	2103      	movs	r1, #3
 800526a:	fa01 f303 	lsl.w	r3, r1, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	401a      	ands	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	fa93 f3a3 	rbit	r3, r3
 800527c:	61bb      	str	r3, [r7, #24]
  return result;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	fab3 f383 	clz	r3, r3
 8005284:	b2db      	uxtb	r3, r3
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	431a      	orrs	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	60da      	str	r2, [r3, #12]
}
 8005294:	bf00      	nop
 8005296:	3724      	adds	r7, #36	; 0x24
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <LL_GPIO_SetAFPin_0_7>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	; 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	fa93 f3a3 	rbit	r3, r3
 80052ba:	613b      	str	r3, [r7, #16]
  return result;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	210f      	movs	r1, #15
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	401a      	ands	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	fa93 f3a3 	rbit	r3, r3
 80052da:	61bb      	str	r3, [r7, #24]
  return result;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	431a      	orrs	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <LL_GPIO_SetAFPin_8_15>:
{
 80052fe:	b480      	push	{r7}
 8005300:	b089      	sub	sp, #36	; 0x24
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	613b      	str	r3, [r7, #16]
  return result;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	210f      	movs	r1, #15
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	fa93 f3a3 	rbit	r3, r3
 800533c:	61bb      	str	r3, [r7, #24]
  return result;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	fab3 f383 	clz	r3, r3
 8005344:	b2db      	uxtb	r3, r3
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	fa01 f303 	lsl.w	r3, r1, r3
 800534e:	431a      	orrs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005354:	bf00      	nop
 8005356:	3724      	adds	r7, #36	; 0x24
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	fa93 f3a3 	rbit	r3, r3
 800537e:	613b      	str	r3, [r7, #16]
  return result;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800538a:	e050      	b.n	800542e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2101      	movs	r1, #1
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d042      	beq.n	8005428 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d003      	beq.n	80053b2 <LL_GPIO_Init+0x52>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d10d      	bne.n	80053ce <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	461a      	mov	r2, r3
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ff12 	bl	80051e4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	461a      	mov	r2, r3
 80053c6:	69b9      	ldr	r1, [r7, #24]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fef3 	bl	80051b4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	461a      	mov	r2, r3
 80053d4:	69b9      	ldr	r1, [r7, #24]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ff33 	bl	8005242 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d11a      	bne.n	800541a <LL_GPIO_Init+0xba>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	fa93 f3a3 	rbit	r3, r3
 80053ee:	60bb      	str	r3, [r7, #8]
  return result;
 80053f0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80053f2:	fab3 f383 	clz	r3, r3
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b07      	cmp	r3, #7
 80053fa:	d807      	bhi.n	800540c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	461a      	mov	r2, r3
 8005402:	69b9      	ldr	r1, [r7, #24]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff ff4b 	bl	80052a0 <LL_GPIO_SetAFPin_0_7>
 800540a:	e006      	b.n	800541a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	461a      	mov	r2, r3
 8005412:	69b9      	ldr	r1, [r7, #24]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff72 	bl	80052fe <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	461a      	mov	r2, r3
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fe97 	bl	8005156 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1a7      	bne.n	800538c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <LL_TIM_SetPrescaler>:
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_TIM_SetAutoReload>:
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <LL_TIM_SetRepetitionCounter>:
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <LL_TIM_OC_SetCompareCH1>:
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <LL_TIM_OC_SetCompareCH2>:
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_TIM_OC_SetCompareCH3>:
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <LL_TIM_OC_SetCompareCH4>:
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f043 0201 	orr.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	615a      	str	r2, [r3, #20]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3d      	ldr	r2, [pc, #244]	; (8005634 <LL_TIM_Init+0x108>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <LL_TIM_Init+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d00f      	beq.n	800556c <LL_TIM_Init+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <LL_TIM_Init+0x10c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00b      	beq.n	800556c <LL_TIM_Init+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a39      	ldr	r2, [pc, #228]	; (800563c <LL_TIM_Init+0x110>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d007      	beq.n	800556c <LL_TIM_Init+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a38      	ldr	r2, [pc, #224]	; (8005640 <LL_TIM_Init+0x114>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <LL_TIM_Init+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <LL_TIM_Init+0x118>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d106      	bne.n	800557a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <LL_TIM_Init+0x108>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d02b      	beq.n	80055da <LL_TIM_Init+0xae>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005588:	d027      	beq.n	80055da <LL_TIM_Init+0xae>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <LL_TIM_Init+0x10c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d023      	beq.n	80055da <LL_TIM_Init+0xae>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a29      	ldr	r2, [pc, #164]	; (800563c <LL_TIM_Init+0x110>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01f      	beq.n	80055da <LL_TIM_Init+0xae>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a28      	ldr	r2, [pc, #160]	; (8005640 <LL_TIM_Init+0x114>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01b      	beq.n	80055da <LL_TIM_Init+0xae>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a27      	ldr	r2, [pc, #156]	; (8005644 <LL_TIM_Init+0x118>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d017      	beq.n	80055da <LL_TIM_Init+0xae>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a26      	ldr	r2, [pc, #152]	; (8005648 <LL_TIM_Init+0x11c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <LL_TIM_Init+0xae>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <LL_TIM_Init+0x120>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <LL_TIM_Init+0xae>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <LL_TIM_Init+0x124>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <LL_TIM_Init+0xae>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a23      	ldr	r2, [pc, #140]	; (8005654 <LL_TIM_Init+0x128>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <LL_TIM_Init+0xae>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a22      	ldr	r2, [pc, #136]	; (8005658 <LL_TIM_Init+0x12c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <LL_TIM_Init+0xae>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <LL_TIM_Init+0x130>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d106      	bne.n	80055e8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff34 	bl	8005462 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff20 	bl	8005446 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <LL_TIM_Init+0x108>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <LL_TIM_Init+0xea>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a0c      	ldr	r2, [pc, #48]	; (8005644 <LL_TIM_Init+0x118>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d105      	bne.n	8005622 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff2e 	bl	800547e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff ff71 	bl	800550a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40010400 	.word	0x40010400
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800
 8005654:	40001800 	.word	0x40001800
 8005658:	40001c00 	.word	0x40001c00
 800565c:	40002000 	.word	0x40002000

08005660 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005676:	d027      	beq.n	80056c8 <LL_TIM_OC_Init+0x68>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567e:	d82a      	bhi.n	80056d6 <LL_TIM_OC_Init+0x76>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	d018      	beq.n	80056ba <LL_TIM_OC_Init+0x5a>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	d822      	bhi.n	80056d6 <LL_TIM_OC_Init+0x76>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d003      	beq.n	800569e <LL_TIM_OC_Init+0x3e>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b10      	cmp	r3, #16
 800569a:	d007      	beq.n	80056ac <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800569c:	e01b      	b.n	80056d6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f81f 	bl	80056e4 <OC1Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]
      break;
 80056aa:	e015      	b.n	80056d8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f884 	bl	80057bc <OC2Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	75fb      	strb	r3, [r7, #23]
      break;
 80056b8:	e00e      	b.n	80056d8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f8ed 	bl	800589c <OC3Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75fb      	strb	r3, [r7, #23]
      break;
 80056c6:	e007      	b.n	80056d8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f956 	bl	800597c <OC4Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	75fb      	strb	r3, [r7, #23]
      break;
 80056d4:	e000      	b.n	80056d8 <LL_TIM_OC_Init+0x78>
      break;
 80056d6:	bf00      	nop
  }

  return result;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0202 	bic.w	r2, r3, #2
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <OC1Config+0xd0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <OC1Config+0x6a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <OC1Config+0xd4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d11e      	bne.n	800578c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 0208 	bic.w	r2, r3, #8
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 0204 	bic.w	r2, r3, #4
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fe7b 	bl	800549a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400

080057bc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0210 	bic.w	r2, r3, #16
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0220 	bic.w	r2, r3, #32
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0210 	bic.w	r2, r3, #16
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <OC2Config+0xd8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <OC2Config+0x70>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <OC2Config+0xdc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d11f      	bne.n	800586c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	019b      	lsls	r3, r3, #6
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	019b      	lsls	r3, r3, #6
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fe19 	bl	80054b6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40010000 	.word	0x40010000
 8005898:	40010400 	.word	0x40010400

0800589c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <OC3Config+0xd8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <OC3Config+0x6e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <OC3Config+0xdc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d11f      	bne.n	800594a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	029b      	lsls	r3, r3, #10
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	015b      	lsls	r3, r3, #5
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fdb8 	bl	80054d2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400

0800597c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	031b      	lsls	r3, r3, #12
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	031b      	lsls	r3, r3, #12
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a11      	ldr	r2, [pc, #68]	; (8005a24 <OC4Config+0xa8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <OC4Config+0x70>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a10      	ldr	r2, [pc, #64]	; (8005a28 <OC4Config+0xac>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d107      	bne.n	80059fc <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	019b      	lsls	r3, r3, #6
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff fd6d 	bl	80054ee <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40010400 	.word	0x40010400

08005a2c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005a34:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <LL_mDelay+0x48>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005a3a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d00c      	beq.n	8005a5e <LL_mDelay+0x32>
  {
    Delay++;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3301      	adds	r3, #1
 8005a48:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8005a4a:	e008      	b.n	8005a5e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <LL_mDelay+0x48>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <LL_mDelay+0x32>
    {
      Delay--;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f3      	bne.n	8005a4c <LL_mDelay+0x20>
    }
  }
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	e000e010 	.word	0xe000e010

08005a78 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005a80:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <LL_SetSystemCoreClock+0x1c>)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6013      	str	r3, [r2, #0]
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20000014 	.word	0x20000014

08005a98 <__cvt>:
 8005a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	ec55 4b10 	vmov	r4, r5, d0
 8005aa0:	2d00      	cmp	r5, #0
 8005aa2:	460e      	mov	r6, r1
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	bfbb      	ittet	lt
 8005aaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005aae:	461d      	movlt	r5, r3
 8005ab0:	2300      	movge	r3, #0
 8005ab2:	232d      	movlt	r3, #45	; 0x2d
 8005ab4:	700b      	strb	r3, [r1, #0]
 8005ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005abc:	4691      	mov	r9, r2
 8005abe:	f023 0820 	bic.w	r8, r3, #32
 8005ac2:	bfbc      	itt	lt
 8005ac4:	4622      	movlt	r2, r4
 8005ac6:	4614      	movlt	r4, r2
 8005ac8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005acc:	d005      	beq.n	8005ada <__cvt+0x42>
 8005ace:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ad2:	d100      	bne.n	8005ad6 <__cvt+0x3e>
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	e000      	b.n	8005adc <__cvt+0x44>
 8005ada:	2103      	movs	r1, #3
 8005adc:	ab03      	add	r3, sp, #12
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	ab02      	add	r3, sp, #8
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	ec45 4b10 	vmov	d0, r4, r5
 8005ae8:	4653      	mov	r3, sl
 8005aea:	4632      	mov	r2, r6
 8005aec:	f001 f88c 	bl	8006c08 <_dtoa_r>
 8005af0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005af4:	4607      	mov	r7, r0
 8005af6:	d102      	bne.n	8005afe <__cvt+0x66>
 8005af8:	f019 0f01 	tst.w	r9, #1
 8005afc:	d022      	beq.n	8005b44 <__cvt+0xac>
 8005afe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b02:	eb07 0906 	add.w	r9, r7, r6
 8005b06:	d110      	bne.n	8005b2a <__cvt+0x92>
 8005b08:	783b      	ldrb	r3, [r7, #0]
 8005b0a:	2b30      	cmp	r3, #48	; 0x30
 8005b0c:	d10a      	bne.n	8005b24 <__cvt+0x8c>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2300      	movs	r3, #0
 8005b12:	4620      	mov	r0, r4
 8005b14:	4629      	mov	r1, r5
 8005b16:	f7fa ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b1a:	b918      	cbnz	r0, 8005b24 <__cvt+0x8c>
 8005b1c:	f1c6 0601 	rsb	r6, r6, #1
 8005b20:	f8ca 6000 	str.w	r6, [sl]
 8005b24:	f8da 3000 	ldr.w	r3, [sl]
 8005b28:	4499      	add	r9, r3
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7fa ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b36:	b108      	cbz	r0, 8005b3c <__cvt+0xa4>
 8005b38:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b3c:	2230      	movs	r2, #48	; 0x30
 8005b3e:	9b03      	ldr	r3, [sp, #12]
 8005b40:	454b      	cmp	r3, r9
 8005b42:	d307      	bcc.n	8005b54 <__cvt+0xbc>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b48:	1bdb      	subs	r3, r3, r7
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	b004      	add	sp, #16
 8005b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b54:	1c59      	adds	r1, r3, #1
 8005b56:	9103      	str	r1, [sp, #12]
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e7f0      	b.n	8005b3e <__cvt+0xa6>

08005b5c <__exponent>:
 8005b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2900      	cmp	r1, #0
 8005b62:	bfb8      	it	lt
 8005b64:	4249      	neglt	r1, r1
 8005b66:	f803 2b02 	strb.w	r2, [r3], #2
 8005b6a:	bfb4      	ite	lt
 8005b6c:	222d      	movlt	r2, #45	; 0x2d
 8005b6e:	222b      	movge	r2, #43	; 0x2b
 8005b70:	2909      	cmp	r1, #9
 8005b72:	7042      	strb	r2, [r0, #1]
 8005b74:	dd2a      	ble.n	8005bcc <__exponent+0x70>
 8005b76:	f10d 0207 	add.w	r2, sp, #7
 8005b7a:	4617      	mov	r7, r2
 8005b7c:	260a      	movs	r6, #10
 8005b7e:	4694      	mov	ip, r2
 8005b80:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b84:	fb06 1415 	mls	r4, r6, r5, r1
 8005b88:	3430      	adds	r4, #48	; 0x30
 8005b8a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b8e:	460c      	mov	r4, r1
 8005b90:	2c63      	cmp	r4, #99	; 0x63
 8005b92:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b96:	4629      	mov	r1, r5
 8005b98:	dcf1      	bgt.n	8005b7e <__exponent+0x22>
 8005b9a:	3130      	adds	r1, #48	; 0x30
 8005b9c:	f1ac 0402 	sub.w	r4, ip, #2
 8005ba0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005ba4:	1c41      	adds	r1, r0, #1
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	42ba      	cmp	r2, r7
 8005baa:	d30a      	bcc.n	8005bc2 <__exponent+0x66>
 8005bac:	f10d 0209 	add.w	r2, sp, #9
 8005bb0:	eba2 020c 	sub.w	r2, r2, ip
 8005bb4:	42bc      	cmp	r4, r7
 8005bb6:	bf88      	it	hi
 8005bb8:	2200      	movhi	r2, #0
 8005bba:	4413      	add	r3, r2
 8005bbc:	1a18      	subs	r0, r3, r0
 8005bbe:	b003      	add	sp, #12
 8005bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005bc6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bca:	e7ed      	b.n	8005ba8 <__exponent+0x4c>
 8005bcc:	2330      	movs	r3, #48	; 0x30
 8005bce:	3130      	adds	r1, #48	; 0x30
 8005bd0:	7083      	strb	r3, [r0, #2]
 8005bd2:	70c1      	strb	r1, [r0, #3]
 8005bd4:	1d03      	adds	r3, r0, #4
 8005bd6:	e7f1      	b.n	8005bbc <__exponent+0x60>

08005bd8 <_printf_float>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	ed2d 8b02 	vpush	{d8}
 8005be0:	b08d      	sub	sp, #52	; 0x34
 8005be2:	460c      	mov	r4, r1
 8005be4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005be8:	4616      	mov	r6, r2
 8005bea:	461f      	mov	r7, r3
 8005bec:	4605      	mov	r5, r0
 8005bee:	f000 fef7 	bl	80069e0 <_localeconv_r>
 8005bf2:	f8d0 a000 	ldr.w	sl, [r0]
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	f7fa fb3a 	bl	8000270 <strlen>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	9305      	str	r3, [sp, #20]
 8005c04:	f8d8 3000 	ldr.w	r3, [r8]
 8005c08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c0c:	3307      	adds	r3, #7
 8005c0e:	f023 0307 	bic.w	r3, r3, #7
 8005c12:	f103 0208 	add.w	r2, r3, #8
 8005c16:	f8c8 2000 	str.w	r2, [r8]
 8005c1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c22:	9307      	str	r3, [sp, #28]
 8005c24:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c28:	ee08 0a10 	vmov	s16, r0
 8005c2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c34:	4b9e      	ldr	r3, [pc, #632]	; (8005eb0 <_printf_float+0x2d8>)
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3a:	f7fa ff77 	bl	8000b2c <__aeabi_dcmpun>
 8005c3e:	bb88      	cbnz	r0, 8005ca4 <_printf_float+0xcc>
 8005c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c44:	4b9a      	ldr	r3, [pc, #616]	; (8005eb0 <_printf_float+0x2d8>)
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4a:	f7fa ff51 	bl	8000af0 <__aeabi_dcmple>
 8005c4e:	bb48      	cbnz	r0, 8005ca4 <_printf_float+0xcc>
 8005c50:	2200      	movs	r2, #0
 8005c52:	2300      	movs	r3, #0
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa ff40 	bl	8000adc <__aeabi_dcmplt>
 8005c5c:	b110      	cbz	r0, 8005c64 <_printf_float+0x8c>
 8005c5e:	232d      	movs	r3, #45	; 0x2d
 8005c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c64:	4a93      	ldr	r2, [pc, #588]	; (8005eb4 <_printf_float+0x2dc>)
 8005c66:	4b94      	ldr	r3, [pc, #592]	; (8005eb8 <_printf_float+0x2e0>)
 8005c68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c6c:	bf94      	ite	ls
 8005c6e:	4690      	movls	r8, r2
 8005c70:	4698      	movhi	r8, r3
 8005c72:	2303      	movs	r3, #3
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	9b05      	ldr	r3, [sp, #20]
 8005c78:	f023 0304 	bic.w	r3, r3, #4
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	f04f 0900 	mov.w	r9, #0
 8005c82:	9700      	str	r7, [sp, #0]
 8005c84:	4633      	mov	r3, r6
 8005c86:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 f9da 	bl	8006044 <_printf_common>
 8005c90:	3001      	adds	r0, #1
 8005c92:	f040 8090 	bne.w	8005db6 <_printf_float+0x1de>
 8005c96:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9a:	b00d      	add	sp, #52	; 0x34
 8005c9c:	ecbd 8b02 	vpop	{d8}
 8005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	4640      	mov	r0, r8
 8005caa:	4649      	mov	r1, r9
 8005cac:	f7fa ff3e 	bl	8000b2c <__aeabi_dcmpun>
 8005cb0:	b140      	cbz	r0, 8005cc4 <_printf_float+0xec>
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bfbc      	itt	lt
 8005cb8:	232d      	movlt	r3, #45	; 0x2d
 8005cba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cbe:	4a7f      	ldr	r2, [pc, #508]	; (8005ebc <_printf_float+0x2e4>)
 8005cc0:	4b7f      	ldr	r3, [pc, #508]	; (8005ec0 <_printf_float+0x2e8>)
 8005cc2:	e7d1      	b.n	8005c68 <_printf_float+0x90>
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cca:	9206      	str	r2, [sp, #24]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	d13f      	bne.n	8005d50 <_printf_float+0x178>
 8005cd0:	2306      	movs	r3, #6
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	9b05      	ldr	r3, [sp, #20]
 8005cd6:	6861      	ldr	r1, [r4, #4]
 8005cd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9303      	str	r3, [sp, #12]
 8005ce0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ce2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ce6:	ab09      	add	r3, sp, #36	; 0x24
 8005ce8:	ec49 8b10 	vmov	d0, r8, r9
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	6022      	str	r2, [r4, #0]
 8005cf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f7ff fecf 	bl	8005a98 <__cvt>
 8005cfa:	9b06      	ldr	r3, [sp, #24]
 8005cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cfe:	2b47      	cmp	r3, #71	; 0x47
 8005d00:	4680      	mov	r8, r0
 8005d02:	d108      	bne.n	8005d16 <_printf_float+0x13e>
 8005d04:	1cc8      	adds	r0, r1, #3
 8005d06:	db02      	blt.n	8005d0e <_printf_float+0x136>
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	4299      	cmp	r1, r3
 8005d0c:	dd41      	ble.n	8005d92 <_printf_float+0x1ba>
 8005d0e:	f1ab 0302 	sub.w	r3, fp, #2
 8005d12:	fa5f fb83 	uxtb.w	fp, r3
 8005d16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d1a:	d820      	bhi.n	8005d5e <_printf_float+0x186>
 8005d1c:	3901      	subs	r1, #1
 8005d1e:	465a      	mov	r2, fp
 8005d20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d24:	9109      	str	r1, [sp, #36]	; 0x24
 8005d26:	f7ff ff19 	bl	8005b5c <__exponent>
 8005d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d2c:	1813      	adds	r3, r2, r0
 8005d2e:	2a01      	cmp	r2, #1
 8005d30:	4681      	mov	r9, r0
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	dc02      	bgt.n	8005d3c <_printf_float+0x164>
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	07d2      	lsls	r2, r2, #31
 8005d3a:	d501      	bpl.n	8005d40 <_printf_float+0x168>
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	6123      	str	r3, [r4, #16]
 8005d40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d09c      	beq.n	8005c82 <_printf_float+0xaa>
 8005d48:	232d      	movs	r3, #45	; 0x2d
 8005d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4e:	e798      	b.n	8005c82 <_printf_float+0xaa>
 8005d50:	9a06      	ldr	r2, [sp, #24]
 8005d52:	2a47      	cmp	r2, #71	; 0x47
 8005d54:	d1be      	bne.n	8005cd4 <_printf_float+0xfc>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1bc      	bne.n	8005cd4 <_printf_float+0xfc>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e7b9      	b.n	8005cd2 <_printf_float+0xfa>
 8005d5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d62:	d118      	bne.n	8005d96 <_printf_float+0x1be>
 8005d64:	2900      	cmp	r1, #0
 8005d66:	6863      	ldr	r3, [r4, #4]
 8005d68:	dd0b      	ble.n	8005d82 <_printf_float+0x1aa>
 8005d6a:	6121      	str	r1, [r4, #16]
 8005d6c:	b913      	cbnz	r3, 8005d74 <_printf_float+0x19c>
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	07d0      	lsls	r0, r2, #31
 8005d72:	d502      	bpl.n	8005d7a <_printf_float+0x1a2>
 8005d74:	3301      	adds	r3, #1
 8005d76:	440b      	add	r3, r1
 8005d78:	6123      	str	r3, [r4, #16]
 8005d7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d7c:	f04f 0900 	mov.w	r9, #0
 8005d80:	e7de      	b.n	8005d40 <_printf_float+0x168>
 8005d82:	b913      	cbnz	r3, 8005d8a <_printf_float+0x1b2>
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	07d2      	lsls	r2, r2, #31
 8005d88:	d501      	bpl.n	8005d8e <_printf_float+0x1b6>
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	e7f4      	b.n	8005d78 <_printf_float+0x1a0>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e7f2      	b.n	8005d78 <_printf_float+0x1a0>
 8005d92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	4299      	cmp	r1, r3
 8005d9a:	db05      	blt.n	8005da8 <_printf_float+0x1d0>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	6121      	str	r1, [r4, #16]
 8005da0:	07d8      	lsls	r0, r3, #31
 8005da2:	d5ea      	bpl.n	8005d7a <_printf_float+0x1a2>
 8005da4:	1c4b      	adds	r3, r1, #1
 8005da6:	e7e7      	b.n	8005d78 <_printf_float+0x1a0>
 8005da8:	2900      	cmp	r1, #0
 8005daa:	bfd4      	ite	le
 8005dac:	f1c1 0202 	rsble	r2, r1, #2
 8005db0:	2201      	movgt	r2, #1
 8005db2:	4413      	add	r3, r2
 8005db4:	e7e0      	b.n	8005d78 <_printf_float+0x1a0>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	055a      	lsls	r2, r3, #21
 8005dba:	d407      	bmi.n	8005dcc <_printf_float+0x1f4>
 8005dbc:	6923      	ldr	r3, [r4, #16]
 8005dbe:	4642      	mov	r2, r8
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d12c      	bne.n	8005e24 <_printf_float+0x24c>
 8005dca:	e764      	b.n	8005c96 <_printf_float+0xbe>
 8005dcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dd0:	f240 80e0 	bls.w	8005f94 <_printf_float+0x3bc>
 8005dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f7fa fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d034      	beq.n	8005e4e <_printf_float+0x276>
 8005de4:	4a37      	ldr	r2, [pc, #220]	; (8005ec4 <_printf_float+0x2ec>)
 8005de6:	2301      	movs	r3, #1
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	f43f af51 	beq.w	8005c96 <_printf_float+0xbe>
 8005df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	db02      	blt.n	8005e02 <_printf_float+0x22a>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	07d8      	lsls	r0, r3, #31
 8005e00:	d510      	bpl.n	8005e24 <_printf_float+0x24c>
 8005e02:	ee18 3a10 	vmov	r3, s16
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f af41 	beq.w	8005c96 <_printf_float+0xbe>
 8005e14:	f04f 0800 	mov.w	r8, #0
 8005e18:	f104 091a 	add.w	r9, r4, #26
 8005e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4543      	cmp	r3, r8
 8005e22:	dc09      	bgt.n	8005e38 <_printf_float+0x260>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	079b      	lsls	r3, r3, #30
 8005e28:	f100 8107 	bmi.w	800603a <_printf_float+0x462>
 8005e2c:	68e0      	ldr	r0, [r4, #12]
 8005e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e30:	4298      	cmp	r0, r3
 8005e32:	bfb8      	it	lt
 8005e34:	4618      	movlt	r0, r3
 8005e36:	e730      	b.n	8005c9a <_printf_float+0xc2>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	464a      	mov	r2, r9
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f af27 	beq.w	8005c96 <_printf_float+0xbe>
 8005e48:	f108 0801 	add.w	r8, r8, #1
 8005e4c:	e7e6      	b.n	8005e1c <_printf_float+0x244>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	dc39      	bgt.n	8005ec8 <_printf_float+0x2f0>
 8005e54:	4a1b      	ldr	r2, [pc, #108]	; (8005ec4 <_printf_float+0x2ec>)
 8005e56:	2301      	movs	r3, #1
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f af19 	beq.w	8005c96 <_printf_float+0xbe>
 8005e64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	d102      	bne.n	8005e72 <_printf_float+0x29a>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	07d9      	lsls	r1, r3, #31
 8005e70:	d5d8      	bpl.n	8005e24 <_printf_float+0x24c>
 8005e72:	ee18 3a10 	vmov	r3, s16
 8005e76:	4652      	mov	r2, sl
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f af09 	beq.w	8005c96 <_printf_float+0xbe>
 8005e84:	f04f 0900 	mov.w	r9, #0
 8005e88:	f104 0a1a 	add.w	sl, r4, #26
 8005e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8e:	425b      	negs	r3, r3
 8005e90:	454b      	cmp	r3, r9
 8005e92:	dc01      	bgt.n	8005e98 <_printf_float+0x2c0>
 8005e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e96:	e792      	b.n	8005dbe <_printf_float+0x1e6>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f aef7 	beq.w	8005c96 <_printf_float+0xbe>
 8005ea8:	f109 0901 	add.w	r9, r9, #1
 8005eac:	e7ee      	b.n	8005e8c <_printf_float+0x2b4>
 8005eae:	bf00      	nop
 8005eb0:	7fefffff 	.word	0x7fefffff
 8005eb4:	0800a283 	.word	0x0800a283
 8005eb8:	0800a287 	.word	0x0800a287
 8005ebc:	0800a28b 	.word	0x0800a28b
 8005ec0:	0800a28f 	.word	0x0800a28f
 8005ec4:	0800a293 	.word	0x0800a293
 8005ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	bfa8      	it	ge
 8005ed0:	461a      	movge	r2, r3
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	dc37      	bgt.n	8005f48 <_printf_float+0x370>
 8005ed8:	f04f 0b00 	mov.w	fp, #0
 8005edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ee0:	f104 021a 	add.w	r2, r4, #26
 8005ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ee6:	9305      	str	r3, [sp, #20]
 8005ee8:	eba3 0309 	sub.w	r3, r3, r9
 8005eec:	455b      	cmp	r3, fp
 8005eee:	dc33      	bgt.n	8005f58 <_printf_float+0x380>
 8005ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	db3b      	blt.n	8005f70 <_printf_float+0x398>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	07da      	lsls	r2, r3, #31
 8005efc:	d438      	bmi.n	8005f70 <_printf_float+0x398>
 8005efe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f02:	eba2 0903 	sub.w	r9, r2, r3
 8005f06:	9b05      	ldr	r3, [sp, #20]
 8005f08:	1ad2      	subs	r2, r2, r3
 8005f0a:	4591      	cmp	r9, r2
 8005f0c:	bfa8      	it	ge
 8005f0e:	4691      	movge	r9, r2
 8005f10:	f1b9 0f00 	cmp.w	r9, #0
 8005f14:	dc35      	bgt.n	8005f82 <_printf_float+0x3aa>
 8005f16:	f04f 0800 	mov.w	r8, #0
 8005f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f1e:	f104 0a1a 	add.w	sl, r4, #26
 8005f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	eba3 0309 	sub.w	r3, r3, r9
 8005f2c:	4543      	cmp	r3, r8
 8005f2e:	f77f af79 	ble.w	8005e24 <_printf_float+0x24c>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4652      	mov	r2, sl
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f aeaa 	beq.w	8005c96 <_printf_float+0xbe>
 8005f42:	f108 0801 	add.w	r8, r8, #1
 8005f46:	e7ec      	b.n	8005f22 <_printf_float+0x34a>
 8005f48:	4613      	mov	r3, r2
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	d1c0      	bne.n	8005ed8 <_printf_float+0x300>
 8005f56:	e69e      	b.n	8005c96 <_printf_float+0xbe>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	9205      	str	r2, [sp, #20]
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	f43f ae97 	beq.w	8005c96 <_printf_float+0xbe>
 8005f68:	9a05      	ldr	r2, [sp, #20]
 8005f6a:	f10b 0b01 	add.w	fp, fp, #1
 8005f6e:	e7b9      	b.n	8005ee4 <_printf_float+0x30c>
 8005f70:	ee18 3a10 	vmov	r3, s16
 8005f74:	4652      	mov	r2, sl
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d1be      	bne.n	8005efe <_printf_float+0x326>
 8005f80:	e689      	b.n	8005c96 <_printf_float+0xbe>
 8005f82:	9a05      	ldr	r2, [sp, #20]
 8005f84:	464b      	mov	r3, r9
 8005f86:	4442      	add	r2, r8
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b8      	blx	r7
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d1c1      	bne.n	8005f16 <_printf_float+0x33e>
 8005f92:	e680      	b.n	8005c96 <_printf_float+0xbe>
 8005f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f96:	2a01      	cmp	r2, #1
 8005f98:	dc01      	bgt.n	8005f9e <_printf_float+0x3c6>
 8005f9a:	07db      	lsls	r3, r3, #31
 8005f9c:	d53a      	bpl.n	8006014 <_printf_float+0x43c>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae74 	beq.w	8005c96 <_printf_float+0xbe>
 8005fae:	ee18 3a10 	vmov	r3, s16
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f ae6b 	beq.w	8005c96 <_printf_float+0xbe>
 8005fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005fcc:	f7fa fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd0:	b9d8      	cbnz	r0, 800600a <_printf_float+0x432>
 8005fd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005fd6:	f108 0201 	add.w	r2, r8, #1
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d10e      	bne.n	8006002 <_printf_float+0x42a>
 8005fe4:	e657      	b.n	8005c96 <_printf_float+0xbe>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f ae50 	beq.w	8005c96 <_printf_float+0xbe>
 8005ff6:	f108 0801 	add.w	r8, r8, #1
 8005ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	4543      	cmp	r3, r8
 8006000:	dcf1      	bgt.n	8005fe6 <_printf_float+0x40e>
 8006002:	464b      	mov	r3, r9
 8006004:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006008:	e6da      	b.n	8005dc0 <_printf_float+0x1e8>
 800600a:	f04f 0800 	mov.w	r8, #0
 800600e:	f104 0a1a 	add.w	sl, r4, #26
 8006012:	e7f2      	b.n	8005ffa <_printf_float+0x422>
 8006014:	2301      	movs	r3, #1
 8006016:	4642      	mov	r2, r8
 8006018:	e7df      	b.n	8005fda <_printf_float+0x402>
 800601a:	2301      	movs	r3, #1
 800601c:	464a      	mov	r2, r9
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f ae36 	beq.w	8005c96 <_printf_float+0xbe>
 800602a:	f108 0801 	add.w	r8, r8, #1
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006032:	1a5b      	subs	r3, r3, r1
 8006034:	4543      	cmp	r3, r8
 8006036:	dcf0      	bgt.n	800601a <_printf_float+0x442>
 8006038:	e6f8      	b.n	8005e2c <_printf_float+0x254>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	f104 0919 	add.w	r9, r4, #25
 8006042:	e7f4      	b.n	800602e <_printf_float+0x456>

08006044 <_printf_common>:
 8006044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006048:	4616      	mov	r6, r2
 800604a:	4699      	mov	r9, r3
 800604c:	688a      	ldr	r2, [r1, #8]
 800604e:	690b      	ldr	r3, [r1, #16]
 8006050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006054:	4293      	cmp	r3, r2
 8006056:	bfb8      	it	lt
 8006058:	4613      	movlt	r3, r2
 800605a:	6033      	str	r3, [r6, #0]
 800605c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006060:	4607      	mov	r7, r0
 8006062:	460c      	mov	r4, r1
 8006064:	b10a      	cbz	r2, 800606a <_printf_common+0x26>
 8006066:	3301      	adds	r3, #1
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	0699      	lsls	r1, r3, #26
 800606e:	bf42      	ittt	mi
 8006070:	6833      	ldrmi	r3, [r6, #0]
 8006072:	3302      	addmi	r3, #2
 8006074:	6033      	strmi	r3, [r6, #0]
 8006076:	6825      	ldr	r5, [r4, #0]
 8006078:	f015 0506 	ands.w	r5, r5, #6
 800607c:	d106      	bne.n	800608c <_printf_common+0x48>
 800607e:	f104 0a19 	add.w	sl, r4, #25
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	6832      	ldr	r2, [r6, #0]
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	42ab      	cmp	r3, r5
 800608a:	dc26      	bgt.n	80060da <_printf_common+0x96>
 800608c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006090:	1e13      	subs	r3, r2, #0
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	bf18      	it	ne
 8006096:	2301      	movne	r3, #1
 8006098:	0692      	lsls	r2, r2, #26
 800609a:	d42b      	bmi.n	80060f4 <_printf_common+0xb0>
 800609c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a0:	4649      	mov	r1, r9
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c0      	blx	r8
 80060a6:	3001      	adds	r0, #1
 80060a8:	d01e      	beq.n	80060e8 <_printf_common+0xa4>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	6922      	ldr	r2, [r4, #16]
 80060ae:	f003 0306 	and.w	r3, r3, #6
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	bf02      	ittt	eq
 80060b6:	68e5      	ldreq	r5, [r4, #12]
 80060b8:	6833      	ldreq	r3, [r6, #0]
 80060ba:	1aed      	subeq	r5, r5, r3
 80060bc:	68a3      	ldr	r3, [r4, #8]
 80060be:	bf0c      	ite	eq
 80060c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060c4:	2500      	movne	r5, #0
 80060c6:	4293      	cmp	r3, r2
 80060c8:	bfc4      	itt	gt
 80060ca:	1a9b      	subgt	r3, r3, r2
 80060cc:	18ed      	addgt	r5, r5, r3
 80060ce:	2600      	movs	r6, #0
 80060d0:	341a      	adds	r4, #26
 80060d2:	42b5      	cmp	r5, r6
 80060d4:	d11a      	bne.n	800610c <_printf_common+0xc8>
 80060d6:	2000      	movs	r0, #0
 80060d8:	e008      	b.n	80060ec <_printf_common+0xa8>
 80060da:	2301      	movs	r3, #1
 80060dc:	4652      	mov	r2, sl
 80060de:	4649      	mov	r1, r9
 80060e0:	4638      	mov	r0, r7
 80060e2:	47c0      	blx	r8
 80060e4:	3001      	adds	r0, #1
 80060e6:	d103      	bne.n	80060f0 <_printf_common+0xac>
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f0:	3501      	adds	r5, #1
 80060f2:	e7c6      	b.n	8006082 <_printf_common+0x3e>
 80060f4:	18e1      	adds	r1, r4, r3
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	2030      	movs	r0, #48	; 0x30
 80060fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060fe:	4422      	add	r2, r4
 8006100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006108:	3302      	adds	r3, #2
 800610a:	e7c7      	b.n	800609c <_printf_common+0x58>
 800610c:	2301      	movs	r3, #1
 800610e:	4622      	mov	r2, r4
 8006110:	4649      	mov	r1, r9
 8006112:	4638      	mov	r0, r7
 8006114:	47c0      	blx	r8
 8006116:	3001      	adds	r0, #1
 8006118:	d0e6      	beq.n	80060e8 <_printf_common+0xa4>
 800611a:	3601      	adds	r6, #1
 800611c:	e7d9      	b.n	80060d2 <_printf_common+0x8e>
	...

08006120 <_printf_i>:
 8006120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	7e0f      	ldrb	r7, [r1, #24]
 8006126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006128:	2f78      	cmp	r7, #120	; 0x78
 800612a:	4691      	mov	r9, r2
 800612c:	4680      	mov	r8, r0
 800612e:	460c      	mov	r4, r1
 8006130:	469a      	mov	sl, r3
 8006132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006136:	d807      	bhi.n	8006148 <_printf_i+0x28>
 8006138:	2f62      	cmp	r7, #98	; 0x62
 800613a:	d80a      	bhi.n	8006152 <_printf_i+0x32>
 800613c:	2f00      	cmp	r7, #0
 800613e:	f000 80d4 	beq.w	80062ea <_printf_i+0x1ca>
 8006142:	2f58      	cmp	r7, #88	; 0x58
 8006144:	f000 80c0 	beq.w	80062c8 <_printf_i+0x1a8>
 8006148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800614c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006150:	e03a      	b.n	80061c8 <_printf_i+0xa8>
 8006152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006156:	2b15      	cmp	r3, #21
 8006158:	d8f6      	bhi.n	8006148 <_printf_i+0x28>
 800615a:	a101      	add	r1, pc, #4	; (adr r1, 8006160 <_printf_i+0x40>)
 800615c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006160:	080061b9 	.word	0x080061b9
 8006164:	080061cd 	.word	0x080061cd
 8006168:	08006149 	.word	0x08006149
 800616c:	08006149 	.word	0x08006149
 8006170:	08006149 	.word	0x08006149
 8006174:	08006149 	.word	0x08006149
 8006178:	080061cd 	.word	0x080061cd
 800617c:	08006149 	.word	0x08006149
 8006180:	08006149 	.word	0x08006149
 8006184:	08006149 	.word	0x08006149
 8006188:	08006149 	.word	0x08006149
 800618c:	080062d1 	.word	0x080062d1
 8006190:	080061f9 	.word	0x080061f9
 8006194:	0800628b 	.word	0x0800628b
 8006198:	08006149 	.word	0x08006149
 800619c:	08006149 	.word	0x08006149
 80061a0:	080062f3 	.word	0x080062f3
 80061a4:	08006149 	.word	0x08006149
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	08006149 	.word	0x08006149
 80061b0:	08006149 	.word	0x08006149
 80061b4:	08006293 	.word	0x08006293
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	1d1a      	adds	r2, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	602a      	str	r2, [r5, #0]
 80061c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061c8:	2301      	movs	r3, #1
 80061ca:	e09f      	b.n	800630c <_printf_i+0x1ec>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	0607      	lsls	r7, r0, #24
 80061d2:	f103 0104 	add.w	r1, r3, #4
 80061d6:	6029      	str	r1, [r5, #0]
 80061d8:	d501      	bpl.n	80061de <_printf_i+0xbe>
 80061da:	681e      	ldr	r6, [r3, #0]
 80061dc:	e003      	b.n	80061e6 <_printf_i+0xc6>
 80061de:	0646      	lsls	r6, r0, #25
 80061e0:	d5fb      	bpl.n	80061da <_printf_i+0xba>
 80061e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061e6:	2e00      	cmp	r6, #0
 80061e8:	da03      	bge.n	80061f2 <_printf_i+0xd2>
 80061ea:	232d      	movs	r3, #45	; 0x2d
 80061ec:	4276      	negs	r6, r6
 80061ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f2:	485a      	ldr	r0, [pc, #360]	; (800635c <_printf_i+0x23c>)
 80061f4:	230a      	movs	r3, #10
 80061f6:	e012      	b.n	800621e <_printf_i+0xfe>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	1d19      	adds	r1, r3, #4
 80061fe:	6029      	str	r1, [r5, #0]
 8006200:	0605      	lsls	r5, r0, #24
 8006202:	d501      	bpl.n	8006208 <_printf_i+0xe8>
 8006204:	681e      	ldr	r6, [r3, #0]
 8006206:	e002      	b.n	800620e <_printf_i+0xee>
 8006208:	0641      	lsls	r1, r0, #25
 800620a:	d5fb      	bpl.n	8006204 <_printf_i+0xe4>
 800620c:	881e      	ldrh	r6, [r3, #0]
 800620e:	4853      	ldr	r0, [pc, #332]	; (800635c <_printf_i+0x23c>)
 8006210:	2f6f      	cmp	r7, #111	; 0x6f
 8006212:	bf0c      	ite	eq
 8006214:	2308      	moveq	r3, #8
 8006216:	230a      	movne	r3, #10
 8006218:	2100      	movs	r1, #0
 800621a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800621e:	6865      	ldr	r5, [r4, #4]
 8006220:	60a5      	str	r5, [r4, #8]
 8006222:	2d00      	cmp	r5, #0
 8006224:	bfa2      	ittt	ge
 8006226:	6821      	ldrge	r1, [r4, #0]
 8006228:	f021 0104 	bicge.w	r1, r1, #4
 800622c:	6021      	strge	r1, [r4, #0]
 800622e:	b90e      	cbnz	r6, 8006234 <_printf_i+0x114>
 8006230:	2d00      	cmp	r5, #0
 8006232:	d04b      	beq.n	80062cc <_printf_i+0x1ac>
 8006234:	4615      	mov	r5, r2
 8006236:	fbb6 f1f3 	udiv	r1, r6, r3
 800623a:	fb03 6711 	mls	r7, r3, r1, r6
 800623e:	5dc7      	ldrb	r7, [r0, r7]
 8006240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006244:	4637      	mov	r7, r6
 8006246:	42bb      	cmp	r3, r7
 8006248:	460e      	mov	r6, r1
 800624a:	d9f4      	bls.n	8006236 <_printf_i+0x116>
 800624c:	2b08      	cmp	r3, #8
 800624e:	d10b      	bne.n	8006268 <_printf_i+0x148>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	07de      	lsls	r6, r3, #31
 8006254:	d508      	bpl.n	8006268 <_printf_i+0x148>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	6861      	ldr	r1, [r4, #4]
 800625a:	4299      	cmp	r1, r3
 800625c:	bfde      	ittt	le
 800625e:	2330      	movle	r3, #48	; 0x30
 8006260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006268:	1b52      	subs	r2, r2, r5
 800626a:	6122      	str	r2, [r4, #16]
 800626c:	f8cd a000 	str.w	sl, [sp]
 8006270:	464b      	mov	r3, r9
 8006272:	aa03      	add	r2, sp, #12
 8006274:	4621      	mov	r1, r4
 8006276:	4640      	mov	r0, r8
 8006278:	f7ff fee4 	bl	8006044 <_printf_common>
 800627c:	3001      	adds	r0, #1
 800627e:	d14a      	bne.n	8006316 <_printf_i+0x1f6>
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	b004      	add	sp, #16
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	f043 0320 	orr.w	r3, r3, #32
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	4833      	ldr	r0, [pc, #204]	; (8006360 <_printf_i+0x240>)
 8006294:	2778      	movs	r7, #120	; 0x78
 8006296:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	6829      	ldr	r1, [r5, #0]
 800629e:	061f      	lsls	r7, r3, #24
 80062a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80062a4:	d402      	bmi.n	80062ac <_printf_i+0x18c>
 80062a6:	065f      	lsls	r7, r3, #25
 80062a8:	bf48      	it	mi
 80062aa:	b2b6      	uxthmi	r6, r6
 80062ac:	07df      	lsls	r7, r3, #31
 80062ae:	bf48      	it	mi
 80062b0:	f043 0320 	orrmi.w	r3, r3, #32
 80062b4:	6029      	str	r1, [r5, #0]
 80062b6:	bf48      	it	mi
 80062b8:	6023      	strmi	r3, [r4, #0]
 80062ba:	b91e      	cbnz	r6, 80062c4 <_printf_i+0x1a4>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	f023 0320 	bic.w	r3, r3, #32
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	2310      	movs	r3, #16
 80062c6:	e7a7      	b.n	8006218 <_printf_i+0xf8>
 80062c8:	4824      	ldr	r0, [pc, #144]	; (800635c <_printf_i+0x23c>)
 80062ca:	e7e4      	b.n	8006296 <_printf_i+0x176>
 80062cc:	4615      	mov	r5, r2
 80062ce:	e7bd      	b.n	800624c <_printf_i+0x12c>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	6826      	ldr	r6, [r4, #0]
 80062d4:	6961      	ldr	r1, [r4, #20]
 80062d6:	1d18      	adds	r0, r3, #4
 80062d8:	6028      	str	r0, [r5, #0]
 80062da:	0635      	lsls	r5, r6, #24
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	d501      	bpl.n	80062e4 <_printf_i+0x1c4>
 80062e0:	6019      	str	r1, [r3, #0]
 80062e2:	e002      	b.n	80062ea <_printf_i+0x1ca>
 80062e4:	0670      	lsls	r0, r6, #25
 80062e6:	d5fb      	bpl.n	80062e0 <_printf_i+0x1c0>
 80062e8:	8019      	strh	r1, [r3, #0]
 80062ea:	2300      	movs	r3, #0
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	4615      	mov	r5, r2
 80062f0:	e7bc      	b.n	800626c <_printf_i+0x14c>
 80062f2:	682b      	ldr	r3, [r5, #0]
 80062f4:	1d1a      	adds	r2, r3, #4
 80062f6:	602a      	str	r2, [r5, #0]
 80062f8:	681d      	ldr	r5, [r3, #0]
 80062fa:	6862      	ldr	r2, [r4, #4]
 80062fc:	2100      	movs	r1, #0
 80062fe:	4628      	mov	r0, r5
 8006300:	f7f9 ff66 	bl	80001d0 <memchr>
 8006304:	b108      	cbz	r0, 800630a <_printf_i+0x1ea>
 8006306:	1b40      	subs	r0, r0, r5
 8006308:	6060      	str	r0, [r4, #4]
 800630a:	6863      	ldr	r3, [r4, #4]
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	2300      	movs	r3, #0
 8006310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006314:	e7aa      	b.n	800626c <_printf_i+0x14c>
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	462a      	mov	r2, r5
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	47d0      	blx	sl
 8006320:	3001      	adds	r0, #1
 8006322:	d0ad      	beq.n	8006280 <_printf_i+0x160>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	079b      	lsls	r3, r3, #30
 8006328:	d413      	bmi.n	8006352 <_printf_i+0x232>
 800632a:	68e0      	ldr	r0, [r4, #12]
 800632c:	9b03      	ldr	r3, [sp, #12]
 800632e:	4298      	cmp	r0, r3
 8006330:	bfb8      	it	lt
 8006332:	4618      	movlt	r0, r3
 8006334:	e7a6      	b.n	8006284 <_printf_i+0x164>
 8006336:	2301      	movs	r3, #1
 8006338:	4632      	mov	r2, r6
 800633a:	4649      	mov	r1, r9
 800633c:	4640      	mov	r0, r8
 800633e:	47d0      	blx	sl
 8006340:	3001      	adds	r0, #1
 8006342:	d09d      	beq.n	8006280 <_printf_i+0x160>
 8006344:	3501      	adds	r5, #1
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	9903      	ldr	r1, [sp, #12]
 800634a:	1a5b      	subs	r3, r3, r1
 800634c:	42ab      	cmp	r3, r5
 800634e:	dcf2      	bgt.n	8006336 <_printf_i+0x216>
 8006350:	e7eb      	b.n	800632a <_printf_i+0x20a>
 8006352:	2500      	movs	r5, #0
 8006354:	f104 0619 	add.w	r6, r4, #25
 8006358:	e7f5      	b.n	8006346 <_printf_i+0x226>
 800635a:	bf00      	nop
 800635c:	0800a295 	.word	0x0800a295
 8006360:	0800a2a6 	.word	0x0800a2a6

08006364 <_scanf_float>:
 8006364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	b087      	sub	sp, #28
 800636a:	4617      	mov	r7, r2
 800636c:	9303      	str	r3, [sp, #12]
 800636e:	688b      	ldr	r3, [r1, #8]
 8006370:	1e5a      	subs	r2, r3, #1
 8006372:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006376:	bf83      	ittte	hi
 8006378:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800637c:	195b      	addhi	r3, r3, r5
 800637e:	9302      	strhi	r3, [sp, #8]
 8006380:	2300      	movls	r3, #0
 8006382:	bf86      	itte	hi
 8006384:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006388:	608b      	strhi	r3, [r1, #8]
 800638a:	9302      	strls	r3, [sp, #8]
 800638c:	680b      	ldr	r3, [r1, #0]
 800638e:	468b      	mov	fp, r1
 8006390:	2500      	movs	r5, #0
 8006392:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006396:	f84b 3b1c 	str.w	r3, [fp], #28
 800639a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800639e:	4680      	mov	r8, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	465e      	mov	r6, fp
 80063a4:	46aa      	mov	sl, r5
 80063a6:	46a9      	mov	r9, r5
 80063a8:	9501      	str	r5, [sp, #4]
 80063aa:	68a2      	ldr	r2, [r4, #8]
 80063ac:	b152      	cbz	r2, 80063c4 <_scanf_float+0x60>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b4e      	cmp	r3, #78	; 0x4e
 80063b4:	d864      	bhi.n	8006480 <_scanf_float+0x11c>
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d83c      	bhi.n	8006434 <_scanf_float+0xd0>
 80063ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80063be:	b2c8      	uxtb	r0, r1
 80063c0:	280e      	cmp	r0, #14
 80063c2:	d93a      	bls.n	800643a <_scanf_float+0xd6>
 80063c4:	f1b9 0f00 	cmp.w	r9, #0
 80063c8:	d003      	beq.n	80063d2 <_scanf_float+0x6e>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063d6:	f1ba 0f01 	cmp.w	sl, #1
 80063da:	f200 8113 	bhi.w	8006604 <_scanf_float+0x2a0>
 80063de:	455e      	cmp	r6, fp
 80063e0:	f200 8105 	bhi.w	80065ee <_scanf_float+0x28a>
 80063e4:	2501      	movs	r5, #1
 80063e6:	4628      	mov	r0, r5
 80063e8:	b007      	add	sp, #28
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80063f2:	2a0d      	cmp	r2, #13
 80063f4:	d8e6      	bhi.n	80063c4 <_scanf_float+0x60>
 80063f6:	a101      	add	r1, pc, #4	; (adr r1, 80063fc <_scanf_float+0x98>)
 80063f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063fc:	0800653b 	.word	0x0800653b
 8006400:	080063c5 	.word	0x080063c5
 8006404:	080063c5 	.word	0x080063c5
 8006408:	080063c5 	.word	0x080063c5
 800640c:	0800659b 	.word	0x0800659b
 8006410:	08006573 	.word	0x08006573
 8006414:	080063c5 	.word	0x080063c5
 8006418:	080063c5 	.word	0x080063c5
 800641c:	08006549 	.word	0x08006549
 8006420:	080063c5 	.word	0x080063c5
 8006424:	080063c5 	.word	0x080063c5
 8006428:	080063c5 	.word	0x080063c5
 800642c:	080063c5 	.word	0x080063c5
 8006430:	08006501 	.word	0x08006501
 8006434:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006438:	e7db      	b.n	80063f2 <_scanf_float+0x8e>
 800643a:	290e      	cmp	r1, #14
 800643c:	d8c2      	bhi.n	80063c4 <_scanf_float+0x60>
 800643e:	a001      	add	r0, pc, #4	; (adr r0, 8006444 <_scanf_float+0xe0>)
 8006440:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006444:	080064f3 	.word	0x080064f3
 8006448:	080063c5 	.word	0x080063c5
 800644c:	080064f3 	.word	0x080064f3
 8006450:	08006587 	.word	0x08006587
 8006454:	080063c5 	.word	0x080063c5
 8006458:	080064a1 	.word	0x080064a1
 800645c:	080064dd 	.word	0x080064dd
 8006460:	080064dd 	.word	0x080064dd
 8006464:	080064dd 	.word	0x080064dd
 8006468:	080064dd 	.word	0x080064dd
 800646c:	080064dd 	.word	0x080064dd
 8006470:	080064dd 	.word	0x080064dd
 8006474:	080064dd 	.word	0x080064dd
 8006478:	080064dd 	.word	0x080064dd
 800647c:	080064dd 	.word	0x080064dd
 8006480:	2b6e      	cmp	r3, #110	; 0x6e
 8006482:	d809      	bhi.n	8006498 <_scanf_float+0x134>
 8006484:	2b60      	cmp	r3, #96	; 0x60
 8006486:	d8b2      	bhi.n	80063ee <_scanf_float+0x8a>
 8006488:	2b54      	cmp	r3, #84	; 0x54
 800648a:	d077      	beq.n	800657c <_scanf_float+0x218>
 800648c:	2b59      	cmp	r3, #89	; 0x59
 800648e:	d199      	bne.n	80063c4 <_scanf_float+0x60>
 8006490:	2d07      	cmp	r5, #7
 8006492:	d197      	bne.n	80063c4 <_scanf_float+0x60>
 8006494:	2508      	movs	r5, #8
 8006496:	e029      	b.n	80064ec <_scanf_float+0x188>
 8006498:	2b74      	cmp	r3, #116	; 0x74
 800649a:	d06f      	beq.n	800657c <_scanf_float+0x218>
 800649c:	2b79      	cmp	r3, #121	; 0x79
 800649e:	e7f6      	b.n	800648e <_scanf_float+0x12a>
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	05c8      	lsls	r0, r1, #23
 80064a4:	d51a      	bpl.n	80064dc <_scanf_float+0x178>
 80064a6:	9b02      	ldr	r3, [sp, #8]
 80064a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064ac:	6021      	str	r1, [r4, #0]
 80064ae:	f109 0901 	add.w	r9, r9, #1
 80064b2:	b11b      	cbz	r3, 80064bc <_scanf_float+0x158>
 80064b4:	3b01      	subs	r3, #1
 80064b6:	3201      	adds	r2, #1
 80064b8:	9302      	str	r3, [sp, #8]
 80064ba:	60a2      	str	r2, [r4, #8]
 80064bc:	68a3      	ldr	r3, [r4, #8]
 80064be:	3b01      	subs	r3, #1
 80064c0:	60a3      	str	r3, [r4, #8]
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	3301      	adds	r3, #1
 80064c6:	6123      	str	r3, [r4, #16]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	f340 8084 	ble.w	80065dc <_scanf_float+0x278>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	3301      	adds	r3, #1
 80064d8:	603b      	str	r3, [r7, #0]
 80064da:	e766      	b.n	80063aa <_scanf_float+0x46>
 80064dc:	eb1a 0f05 	cmn.w	sl, r5
 80064e0:	f47f af70 	bne.w	80063c4 <_scanf_float+0x60>
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	f806 3b01 	strb.w	r3, [r6], #1
 80064f0:	e7e4      	b.n	80064bc <_scanf_float+0x158>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	0610      	lsls	r0, r2, #24
 80064f6:	f57f af65 	bpl.w	80063c4 <_scanf_float+0x60>
 80064fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064fe:	e7f4      	b.n	80064ea <_scanf_float+0x186>
 8006500:	f1ba 0f00 	cmp.w	sl, #0
 8006504:	d10e      	bne.n	8006524 <_scanf_float+0x1c0>
 8006506:	f1b9 0f00 	cmp.w	r9, #0
 800650a:	d10e      	bne.n	800652a <_scanf_float+0x1c6>
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006512:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006516:	d108      	bne.n	800652a <_scanf_float+0x1c6>
 8006518:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	f04f 0a01 	mov.w	sl, #1
 8006522:	e7e3      	b.n	80064ec <_scanf_float+0x188>
 8006524:	f1ba 0f02 	cmp.w	sl, #2
 8006528:	d055      	beq.n	80065d6 <_scanf_float+0x272>
 800652a:	2d01      	cmp	r5, #1
 800652c:	d002      	beq.n	8006534 <_scanf_float+0x1d0>
 800652e:	2d04      	cmp	r5, #4
 8006530:	f47f af48 	bne.w	80063c4 <_scanf_float+0x60>
 8006534:	3501      	adds	r5, #1
 8006536:	b2ed      	uxtb	r5, r5
 8006538:	e7d8      	b.n	80064ec <_scanf_float+0x188>
 800653a:	f1ba 0f01 	cmp.w	sl, #1
 800653e:	f47f af41 	bne.w	80063c4 <_scanf_float+0x60>
 8006542:	f04f 0a02 	mov.w	sl, #2
 8006546:	e7d1      	b.n	80064ec <_scanf_float+0x188>
 8006548:	b97d      	cbnz	r5, 800656a <_scanf_float+0x206>
 800654a:	f1b9 0f00 	cmp.w	r9, #0
 800654e:	f47f af3c 	bne.w	80063ca <_scanf_float+0x66>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006558:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800655c:	f47f af39 	bne.w	80063d2 <_scanf_float+0x6e>
 8006560:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006564:	6022      	str	r2, [r4, #0]
 8006566:	2501      	movs	r5, #1
 8006568:	e7c0      	b.n	80064ec <_scanf_float+0x188>
 800656a:	2d03      	cmp	r5, #3
 800656c:	d0e2      	beq.n	8006534 <_scanf_float+0x1d0>
 800656e:	2d05      	cmp	r5, #5
 8006570:	e7de      	b.n	8006530 <_scanf_float+0x1cc>
 8006572:	2d02      	cmp	r5, #2
 8006574:	f47f af26 	bne.w	80063c4 <_scanf_float+0x60>
 8006578:	2503      	movs	r5, #3
 800657a:	e7b7      	b.n	80064ec <_scanf_float+0x188>
 800657c:	2d06      	cmp	r5, #6
 800657e:	f47f af21 	bne.w	80063c4 <_scanf_float+0x60>
 8006582:	2507      	movs	r5, #7
 8006584:	e7b2      	b.n	80064ec <_scanf_float+0x188>
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	0591      	lsls	r1, r2, #22
 800658a:	f57f af1b 	bpl.w	80063c4 <_scanf_float+0x60>
 800658e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006592:	6022      	str	r2, [r4, #0]
 8006594:	f8cd 9004 	str.w	r9, [sp, #4]
 8006598:	e7a8      	b.n	80064ec <_scanf_float+0x188>
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80065a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80065a4:	d006      	beq.n	80065b4 <_scanf_float+0x250>
 80065a6:	0550      	lsls	r0, r2, #21
 80065a8:	f57f af0c 	bpl.w	80063c4 <_scanf_float+0x60>
 80065ac:	f1b9 0f00 	cmp.w	r9, #0
 80065b0:	f43f af0f 	beq.w	80063d2 <_scanf_float+0x6e>
 80065b4:	0591      	lsls	r1, r2, #22
 80065b6:	bf58      	it	pl
 80065b8:	9901      	ldrpl	r1, [sp, #4]
 80065ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065be:	bf58      	it	pl
 80065c0:	eba9 0101 	subpl.w	r1, r9, r1
 80065c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80065c8:	bf58      	it	pl
 80065ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065ce:	6022      	str	r2, [r4, #0]
 80065d0:	f04f 0900 	mov.w	r9, #0
 80065d4:	e78a      	b.n	80064ec <_scanf_float+0x188>
 80065d6:	f04f 0a03 	mov.w	sl, #3
 80065da:	e787      	b.n	80064ec <_scanf_float+0x188>
 80065dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065e0:	4639      	mov	r1, r7
 80065e2:	4640      	mov	r0, r8
 80065e4:	4798      	blx	r3
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f43f aedf 	beq.w	80063aa <_scanf_float+0x46>
 80065ec:	e6ea      	b.n	80063c4 <_scanf_float+0x60>
 80065ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065f6:	463a      	mov	r2, r7
 80065f8:	4640      	mov	r0, r8
 80065fa:	4798      	blx	r3
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	3b01      	subs	r3, #1
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	e6ec      	b.n	80063de <_scanf_float+0x7a>
 8006604:	1e6b      	subs	r3, r5, #1
 8006606:	2b06      	cmp	r3, #6
 8006608:	d825      	bhi.n	8006656 <_scanf_float+0x2f2>
 800660a:	2d02      	cmp	r5, #2
 800660c:	d836      	bhi.n	800667c <_scanf_float+0x318>
 800660e:	455e      	cmp	r6, fp
 8006610:	f67f aee8 	bls.w	80063e4 <_scanf_float+0x80>
 8006614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006618:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800661c:	463a      	mov	r2, r7
 800661e:	4640      	mov	r0, r8
 8006620:	4798      	blx	r3
 8006622:	6923      	ldr	r3, [r4, #16]
 8006624:	3b01      	subs	r3, #1
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	e7f1      	b.n	800660e <_scanf_float+0x2aa>
 800662a:	9802      	ldr	r0, [sp, #8]
 800662c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006630:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006634:	9002      	str	r0, [sp, #8]
 8006636:	463a      	mov	r2, r7
 8006638:	4640      	mov	r0, r8
 800663a:	4798      	blx	r3
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	3b01      	subs	r3, #1
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006646:	fa5f fa8a 	uxtb.w	sl, sl
 800664a:	f1ba 0f02 	cmp.w	sl, #2
 800664e:	d1ec      	bne.n	800662a <_scanf_float+0x2c6>
 8006650:	3d03      	subs	r5, #3
 8006652:	b2ed      	uxtb	r5, r5
 8006654:	1b76      	subs	r6, r6, r5
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	05da      	lsls	r2, r3, #23
 800665a:	d52f      	bpl.n	80066bc <_scanf_float+0x358>
 800665c:	055b      	lsls	r3, r3, #21
 800665e:	d510      	bpl.n	8006682 <_scanf_float+0x31e>
 8006660:	455e      	cmp	r6, fp
 8006662:	f67f aebf 	bls.w	80063e4 <_scanf_float+0x80>
 8006666:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800666a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800666e:	463a      	mov	r2, r7
 8006670:	4640      	mov	r0, r8
 8006672:	4798      	blx	r3
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	3b01      	subs	r3, #1
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	e7f1      	b.n	8006660 <_scanf_float+0x2fc>
 800667c:	46aa      	mov	sl, r5
 800667e:	9602      	str	r6, [sp, #8]
 8006680:	e7df      	b.n	8006642 <_scanf_float+0x2de>
 8006682:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	2965      	cmp	r1, #101	; 0x65
 800668a:	f103 33ff 	add.w	r3, r3, #4294967295
 800668e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	d00c      	beq.n	80066b0 <_scanf_float+0x34c>
 8006696:	2945      	cmp	r1, #69	; 0x45
 8006698:	d00a      	beq.n	80066b0 <_scanf_float+0x34c>
 800669a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800669e:	463a      	mov	r2, r7
 80066a0:	4640      	mov	r0, r8
 80066a2:	4798      	blx	r3
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	1eb5      	subs	r5, r6, #2
 80066ae:	6123      	str	r3, [r4, #16]
 80066b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066b4:	463a      	mov	r2, r7
 80066b6:	4640      	mov	r0, r8
 80066b8:	4798      	blx	r3
 80066ba:	462e      	mov	r6, r5
 80066bc:	6825      	ldr	r5, [r4, #0]
 80066be:	f015 0510 	ands.w	r5, r5, #16
 80066c2:	d158      	bne.n	8006776 <_scanf_float+0x412>
 80066c4:	7035      	strb	r5, [r6, #0]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d0:	d11c      	bne.n	800670c <_scanf_float+0x3a8>
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	454b      	cmp	r3, r9
 80066d6:	eba3 0209 	sub.w	r2, r3, r9
 80066da:	d124      	bne.n	8006726 <_scanf_float+0x3c2>
 80066dc:	2200      	movs	r2, #0
 80066de:	4659      	mov	r1, fp
 80066e0:	4640      	mov	r0, r8
 80066e2:	f002 fc3d 	bl	8008f60 <_strtod_r>
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f011 0f02 	tst.w	r1, #2
 80066f0:	ec57 6b10 	vmov	r6, r7, d0
 80066f4:	f103 0204 	add.w	r2, r3, #4
 80066f8:	d020      	beq.n	800673c <_scanf_float+0x3d8>
 80066fa:	9903      	ldr	r1, [sp, #12]
 80066fc:	600a      	str	r2, [r1, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	e9c3 6700 	strd	r6, r7, [r3]
 8006704:	68e3      	ldr	r3, [r4, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60e3      	str	r3, [r4, #12]
 800670a:	e66c      	b.n	80063e6 <_scanf_float+0x82>
 800670c:	9b04      	ldr	r3, [sp, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0e4      	beq.n	80066dc <_scanf_float+0x378>
 8006712:	9905      	ldr	r1, [sp, #20]
 8006714:	230a      	movs	r3, #10
 8006716:	462a      	mov	r2, r5
 8006718:	3101      	adds	r1, #1
 800671a:	4640      	mov	r0, r8
 800671c:	f002 fca8 	bl	8009070 <_strtol_r>
 8006720:	9b04      	ldr	r3, [sp, #16]
 8006722:	9e05      	ldr	r6, [sp, #20]
 8006724:	1ac2      	subs	r2, r0, r3
 8006726:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800672a:	429e      	cmp	r6, r3
 800672c:	bf28      	it	cs
 800672e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006732:	4912      	ldr	r1, [pc, #72]	; (800677c <_scanf_float+0x418>)
 8006734:	4630      	mov	r0, r6
 8006736:	f000 f8e7 	bl	8006908 <siprintf>
 800673a:	e7cf      	b.n	80066dc <_scanf_float+0x378>
 800673c:	f011 0f04 	tst.w	r1, #4
 8006740:	9903      	ldr	r1, [sp, #12]
 8006742:	600a      	str	r2, [r1, #0]
 8006744:	d1db      	bne.n	80066fe <_scanf_float+0x39a>
 8006746:	f8d3 8000 	ldr.w	r8, [r3]
 800674a:	ee10 2a10 	vmov	r2, s0
 800674e:	ee10 0a10 	vmov	r0, s0
 8006752:	463b      	mov	r3, r7
 8006754:	4639      	mov	r1, r7
 8006756:	f7fa f9e9 	bl	8000b2c <__aeabi_dcmpun>
 800675a:	b128      	cbz	r0, 8006768 <_scanf_float+0x404>
 800675c:	4808      	ldr	r0, [pc, #32]	; (8006780 <_scanf_float+0x41c>)
 800675e:	f000 f9c5 	bl	8006aec <nanf>
 8006762:	ed88 0a00 	vstr	s0, [r8]
 8006766:	e7cd      	b.n	8006704 <_scanf_float+0x3a0>
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7fa fa3c 	bl	8000be8 <__aeabi_d2f>
 8006770:	f8c8 0000 	str.w	r0, [r8]
 8006774:	e7c6      	b.n	8006704 <_scanf_float+0x3a0>
 8006776:	2500      	movs	r5, #0
 8006778:	e635      	b.n	80063e6 <_scanf_float+0x82>
 800677a:	bf00      	nop
 800677c:	0800a2b7 	.word	0x0800a2b7
 8006780:	0800a64d 	.word	0x0800a64d

08006784 <std>:
 8006784:	2300      	movs	r3, #0
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	e9c0 3300 	strd	r3, r3, [r0]
 800678e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006792:	6083      	str	r3, [r0, #8]
 8006794:	8181      	strh	r1, [r0, #12]
 8006796:	6643      	str	r3, [r0, #100]	; 0x64
 8006798:	81c2      	strh	r2, [r0, #14]
 800679a:	6183      	str	r3, [r0, #24]
 800679c:	4619      	mov	r1, r3
 800679e:	2208      	movs	r2, #8
 80067a0:	305c      	adds	r0, #92	; 0x5c
 80067a2:	f000 f914 	bl	80069ce <memset>
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <std+0x58>)
 80067a8:	6263      	str	r3, [r4, #36]	; 0x24
 80067aa:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <std+0x5c>)
 80067ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <std+0x60>)
 80067b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <std+0x64>)
 80067b4:	6323      	str	r3, [r4, #48]	; 0x30
 80067b6:	4b0d      	ldr	r3, [pc, #52]	; (80067ec <std+0x68>)
 80067b8:	6224      	str	r4, [r4, #32]
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d006      	beq.n	80067cc <std+0x48>
 80067be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80067c2:	4294      	cmp	r4, r2
 80067c4:	d002      	beq.n	80067cc <std+0x48>
 80067c6:	33d0      	adds	r3, #208	; 0xd0
 80067c8:	429c      	cmp	r4, r3
 80067ca:	d105      	bne.n	80067d8 <std+0x54>
 80067cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d4:	f000 b978 	b.w	8006ac8 <__retarget_lock_init_recursive>
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	08006949 	.word	0x08006949
 80067e0:	0800696b 	.word	0x0800696b
 80067e4:	080069a3 	.word	0x080069a3
 80067e8:	080069c7 	.word	0x080069c7
 80067ec:	200002bc 	.word	0x200002bc

080067f0 <stdio_exit_handler>:
 80067f0:	4a02      	ldr	r2, [pc, #8]	; (80067fc <stdio_exit_handler+0xc>)
 80067f2:	4903      	ldr	r1, [pc, #12]	; (8006800 <stdio_exit_handler+0x10>)
 80067f4:	4803      	ldr	r0, [pc, #12]	; (8006804 <stdio_exit_handler+0x14>)
 80067f6:	f000 b869 	b.w	80068cc <_fwalk_sglue>
 80067fa:	bf00      	nop
 80067fc:	20000020 	.word	0x20000020
 8006800:	08009431 	.word	0x08009431
 8006804:	2000002c 	.word	0x2000002c

08006808 <cleanup_stdio>:
 8006808:	6841      	ldr	r1, [r0, #4]
 800680a:	4b0c      	ldr	r3, [pc, #48]	; (800683c <cleanup_stdio+0x34>)
 800680c:	4299      	cmp	r1, r3
 800680e:	b510      	push	{r4, lr}
 8006810:	4604      	mov	r4, r0
 8006812:	d001      	beq.n	8006818 <cleanup_stdio+0x10>
 8006814:	f002 fe0c 	bl	8009430 <_fflush_r>
 8006818:	68a1      	ldr	r1, [r4, #8]
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <cleanup_stdio+0x38>)
 800681c:	4299      	cmp	r1, r3
 800681e:	d002      	beq.n	8006826 <cleanup_stdio+0x1e>
 8006820:	4620      	mov	r0, r4
 8006822:	f002 fe05 	bl	8009430 <_fflush_r>
 8006826:	68e1      	ldr	r1, [r4, #12]
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <cleanup_stdio+0x3c>)
 800682a:	4299      	cmp	r1, r3
 800682c:	d004      	beq.n	8006838 <cleanup_stdio+0x30>
 800682e:	4620      	mov	r0, r4
 8006830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006834:	f002 bdfc 	b.w	8009430 <_fflush_r>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	200002bc 	.word	0x200002bc
 8006840:	20000324 	.word	0x20000324
 8006844:	2000038c 	.word	0x2000038c

08006848 <global_stdio_init.part.0>:
 8006848:	b510      	push	{r4, lr}
 800684a:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <global_stdio_init.part.0+0x30>)
 800684c:	4c0b      	ldr	r4, [pc, #44]	; (800687c <global_stdio_init.part.0+0x34>)
 800684e:	4a0c      	ldr	r2, [pc, #48]	; (8006880 <global_stdio_init.part.0+0x38>)
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	4620      	mov	r0, r4
 8006854:	2200      	movs	r2, #0
 8006856:	2104      	movs	r1, #4
 8006858:	f7ff ff94 	bl	8006784 <std>
 800685c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006860:	2201      	movs	r2, #1
 8006862:	2109      	movs	r1, #9
 8006864:	f7ff ff8e 	bl	8006784 <std>
 8006868:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800686c:	2202      	movs	r2, #2
 800686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006872:	2112      	movs	r1, #18
 8006874:	f7ff bf86 	b.w	8006784 <std>
 8006878:	200003f4 	.word	0x200003f4
 800687c:	200002bc 	.word	0x200002bc
 8006880:	080067f1 	.word	0x080067f1

08006884 <__sfp_lock_acquire>:
 8006884:	4801      	ldr	r0, [pc, #4]	; (800688c <__sfp_lock_acquire+0x8>)
 8006886:	f000 b920 	b.w	8006aca <__retarget_lock_acquire_recursive>
 800688a:	bf00      	nop
 800688c:	200003fd 	.word	0x200003fd

08006890 <__sfp_lock_release>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__sfp_lock_release+0x8>)
 8006892:	f000 b91b 	b.w	8006acc <__retarget_lock_release_recursive>
 8006896:	bf00      	nop
 8006898:	200003fd 	.word	0x200003fd

0800689c <__sinit>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4604      	mov	r4, r0
 80068a0:	f7ff fff0 	bl	8006884 <__sfp_lock_acquire>
 80068a4:	6a23      	ldr	r3, [r4, #32]
 80068a6:	b11b      	cbz	r3, 80068b0 <__sinit+0x14>
 80068a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ac:	f7ff bff0 	b.w	8006890 <__sfp_lock_release>
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <__sinit+0x28>)
 80068b2:	6223      	str	r3, [r4, #32]
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <__sinit+0x2c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f5      	bne.n	80068a8 <__sinit+0xc>
 80068bc:	f7ff ffc4 	bl	8006848 <global_stdio_init.part.0>
 80068c0:	e7f2      	b.n	80068a8 <__sinit+0xc>
 80068c2:	bf00      	nop
 80068c4:	08006809 	.word	0x08006809
 80068c8:	200003f4 	.word	0x200003f4

080068cc <_fwalk_sglue>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	4607      	mov	r7, r0
 80068d2:	4688      	mov	r8, r1
 80068d4:	4614      	mov	r4, r2
 80068d6:	2600      	movs	r6, #0
 80068d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068dc:	f1b9 0901 	subs.w	r9, r9, #1
 80068e0:	d505      	bpl.n	80068ee <_fwalk_sglue+0x22>
 80068e2:	6824      	ldr	r4, [r4, #0]
 80068e4:	2c00      	cmp	r4, #0
 80068e6:	d1f7      	bne.n	80068d8 <_fwalk_sglue+0xc>
 80068e8:	4630      	mov	r0, r6
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	89ab      	ldrh	r3, [r5, #12]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d907      	bls.n	8006904 <_fwalk_sglue+0x38>
 80068f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f8:	3301      	adds	r3, #1
 80068fa:	d003      	beq.n	8006904 <_fwalk_sglue+0x38>
 80068fc:	4629      	mov	r1, r5
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	4306      	orrs	r6, r0
 8006904:	3568      	adds	r5, #104	; 0x68
 8006906:	e7e9      	b.n	80068dc <_fwalk_sglue+0x10>

08006908 <siprintf>:
 8006908:	b40e      	push	{r1, r2, r3}
 800690a:	b500      	push	{lr}
 800690c:	b09c      	sub	sp, #112	; 0x70
 800690e:	ab1d      	add	r3, sp, #116	; 0x74
 8006910:	9002      	str	r0, [sp, #8]
 8006912:	9006      	str	r0, [sp, #24]
 8006914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006918:	4809      	ldr	r0, [pc, #36]	; (8006940 <siprintf+0x38>)
 800691a:	9107      	str	r1, [sp, #28]
 800691c:	9104      	str	r1, [sp, #16]
 800691e:	4909      	ldr	r1, [pc, #36]	; (8006944 <siprintf+0x3c>)
 8006920:	f853 2b04 	ldr.w	r2, [r3], #4
 8006924:	9105      	str	r1, [sp, #20]
 8006926:	6800      	ldr	r0, [r0, #0]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	a902      	add	r1, sp, #8
 800692c:	f002 fbfc 	bl	8009128 <_svfiprintf_r>
 8006930:	9b02      	ldr	r3, [sp, #8]
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	b01c      	add	sp, #112	; 0x70
 8006938:	f85d eb04 	ldr.w	lr, [sp], #4
 800693c:	b003      	add	sp, #12
 800693e:	4770      	bx	lr
 8006940:	20000078 	.word	0x20000078
 8006944:	ffff0208 	.word	0xffff0208

08006948 <__sread>:
 8006948:	b510      	push	{r4, lr}
 800694a:	460c      	mov	r4, r1
 800694c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006950:	f000 f86c 	bl	8006a2c <_read_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	bfab      	itete	ge
 8006958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800695a:	89a3      	ldrhlt	r3, [r4, #12]
 800695c:	181b      	addge	r3, r3, r0
 800695e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006962:	bfac      	ite	ge
 8006964:	6563      	strge	r3, [r4, #84]	; 0x54
 8006966:	81a3      	strhlt	r3, [r4, #12]
 8006968:	bd10      	pop	{r4, pc}

0800696a <__swrite>:
 800696a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696e:	461f      	mov	r7, r3
 8006970:	898b      	ldrh	r3, [r1, #12]
 8006972:	05db      	lsls	r3, r3, #23
 8006974:	4605      	mov	r5, r0
 8006976:	460c      	mov	r4, r1
 8006978:	4616      	mov	r6, r2
 800697a:	d505      	bpl.n	8006988 <__swrite+0x1e>
 800697c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006980:	2302      	movs	r3, #2
 8006982:	2200      	movs	r2, #0
 8006984:	f000 f840 	bl	8006a08 <_lseek_r>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800698e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	4632      	mov	r2, r6
 8006996:	463b      	mov	r3, r7
 8006998:	4628      	mov	r0, r5
 800699a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800699e:	f000 b857 	b.w	8006a50 <_write_r>

080069a2 <__sseek>:
 80069a2:	b510      	push	{r4, lr}
 80069a4:	460c      	mov	r4, r1
 80069a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069aa:	f000 f82d 	bl	8006a08 <_lseek_r>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	bf15      	itete	ne
 80069b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80069b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069be:	81a3      	strheq	r3, [r4, #12]
 80069c0:	bf18      	it	ne
 80069c2:	81a3      	strhne	r3, [r4, #12]
 80069c4:	bd10      	pop	{r4, pc}

080069c6 <__sclose>:
 80069c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ca:	f000 b80d 	b.w	80069e8 <_close_r>

080069ce <memset>:
 80069ce:	4402      	add	r2, r0
 80069d0:	4603      	mov	r3, r0
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d100      	bne.n	80069d8 <memset+0xa>
 80069d6:	4770      	bx	lr
 80069d8:	f803 1b01 	strb.w	r1, [r3], #1
 80069dc:	e7f9      	b.n	80069d2 <memset+0x4>
	...

080069e0 <_localeconv_r>:
 80069e0:	4800      	ldr	r0, [pc, #0]	; (80069e4 <_localeconv_r+0x4>)
 80069e2:	4770      	bx	lr
 80069e4:	2000016c 	.word	0x2000016c

080069e8 <_close_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d06      	ldr	r5, [pc, #24]	; (8006a04 <_close_r+0x1c>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	602b      	str	r3, [r5, #0]
 80069f4:	f7fb ff53 	bl	800289e <_close>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_close_r+0x1a>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_close_r+0x1a>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	200003f8 	.word	0x200003f8

08006a08 <_lseek_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d07      	ldr	r5, [pc, #28]	; (8006a28 <_lseek_r+0x20>)
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	4608      	mov	r0, r1
 8006a10:	4611      	mov	r1, r2
 8006a12:	2200      	movs	r2, #0
 8006a14:	602a      	str	r2, [r5, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f7fb ff68 	bl	80028ec <_lseek>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_lseek_r+0x1e>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_lseek_r+0x1e>
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	200003f8 	.word	0x200003f8

08006a2c <_read_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d07      	ldr	r5, [pc, #28]	; (8006a4c <_read_r+0x20>)
 8006a30:	4604      	mov	r4, r0
 8006a32:	4608      	mov	r0, r1
 8006a34:	4611      	mov	r1, r2
 8006a36:	2200      	movs	r2, #0
 8006a38:	602a      	str	r2, [r5, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f7fb fef6 	bl	800282c <_read>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_read_r+0x1e>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_read_r+0x1e>
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	200003f8 	.word	0x200003f8

08006a50 <_write_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d07      	ldr	r5, [pc, #28]	; (8006a70 <_write_r+0x20>)
 8006a54:	4604      	mov	r4, r0
 8006a56:	4608      	mov	r0, r1
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	602a      	str	r2, [r5, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7fb ff01 	bl	8002866 <_write>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_write_r+0x1e>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_write_r+0x1e>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	200003f8 	.word	0x200003f8

08006a74 <__errno>:
 8006a74:	4b01      	ldr	r3, [pc, #4]	; (8006a7c <__errno+0x8>)
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000078 	.word	0x20000078

08006a80 <__libc_init_array>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4d0d      	ldr	r5, [pc, #52]	; (8006ab8 <__libc_init_array+0x38>)
 8006a84:	4c0d      	ldr	r4, [pc, #52]	; (8006abc <__libc_init_array+0x3c>)
 8006a86:	1b64      	subs	r4, r4, r5
 8006a88:	10a4      	asrs	r4, r4, #2
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	d109      	bne.n	8006aa4 <__libc_init_array+0x24>
 8006a90:	4d0b      	ldr	r5, [pc, #44]	; (8006ac0 <__libc_init_array+0x40>)
 8006a92:	4c0c      	ldr	r4, [pc, #48]	; (8006ac4 <__libc_init_array+0x44>)
 8006a94:	f003 fbd4 	bl	800a240 <_init>
 8006a98:	1b64      	subs	r4, r4, r5
 8006a9a:	10a4      	asrs	r4, r4, #2
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	d105      	bne.n	8006aae <__libc_init_array+0x2e>
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa8:	4798      	blx	r3
 8006aaa:	3601      	adds	r6, #1
 8006aac:	e7ee      	b.n	8006a8c <__libc_init_array+0xc>
 8006aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab2:	4798      	blx	r3
 8006ab4:	3601      	adds	r6, #1
 8006ab6:	e7f2      	b.n	8006a9e <__libc_init_array+0x1e>
 8006ab8:	0800a6b8 	.word	0x0800a6b8
 8006abc:	0800a6b8 	.word	0x0800a6b8
 8006ac0:	0800a6b8 	.word	0x0800a6b8
 8006ac4:	0800a6bc 	.word	0x0800a6bc

08006ac8 <__retarget_lock_init_recursive>:
 8006ac8:	4770      	bx	lr

08006aca <__retarget_lock_acquire_recursive>:
 8006aca:	4770      	bx	lr

08006acc <__retarget_lock_release_recursive>:
 8006acc:	4770      	bx	lr

08006ace <memcpy>:
 8006ace:	440a      	add	r2, r1
 8006ad0:	4291      	cmp	r1, r2
 8006ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad6:	d100      	bne.n	8006ada <memcpy+0xc>
 8006ad8:	4770      	bx	lr
 8006ada:	b510      	push	{r4, lr}
 8006adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae4:	4291      	cmp	r1, r2
 8006ae6:	d1f9      	bne.n	8006adc <memcpy+0xe>
 8006ae8:	bd10      	pop	{r4, pc}
	...

08006aec <nanf>:
 8006aec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006af4 <nanf+0x8>
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	7fc00000 	.word	0x7fc00000

08006af8 <quorem>:
 8006af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	6903      	ldr	r3, [r0, #16]
 8006afe:	690c      	ldr	r4, [r1, #16]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	4607      	mov	r7, r0
 8006b04:	db7e      	blt.n	8006c04 <quorem+0x10c>
 8006b06:	3c01      	subs	r4, #1
 8006b08:	f101 0814 	add.w	r8, r1, #20
 8006b0c:	f100 0514 	add.w	r5, r0, #20
 8006b10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	429a      	cmp	r2, r3
 8006b22:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b2e:	d331      	bcc.n	8006b94 <quorem+0x9c>
 8006b30:	f04f 0e00 	mov.w	lr, #0
 8006b34:	4640      	mov	r0, r8
 8006b36:	46ac      	mov	ip, r5
 8006b38:	46f2      	mov	sl, lr
 8006b3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b3e:	b293      	uxth	r3, r2
 8006b40:	fb06 e303 	mla	r3, r6, r3, lr
 8006b44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b48:	0c1a      	lsrs	r2, r3, #16
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b50:	f8dc a000 	ldr.w	sl, [ip]
 8006b54:	fa13 f38a 	uxtah	r3, r3, sl
 8006b58:	fb06 220e 	mla	r2, r6, lr, r2
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b64:	b292      	uxth	r2, r2
 8006b66:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b6e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b72:	4581      	cmp	r9, r0
 8006b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b78:	f84c 3b04 	str.w	r3, [ip], #4
 8006b7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b80:	d2db      	bcs.n	8006b3a <quorem+0x42>
 8006b82:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b86:	b92b      	cbnz	r3, 8006b94 <quorem+0x9c>
 8006b88:	9b01      	ldr	r3, [sp, #4]
 8006b8a:	3b04      	subs	r3, #4
 8006b8c:	429d      	cmp	r5, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	d32c      	bcc.n	8006bec <quorem+0xf4>
 8006b92:	613c      	str	r4, [r7, #16]
 8006b94:	4638      	mov	r0, r7
 8006b96:	f001 f9ef 	bl	8007f78 <__mcmp>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	db22      	blt.n	8006be4 <quorem+0xec>
 8006b9e:	3601      	adds	r6, #1
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ba8:	f8d1 c000 	ldr.w	ip, [r1]
 8006bac:	b293      	uxth	r3, r2
 8006bae:	1ac3      	subs	r3, r0, r3
 8006bb0:	0c12      	lsrs	r2, r2, #16
 8006bb2:	fa13 f38c 	uxtah	r3, r3, ip
 8006bb6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006bba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bc4:	45c1      	cmp	r9, r8
 8006bc6:	f841 3b04 	str.w	r3, [r1], #4
 8006bca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bce:	d2e9      	bcs.n	8006ba4 <quorem+0xac>
 8006bd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd8:	b922      	cbnz	r2, 8006be4 <quorem+0xec>
 8006bda:	3b04      	subs	r3, #4
 8006bdc:	429d      	cmp	r5, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	d30a      	bcc.n	8006bf8 <quorem+0x100>
 8006be2:	613c      	str	r4, [r7, #16]
 8006be4:	4630      	mov	r0, r6
 8006be6:	b003      	add	sp, #12
 8006be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	3b04      	subs	r3, #4
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	d1ce      	bne.n	8006b92 <quorem+0x9a>
 8006bf4:	3c01      	subs	r4, #1
 8006bf6:	e7c9      	b.n	8006b8c <quorem+0x94>
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	3b04      	subs	r3, #4
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	d1f0      	bne.n	8006be2 <quorem+0xea>
 8006c00:	3c01      	subs	r4, #1
 8006c02:	e7eb      	b.n	8006bdc <quorem+0xe4>
 8006c04:	2000      	movs	r0, #0
 8006c06:	e7ee      	b.n	8006be6 <quorem+0xee>

08006c08 <_dtoa_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	ed2d 8b04 	vpush	{d8-d9}
 8006c10:	69c5      	ldr	r5, [r0, #28]
 8006c12:	b093      	sub	sp, #76	; 0x4c
 8006c14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c18:	ec57 6b10 	vmov	r6, r7, d0
 8006c1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c20:	9107      	str	r1, [sp, #28]
 8006c22:	4604      	mov	r4, r0
 8006c24:	920a      	str	r2, [sp, #40]	; 0x28
 8006c26:	930d      	str	r3, [sp, #52]	; 0x34
 8006c28:	b975      	cbnz	r5, 8006c48 <_dtoa_r+0x40>
 8006c2a:	2010      	movs	r0, #16
 8006c2c:	f000 fe2a 	bl	8007884 <malloc>
 8006c30:	4602      	mov	r2, r0
 8006c32:	61e0      	str	r0, [r4, #28]
 8006c34:	b920      	cbnz	r0, 8006c40 <_dtoa_r+0x38>
 8006c36:	4bae      	ldr	r3, [pc, #696]	; (8006ef0 <_dtoa_r+0x2e8>)
 8006c38:	21ef      	movs	r1, #239	; 0xef
 8006c3a:	48ae      	ldr	r0, [pc, #696]	; (8006ef4 <_dtoa_r+0x2ec>)
 8006c3c:	f002 fc64 	bl	8009508 <__assert_func>
 8006c40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c44:	6005      	str	r5, [r0, #0]
 8006c46:	60c5      	str	r5, [r0, #12]
 8006c48:	69e3      	ldr	r3, [r4, #28]
 8006c4a:	6819      	ldr	r1, [r3, #0]
 8006c4c:	b151      	cbz	r1, 8006c64 <_dtoa_r+0x5c>
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	604a      	str	r2, [r1, #4]
 8006c52:	2301      	movs	r3, #1
 8006c54:	4093      	lsls	r3, r2
 8006c56:	608b      	str	r3, [r1, #8]
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 ff07 	bl	8007a6c <_Bfree>
 8006c5e:	69e3      	ldr	r3, [r4, #28]
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	1e3b      	subs	r3, r7, #0
 8006c66:	bfbb      	ittet	lt
 8006c68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c6c:	9303      	strlt	r3, [sp, #12]
 8006c6e:	2300      	movge	r3, #0
 8006c70:	2201      	movlt	r2, #1
 8006c72:	bfac      	ite	ge
 8006c74:	f8c8 3000 	strge.w	r3, [r8]
 8006c78:	f8c8 2000 	strlt.w	r2, [r8]
 8006c7c:	4b9e      	ldr	r3, [pc, #632]	; (8006ef8 <_dtoa_r+0x2f0>)
 8006c7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c82:	ea33 0308 	bics.w	r3, r3, r8
 8006c86:	d11b      	bne.n	8006cc0 <_dtoa_r+0xb8>
 8006c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c94:	4333      	orrs	r3, r6
 8006c96:	f000 8593 	beq.w	80077c0 <_dtoa_r+0xbb8>
 8006c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c9c:	b963      	cbnz	r3, 8006cb8 <_dtoa_r+0xb0>
 8006c9e:	4b97      	ldr	r3, [pc, #604]	; (8006efc <_dtoa_r+0x2f4>)
 8006ca0:	e027      	b.n	8006cf2 <_dtoa_r+0xea>
 8006ca2:	4b97      	ldr	r3, [pc, #604]	; (8006f00 <_dtoa_r+0x2f8>)
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	9800      	ldr	r0, [sp, #0]
 8006cae:	b013      	add	sp, #76	; 0x4c
 8006cb0:	ecbd 8b04 	vpop	{d8-d9}
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	4b90      	ldr	r3, [pc, #576]	; (8006efc <_dtoa_r+0x2f4>)
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	3303      	adds	r3, #3
 8006cbe:	e7f3      	b.n	8006ca8 <_dtoa_r+0xa0>
 8006cc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	ec51 0b17 	vmov	r0, r1, d7
 8006cca:	eeb0 8a47 	vmov.f32	s16, s14
 8006cce:	eef0 8a67 	vmov.f32	s17, s15
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f7f9 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd8:	4681      	mov	r9, r0
 8006cda:	b160      	cbz	r0, 8006cf6 <_dtoa_r+0xee>
 8006cdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cde:	2301      	movs	r3, #1
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8568 	beq.w	80077ba <_dtoa_r+0xbb2>
 8006cea:	4b86      	ldr	r3, [pc, #536]	; (8006f04 <_dtoa_r+0x2fc>)
 8006cec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	e7da      	b.n	8006cac <_dtoa_r+0xa4>
 8006cf6:	aa10      	add	r2, sp, #64	; 0x40
 8006cf8:	a911      	add	r1, sp, #68	; 0x44
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8006d00:	eef0 0a68 	vmov.f32	s1, s17
 8006d04:	f001 fa4e 	bl	80081a4 <__d2b>
 8006d08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	d07f      	beq.n	8006e12 <_dtoa_r+0x20a>
 8006d12:	ee18 3a90 	vmov	r3, s17
 8006d16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d1e:	ec51 0b18 	vmov	r0, r1, d8
 8006d22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d2e:	4619      	mov	r1, r3
 8006d30:	2200      	movs	r2, #0
 8006d32:	4b75      	ldr	r3, [pc, #468]	; (8006f08 <_dtoa_r+0x300>)
 8006d34:	f7f9 faa8 	bl	8000288 <__aeabi_dsub>
 8006d38:	a367      	add	r3, pc, #412	; (adr r3, 8006ed8 <_dtoa_r+0x2d0>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fc5b 	bl	80005f8 <__aeabi_dmul>
 8006d42:	a367      	add	r3, pc, #412	; (adr r3, 8006ee0 <_dtoa_r+0x2d8>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 faa0 	bl	800028c <__adddf3>
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	4628      	mov	r0, r5
 8006d50:	460f      	mov	r7, r1
 8006d52:	f7f9 fbe7 	bl	8000524 <__aeabi_i2d>
 8006d56:	a364      	add	r3, pc, #400	; (adr r3, 8006ee8 <_dtoa_r+0x2e0>)
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f7f9 fc4c 	bl	80005f8 <__aeabi_dmul>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	f7f9 fa90 	bl	800028c <__adddf3>
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	460f      	mov	r7, r1
 8006d70:	f7f9 fef2 	bl	8000b58 <__aeabi_d2iz>
 8006d74:	2200      	movs	r2, #0
 8006d76:	4683      	mov	fp, r0
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7f9 fead 	bl	8000adc <__aeabi_dcmplt>
 8006d82:	b148      	cbz	r0, 8006d98 <_dtoa_r+0x190>
 8006d84:	4658      	mov	r0, fp
 8006d86:	f7f9 fbcd 	bl	8000524 <__aeabi_i2d>
 8006d8a:	4632      	mov	r2, r6
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	f7f9 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d92:	b908      	cbnz	r0, 8006d98 <_dtoa_r+0x190>
 8006d94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d98:	f1bb 0f16 	cmp.w	fp, #22
 8006d9c:	d857      	bhi.n	8006e4e <_dtoa_r+0x246>
 8006d9e:	4b5b      	ldr	r3, [pc, #364]	; (8006f0c <_dtoa_r+0x304>)
 8006da0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	ec51 0b18 	vmov	r0, r1, d8
 8006dac:	f7f9 fe96 	bl	8000adc <__aeabi_dcmplt>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d04e      	beq.n	8006e52 <_dtoa_r+0x24a>
 8006db4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006db8:	2300      	movs	r3, #0
 8006dba:	930c      	str	r3, [sp, #48]	; 0x30
 8006dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dbe:	1b5b      	subs	r3, r3, r5
 8006dc0:	1e5a      	subs	r2, r3, #1
 8006dc2:	bf45      	ittet	mi
 8006dc4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006dc8:	9305      	strmi	r3, [sp, #20]
 8006dca:	2300      	movpl	r3, #0
 8006dcc:	2300      	movmi	r3, #0
 8006dce:	9206      	str	r2, [sp, #24]
 8006dd0:	bf54      	ite	pl
 8006dd2:	9305      	strpl	r3, [sp, #20]
 8006dd4:	9306      	strmi	r3, [sp, #24]
 8006dd6:	f1bb 0f00 	cmp.w	fp, #0
 8006dda:	db3c      	blt.n	8006e56 <_dtoa_r+0x24e>
 8006ddc:	9b06      	ldr	r3, [sp, #24]
 8006dde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006de2:	445b      	add	r3, fp
 8006de4:	9306      	str	r3, [sp, #24]
 8006de6:	2300      	movs	r3, #0
 8006de8:	9308      	str	r3, [sp, #32]
 8006dea:	9b07      	ldr	r3, [sp, #28]
 8006dec:	2b09      	cmp	r3, #9
 8006dee:	d868      	bhi.n	8006ec2 <_dtoa_r+0x2ba>
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	bfc4      	itt	gt
 8006df4:	3b04      	subgt	r3, #4
 8006df6:	9307      	strgt	r3, [sp, #28]
 8006df8:	9b07      	ldr	r3, [sp, #28]
 8006dfa:	f1a3 0302 	sub.w	r3, r3, #2
 8006dfe:	bfcc      	ite	gt
 8006e00:	2500      	movgt	r5, #0
 8006e02:	2501      	movle	r5, #1
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	f200 8085 	bhi.w	8006f14 <_dtoa_r+0x30c>
 8006e0a:	e8df f003 	tbb	[pc, r3]
 8006e0e:	3b2e      	.short	0x3b2e
 8006e10:	5839      	.short	0x5839
 8006e12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006e16:	441d      	add	r5, r3
 8006e18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	bfc1      	itttt	gt
 8006e20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e24:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006e2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006e30:	bfd6      	itet	le
 8006e32:	f1c3 0320 	rsble	r3, r3, #32
 8006e36:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e3a:	fa06 f003 	lslle.w	r0, r6, r3
 8006e3e:	f7f9 fb61 	bl	8000504 <__aeabi_ui2d>
 8006e42:	2201      	movs	r2, #1
 8006e44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e48:	3d01      	subs	r5, #1
 8006e4a:	920e      	str	r2, [sp, #56]	; 0x38
 8006e4c:	e76f      	b.n	8006d2e <_dtoa_r+0x126>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e7b3      	b.n	8006dba <_dtoa_r+0x1b2>
 8006e52:	900c      	str	r0, [sp, #48]	; 0x30
 8006e54:	e7b2      	b.n	8006dbc <_dtoa_r+0x1b4>
 8006e56:	9b05      	ldr	r3, [sp, #20]
 8006e58:	eba3 030b 	sub.w	r3, r3, fp
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	f1cb 0300 	rsb	r3, fp, #0
 8006e62:	9308      	str	r3, [sp, #32]
 8006e64:	2300      	movs	r3, #0
 8006e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e68:	e7bf      	b.n	8006dea <_dtoa_r+0x1e2>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dc52      	bgt.n	8006f1a <_dtoa_r+0x312>
 8006e74:	2301      	movs	r3, #1
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	9304      	str	r3, [sp, #16]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e7e:	e00b      	b.n	8006e98 <_dtoa_r+0x290>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e7f3      	b.n	8006e6c <_dtoa_r+0x264>
 8006e84:	2300      	movs	r3, #0
 8006e86:	9309      	str	r3, [sp, #36]	; 0x24
 8006e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8a:	445b      	add	r3, fp
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	9304      	str	r3, [sp, #16]
 8006e94:	bfb8      	it	lt
 8006e96:	2301      	movlt	r3, #1
 8006e98:	69e0      	ldr	r0, [r4, #28]
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	f102 0614 	add.w	r6, r2, #20
 8006ea2:	429e      	cmp	r6, r3
 8006ea4:	d93d      	bls.n	8006f22 <_dtoa_r+0x31a>
 8006ea6:	6041      	str	r1, [r0, #4]
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 fd9f 	bl	80079ec <_Balloc>
 8006eae:	9000      	str	r0, [sp, #0]
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d139      	bne.n	8006f28 <_dtoa_r+0x320>
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <_dtoa_r+0x308>)
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f240 11af 	movw	r1, #431	; 0x1af
 8006ebc:	e6bd      	b.n	8006c3a <_dtoa_r+0x32>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e7e1      	b.n	8006e86 <_dtoa_r+0x27e>
 8006ec2:	2501      	movs	r5, #1
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	9509      	str	r5, [sp, #36]	; 0x24
 8006eca:	f04f 33ff 	mov.w	r3, #4294967295
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	9304      	str	r3, [sp, #16]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2312      	movs	r3, #18
 8006ed6:	e7d1      	b.n	8006e7c <_dtoa_r+0x274>
 8006ed8:	636f4361 	.word	0x636f4361
 8006edc:	3fd287a7 	.word	0x3fd287a7
 8006ee0:	8b60c8b3 	.word	0x8b60c8b3
 8006ee4:	3fc68a28 	.word	0x3fc68a28
 8006ee8:	509f79fb 	.word	0x509f79fb
 8006eec:	3fd34413 	.word	0x3fd34413
 8006ef0:	0800a2c9 	.word	0x0800a2c9
 8006ef4:	0800a2e0 	.word	0x0800a2e0
 8006ef8:	7ff00000 	.word	0x7ff00000
 8006efc:	0800a2c5 	.word	0x0800a2c5
 8006f00:	0800a2bc 	.word	0x0800a2bc
 8006f04:	0800a294 	.word	0x0800a294
 8006f08:	3ff80000 	.word	0x3ff80000
 8006f0c:	0800a3d0 	.word	0x0800a3d0
 8006f10:	0800a338 	.word	0x0800a338
 8006f14:	2301      	movs	r3, #1
 8006f16:	9309      	str	r3, [sp, #36]	; 0x24
 8006f18:	e7d7      	b.n	8006eca <_dtoa_r+0x2c2>
 8006f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	e7ba      	b.n	8006e98 <_dtoa_r+0x290>
 8006f22:	3101      	adds	r1, #1
 8006f24:	0052      	lsls	r2, r2, #1
 8006f26:	e7ba      	b.n	8006e9e <_dtoa_r+0x296>
 8006f28:	69e3      	ldr	r3, [r4, #28]
 8006f2a:	9a00      	ldr	r2, [sp, #0]
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	2b0e      	cmp	r3, #14
 8006f32:	f200 80a8 	bhi.w	8007086 <_dtoa_r+0x47e>
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	f000 80a5 	beq.w	8007086 <_dtoa_r+0x47e>
 8006f3c:	f1bb 0f00 	cmp.w	fp, #0
 8006f40:	dd38      	ble.n	8006fb4 <_dtoa_r+0x3ac>
 8006f42:	4bc0      	ldr	r3, [pc, #768]	; (8007244 <_dtoa_r+0x63c>)
 8006f44:	f00b 020f 	and.w	r2, fp, #15
 8006f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f50:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f54:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f58:	d019      	beq.n	8006f8e <_dtoa_r+0x386>
 8006f5a:	4bbb      	ldr	r3, [pc, #748]	; (8007248 <_dtoa_r+0x640>)
 8006f5c:	ec51 0b18 	vmov	r0, r1, d8
 8006f60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f64:	f7f9 fc72 	bl	800084c <__aeabi_ddiv>
 8006f68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f6c:	f008 080f 	and.w	r8, r8, #15
 8006f70:	2503      	movs	r5, #3
 8006f72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007248 <_dtoa_r+0x640>
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	d10a      	bne.n	8006f92 <_dtoa_r+0x38a>
 8006f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f80:	4632      	mov	r2, r6
 8006f82:	463b      	mov	r3, r7
 8006f84:	f7f9 fc62 	bl	800084c <__aeabi_ddiv>
 8006f88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f8c:	e02b      	b.n	8006fe6 <_dtoa_r+0x3de>
 8006f8e:	2502      	movs	r5, #2
 8006f90:	e7ef      	b.n	8006f72 <_dtoa_r+0x36a>
 8006f92:	f018 0f01 	tst.w	r8, #1
 8006f96:	d008      	beq.n	8006faa <_dtoa_r+0x3a2>
 8006f98:	4630      	mov	r0, r6
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006fa0:	f7f9 fb2a 	bl	80005f8 <__aeabi_dmul>
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460f      	mov	r7, r1
 8006faa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fae:	f109 0908 	add.w	r9, r9, #8
 8006fb2:	e7e0      	b.n	8006f76 <_dtoa_r+0x36e>
 8006fb4:	f000 809f 	beq.w	80070f6 <_dtoa_r+0x4ee>
 8006fb8:	f1cb 0600 	rsb	r6, fp, #0
 8006fbc:	4ba1      	ldr	r3, [pc, #644]	; (8007244 <_dtoa_r+0x63c>)
 8006fbe:	4fa2      	ldr	r7, [pc, #648]	; (8007248 <_dtoa_r+0x640>)
 8006fc0:	f006 020f 	and.w	r2, r6, #15
 8006fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	ec51 0b18 	vmov	r0, r1, d8
 8006fd0:	f7f9 fb12 	bl	80005f8 <__aeabi_dmul>
 8006fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd8:	1136      	asrs	r6, r6, #4
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2502      	movs	r5, #2
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	d17e      	bne.n	80070e0 <_dtoa_r+0x4d8>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1d0      	bne.n	8006f88 <_dtoa_r+0x380>
 8006fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fe8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8084 	beq.w	80070fa <_dtoa_r+0x4f2>
 8006ff2:	4b96      	ldr	r3, [pc, #600]	; (800724c <_dtoa_r+0x644>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 fd6f 	bl	8000adc <__aeabi_dcmplt>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d07b      	beq.n	80070fa <_dtoa_r+0x4f2>
 8007002:	9b04      	ldr	r3, [sp, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d078      	beq.n	80070fa <_dtoa_r+0x4f2>
 8007008:	9b01      	ldr	r3, [sp, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dd39      	ble.n	8007082 <_dtoa_r+0x47a>
 800700e:	4b90      	ldr	r3, [pc, #576]	; (8007250 <_dtoa_r+0x648>)
 8007010:	2200      	movs	r2, #0
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	f7f9 faef 	bl	80005f8 <__aeabi_dmul>
 800701a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800701e:	9e01      	ldr	r6, [sp, #4]
 8007020:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007024:	3501      	adds	r5, #1
 8007026:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800702a:	4628      	mov	r0, r5
 800702c:	f7f9 fa7a 	bl	8000524 <__aeabi_i2d>
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	f7f9 fae0 	bl	80005f8 <__aeabi_dmul>
 8007038:	4b86      	ldr	r3, [pc, #536]	; (8007254 <_dtoa_r+0x64c>)
 800703a:	2200      	movs	r2, #0
 800703c:	f7f9 f926 	bl	800028c <__adddf3>
 8007040:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007048:	9303      	str	r3, [sp, #12]
 800704a:	2e00      	cmp	r6, #0
 800704c:	d158      	bne.n	8007100 <_dtoa_r+0x4f8>
 800704e:	4b82      	ldr	r3, [pc, #520]	; (8007258 <_dtoa_r+0x650>)
 8007050:	2200      	movs	r2, #0
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	f7f9 f917 	bl	8000288 <__aeabi_dsub>
 800705a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800705e:	4680      	mov	r8, r0
 8007060:	4689      	mov	r9, r1
 8007062:	f7f9 fd59 	bl	8000b18 <__aeabi_dcmpgt>
 8007066:	2800      	cmp	r0, #0
 8007068:	f040 8296 	bne.w	8007598 <_dtoa_r+0x990>
 800706c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007070:	4640      	mov	r0, r8
 8007072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007076:	4649      	mov	r1, r9
 8007078:	f7f9 fd30 	bl	8000adc <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 8289 	bne.w	8007594 <_dtoa_r+0x98c>
 8007082:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007088:	2b00      	cmp	r3, #0
 800708a:	f2c0 814e 	blt.w	800732a <_dtoa_r+0x722>
 800708e:	f1bb 0f0e 	cmp.w	fp, #14
 8007092:	f300 814a 	bgt.w	800732a <_dtoa_r+0x722>
 8007096:	4b6b      	ldr	r3, [pc, #428]	; (8007244 <_dtoa_r+0x63c>)
 8007098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800709c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f280 80dc 	bge.w	8007260 <_dtoa_r+0x658>
 80070a8:	9b04      	ldr	r3, [sp, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f300 80d8 	bgt.w	8007260 <_dtoa_r+0x658>
 80070b0:	f040 826f 	bne.w	8007592 <_dtoa_r+0x98a>
 80070b4:	4b68      	ldr	r3, [pc, #416]	; (8007258 <_dtoa_r+0x650>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070c4:	f7f9 fd1e 	bl	8000b04 <__aeabi_dcmpge>
 80070c8:	9e04      	ldr	r6, [sp, #16]
 80070ca:	4637      	mov	r7, r6
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f040 8245 	bne.w	800755c <_dtoa_r+0x954>
 80070d2:	9d00      	ldr	r5, [sp, #0]
 80070d4:	2331      	movs	r3, #49	; 0x31
 80070d6:	f805 3b01 	strb.w	r3, [r5], #1
 80070da:	f10b 0b01 	add.w	fp, fp, #1
 80070de:	e241      	b.n	8007564 <_dtoa_r+0x95c>
 80070e0:	07f2      	lsls	r2, r6, #31
 80070e2:	d505      	bpl.n	80070f0 <_dtoa_r+0x4e8>
 80070e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e8:	f7f9 fa86 	bl	80005f8 <__aeabi_dmul>
 80070ec:	3501      	adds	r5, #1
 80070ee:	2301      	movs	r3, #1
 80070f0:	1076      	asrs	r6, r6, #1
 80070f2:	3708      	adds	r7, #8
 80070f4:	e773      	b.n	8006fde <_dtoa_r+0x3d6>
 80070f6:	2502      	movs	r5, #2
 80070f8:	e775      	b.n	8006fe6 <_dtoa_r+0x3de>
 80070fa:	9e04      	ldr	r6, [sp, #16]
 80070fc:	465f      	mov	r7, fp
 80070fe:	e792      	b.n	8007026 <_dtoa_r+0x41e>
 8007100:	9900      	ldr	r1, [sp, #0]
 8007102:	4b50      	ldr	r3, [pc, #320]	; (8007244 <_dtoa_r+0x63c>)
 8007104:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007108:	4431      	add	r1, r6
 800710a:	9102      	str	r1, [sp, #8]
 800710c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800710e:	eeb0 9a47 	vmov.f32	s18, s14
 8007112:	eef0 9a67 	vmov.f32	s19, s15
 8007116:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800711a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800711e:	2900      	cmp	r1, #0
 8007120:	d044      	beq.n	80071ac <_dtoa_r+0x5a4>
 8007122:	494e      	ldr	r1, [pc, #312]	; (800725c <_dtoa_r+0x654>)
 8007124:	2000      	movs	r0, #0
 8007126:	f7f9 fb91 	bl	800084c <__aeabi_ddiv>
 800712a:	ec53 2b19 	vmov	r2, r3, d9
 800712e:	f7f9 f8ab 	bl	8000288 <__aeabi_dsub>
 8007132:	9d00      	ldr	r5, [sp, #0]
 8007134:	ec41 0b19 	vmov	d9, r0, r1
 8007138:	4649      	mov	r1, r9
 800713a:	4640      	mov	r0, r8
 800713c:	f7f9 fd0c 	bl	8000b58 <__aeabi_d2iz>
 8007140:	4606      	mov	r6, r0
 8007142:	f7f9 f9ef 	bl	8000524 <__aeabi_i2d>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4640      	mov	r0, r8
 800714c:	4649      	mov	r1, r9
 800714e:	f7f9 f89b 	bl	8000288 <__aeabi_dsub>
 8007152:	3630      	adds	r6, #48	; 0x30
 8007154:	f805 6b01 	strb.w	r6, [r5], #1
 8007158:	ec53 2b19 	vmov	r2, r3, d9
 800715c:	4680      	mov	r8, r0
 800715e:	4689      	mov	r9, r1
 8007160:	f7f9 fcbc 	bl	8000adc <__aeabi_dcmplt>
 8007164:	2800      	cmp	r0, #0
 8007166:	d164      	bne.n	8007232 <_dtoa_r+0x62a>
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	4937      	ldr	r1, [pc, #220]	; (800724c <_dtoa_r+0x644>)
 800716e:	2000      	movs	r0, #0
 8007170:	f7f9 f88a 	bl	8000288 <__aeabi_dsub>
 8007174:	ec53 2b19 	vmov	r2, r3, d9
 8007178:	f7f9 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800717c:	2800      	cmp	r0, #0
 800717e:	f040 80b6 	bne.w	80072ee <_dtoa_r+0x6e6>
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	429d      	cmp	r5, r3
 8007186:	f43f af7c 	beq.w	8007082 <_dtoa_r+0x47a>
 800718a:	4b31      	ldr	r3, [pc, #196]	; (8007250 <_dtoa_r+0x648>)
 800718c:	ec51 0b19 	vmov	r0, r1, d9
 8007190:	2200      	movs	r2, #0
 8007192:	f7f9 fa31 	bl	80005f8 <__aeabi_dmul>
 8007196:	4b2e      	ldr	r3, [pc, #184]	; (8007250 <_dtoa_r+0x648>)
 8007198:	ec41 0b19 	vmov	d9, r0, r1
 800719c:	2200      	movs	r2, #0
 800719e:	4640      	mov	r0, r8
 80071a0:	4649      	mov	r1, r9
 80071a2:	f7f9 fa29 	bl	80005f8 <__aeabi_dmul>
 80071a6:	4680      	mov	r8, r0
 80071a8:	4689      	mov	r9, r1
 80071aa:	e7c5      	b.n	8007138 <_dtoa_r+0x530>
 80071ac:	ec51 0b17 	vmov	r0, r1, d7
 80071b0:	f7f9 fa22 	bl	80005f8 <__aeabi_dmul>
 80071b4:	9b02      	ldr	r3, [sp, #8]
 80071b6:	9d00      	ldr	r5, [sp, #0]
 80071b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ba:	ec41 0b19 	vmov	d9, r0, r1
 80071be:	4649      	mov	r1, r9
 80071c0:	4640      	mov	r0, r8
 80071c2:	f7f9 fcc9 	bl	8000b58 <__aeabi_d2iz>
 80071c6:	4606      	mov	r6, r0
 80071c8:	f7f9 f9ac 	bl	8000524 <__aeabi_i2d>
 80071cc:	3630      	adds	r6, #48	; 0x30
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4640      	mov	r0, r8
 80071d4:	4649      	mov	r1, r9
 80071d6:	f7f9 f857 	bl	8000288 <__aeabi_dsub>
 80071da:	f805 6b01 	strb.w	r6, [r5], #1
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	429d      	cmp	r5, r3
 80071e2:	4680      	mov	r8, r0
 80071e4:	4689      	mov	r9, r1
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	d124      	bne.n	8007236 <_dtoa_r+0x62e>
 80071ec:	4b1b      	ldr	r3, [pc, #108]	; (800725c <_dtoa_r+0x654>)
 80071ee:	ec51 0b19 	vmov	r0, r1, d9
 80071f2:	f7f9 f84b 	bl	800028c <__adddf3>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 8007202:	2800      	cmp	r0, #0
 8007204:	d173      	bne.n	80072ee <_dtoa_r+0x6e6>
 8007206:	ec53 2b19 	vmov	r2, r3, d9
 800720a:	4914      	ldr	r1, [pc, #80]	; (800725c <_dtoa_r+0x654>)
 800720c:	2000      	movs	r0, #0
 800720e:	f7f9 f83b 	bl	8000288 <__aeabi_dsub>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4640      	mov	r0, r8
 8007218:	4649      	mov	r1, r9
 800721a:	f7f9 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f af2f 	beq.w	8007082 <_dtoa_r+0x47a>
 8007224:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007226:	1e6b      	subs	r3, r5, #1
 8007228:	930f      	str	r3, [sp, #60]	; 0x3c
 800722a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800722e:	2b30      	cmp	r3, #48	; 0x30
 8007230:	d0f8      	beq.n	8007224 <_dtoa_r+0x61c>
 8007232:	46bb      	mov	fp, r7
 8007234:	e04a      	b.n	80072cc <_dtoa_r+0x6c4>
 8007236:	4b06      	ldr	r3, [pc, #24]	; (8007250 <_dtoa_r+0x648>)
 8007238:	f7f9 f9de 	bl	80005f8 <__aeabi_dmul>
 800723c:	4680      	mov	r8, r0
 800723e:	4689      	mov	r9, r1
 8007240:	e7bd      	b.n	80071be <_dtoa_r+0x5b6>
 8007242:	bf00      	nop
 8007244:	0800a3d0 	.word	0x0800a3d0
 8007248:	0800a3a8 	.word	0x0800a3a8
 800724c:	3ff00000 	.word	0x3ff00000
 8007250:	40240000 	.word	0x40240000
 8007254:	401c0000 	.word	0x401c0000
 8007258:	40140000 	.word	0x40140000
 800725c:	3fe00000 	.word	0x3fe00000
 8007260:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007264:	9d00      	ldr	r5, [sp, #0]
 8007266:	4642      	mov	r2, r8
 8007268:	464b      	mov	r3, r9
 800726a:	4630      	mov	r0, r6
 800726c:	4639      	mov	r1, r7
 800726e:	f7f9 faed 	bl	800084c <__aeabi_ddiv>
 8007272:	f7f9 fc71 	bl	8000b58 <__aeabi_d2iz>
 8007276:	9001      	str	r0, [sp, #4]
 8007278:	f7f9 f954 	bl	8000524 <__aeabi_i2d>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	f7f9 f9ba 	bl	80005f8 <__aeabi_dmul>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4630      	mov	r0, r6
 800728a:	4639      	mov	r1, r7
 800728c:	f7f8 fffc 	bl	8000288 <__aeabi_dsub>
 8007290:	9e01      	ldr	r6, [sp, #4]
 8007292:	9f04      	ldr	r7, [sp, #16]
 8007294:	3630      	adds	r6, #48	; 0x30
 8007296:	f805 6b01 	strb.w	r6, [r5], #1
 800729a:	9e00      	ldr	r6, [sp, #0]
 800729c:	1bae      	subs	r6, r5, r6
 800729e:	42b7      	cmp	r7, r6
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	d134      	bne.n	8007310 <_dtoa_r+0x708>
 80072a6:	f7f8 fff1 	bl	800028c <__adddf3>
 80072aa:	4642      	mov	r2, r8
 80072ac:	464b      	mov	r3, r9
 80072ae:	4606      	mov	r6, r0
 80072b0:	460f      	mov	r7, r1
 80072b2:	f7f9 fc31 	bl	8000b18 <__aeabi_dcmpgt>
 80072b6:	b9c8      	cbnz	r0, 80072ec <_dtoa_r+0x6e4>
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	4630      	mov	r0, r6
 80072be:	4639      	mov	r1, r7
 80072c0:	f7f9 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80072c4:	b110      	cbz	r0, 80072cc <_dtoa_r+0x6c4>
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	07db      	lsls	r3, r3, #31
 80072ca:	d40f      	bmi.n	80072ec <_dtoa_r+0x6e4>
 80072cc:	4651      	mov	r1, sl
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fbcc 	bl	8007a6c <_Bfree>
 80072d4:	2300      	movs	r3, #0
 80072d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072d8:	702b      	strb	r3, [r5, #0]
 80072da:	f10b 0301 	add.w	r3, fp, #1
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f43f ace2 	beq.w	8006cac <_dtoa_r+0xa4>
 80072e8:	601d      	str	r5, [r3, #0]
 80072ea:	e4df      	b.n	8006cac <_dtoa_r+0xa4>
 80072ec:	465f      	mov	r7, fp
 80072ee:	462b      	mov	r3, r5
 80072f0:	461d      	mov	r5, r3
 80072f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072f6:	2a39      	cmp	r2, #57	; 0x39
 80072f8:	d106      	bne.n	8007308 <_dtoa_r+0x700>
 80072fa:	9a00      	ldr	r2, [sp, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d1f7      	bne.n	80072f0 <_dtoa_r+0x6e8>
 8007300:	9900      	ldr	r1, [sp, #0]
 8007302:	2230      	movs	r2, #48	; 0x30
 8007304:	3701      	adds	r7, #1
 8007306:	700a      	strb	r2, [r1, #0]
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	3201      	adds	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	e790      	b.n	8007232 <_dtoa_r+0x62a>
 8007310:	4ba3      	ldr	r3, [pc, #652]	; (80075a0 <_dtoa_r+0x998>)
 8007312:	2200      	movs	r2, #0
 8007314:	f7f9 f970 	bl	80005f8 <__aeabi_dmul>
 8007318:	2200      	movs	r2, #0
 800731a:	2300      	movs	r3, #0
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	f7f9 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007324:	2800      	cmp	r0, #0
 8007326:	d09e      	beq.n	8007266 <_dtoa_r+0x65e>
 8007328:	e7d0      	b.n	80072cc <_dtoa_r+0x6c4>
 800732a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732c:	2a00      	cmp	r2, #0
 800732e:	f000 80ca 	beq.w	80074c6 <_dtoa_r+0x8be>
 8007332:	9a07      	ldr	r2, [sp, #28]
 8007334:	2a01      	cmp	r2, #1
 8007336:	f300 80ad 	bgt.w	8007494 <_dtoa_r+0x88c>
 800733a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800733c:	2a00      	cmp	r2, #0
 800733e:	f000 80a5 	beq.w	800748c <_dtoa_r+0x884>
 8007342:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007346:	9e08      	ldr	r6, [sp, #32]
 8007348:	9d05      	ldr	r5, [sp, #20]
 800734a:	9a05      	ldr	r2, [sp, #20]
 800734c:	441a      	add	r2, r3
 800734e:	9205      	str	r2, [sp, #20]
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	2101      	movs	r1, #1
 8007354:	441a      	add	r2, r3
 8007356:	4620      	mov	r0, r4
 8007358:	9206      	str	r2, [sp, #24]
 800735a:	f000 fc87 	bl	8007c6c <__i2b>
 800735e:	4607      	mov	r7, r0
 8007360:	b165      	cbz	r5, 800737c <_dtoa_r+0x774>
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	dd09      	ble.n	800737c <_dtoa_r+0x774>
 8007368:	42ab      	cmp	r3, r5
 800736a:	9a05      	ldr	r2, [sp, #20]
 800736c:	bfa8      	it	ge
 800736e:	462b      	movge	r3, r5
 8007370:	1ad2      	subs	r2, r2, r3
 8007372:	9205      	str	r2, [sp, #20]
 8007374:	9a06      	ldr	r2, [sp, #24]
 8007376:	1aed      	subs	r5, r5, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	9306      	str	r3, [sp, #24]
 800737c:	9b08      	ldr	r3, [sp, #32]
 800737e:	b1f3      	cbz	r3, 80073be <_dtoa_r+0x7b6>
 8007380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80a3 	beq.w	80074ce <_dtoa_r+0x8c6>
 8007388:	2e00      	cmp	r6, #0
 800738a:	dd10      	ble.n	80073ae <_dtoa_r+0x7a6>
 800738c:	4639      	mov	r1, r7
 800738e:	4632      	mov	r2, r6
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fd2b 	bl	8007dec <__pow5mult>
 8007396:	4652      	mov	r2, sl
 8007398:	4601      	mov	r1, r0
 800739a:	4607      	mov	r7, r0
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fc7b 	bl	8007c98 <__multiply>
 80073a2:	4651      	mov	r1, sl
 80073a4:	4680      	mov	r8, r0
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 fb60 	bl	8007a6c <_Bfree>
 80073ac:	46c2      	mov	sl, r8
 80073ae:	9b08      	ldr	r3, [sp, #32]
 80073b0:	1b9a      	subs	r2, r3, r6
 80073b2:	d004      	beq.n	80073be <_dtoa_r+0x7b6>
 80073b4:	4651      	mov	r1, sl
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 fd18 	bl	8007dec <__pow5mult>
 80073bc:	4682      	mov	sl, r0
 80073be:	2101      	movs	r1, #1
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fc53 	bl	8007c6c <__i2b>
 80073c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	4606      	mov	r6, r0
 80073cc:	f340 8081 	ble.w	80074d2 <_dtoa_r+0x8ca>
 80073d0:	461a      	mov	r2, r3
 80073d2:	4601      	mov	r1, r0
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fd09 	bl	8007dec <__pow5mult>
 80073da:	9b07      	ldr	r3, [sp, #28]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	4606      	mov	r6, r0
 80073e0:	dd7a      	ble.n	80074d8 <_dtoa_r+0x8d0>
 80073e2:	f04f 0800 	mov.w	r8, #0
 80073e6:	6933      	ldr	r3, [r6, #16]
 80073e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073ec:	6918      	ldr	r0, [r3, #16]
 80073ee:	f000 fbef 	bl	8007bd0 <__hi0bits>
 80073f2:	f1c0 0020 	rsb	r0, r0, #32
 80073f6:	9b06      	ldr	r3, [sp, #24]
 80073f8:	4418      	add	r0, r3
 80073fa:	f010 001f 	ands.w	r0, r0, #31
 80073fe:	f000 8094 	beq.w	800752a <_dtoa_r+0x922>
 8007402:	f1c0 0320 	rsb	r3, r0, #32
 8007406:	2b04      	cmp	r3, #4
 8007408:	f340 8085 	ble.w	8007516 <_dtoa_r+0x90e>
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	f1c0 001c 	rsb	r0, r0, #28
 8007412:	4403      	add	r3, r0
 8007414:	9305      	str	r3, [sp, #20]
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	4403      	add	r3, r0
 800741a:	4405      	add	r5, r0
 800741c:	9306      	str	r3, [sp, #24]
 800741e:	9b05      	ldr	r3, [sp, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dd05      	ble.n	8007430 <_dtoa_r+0x828>
 8007424:	4651      	mov	r1, sl
 8007426:	461a      	mov	r2, r3
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fd39 	bl	8007ea0 <__lshift>
 800742e:	4682      	mov	sl, r0
 8007430:	9b06      	ldr	r3, [sp, #24]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dd05      	ble.n	8007442 <_dtoa_r+0x83a>
 8007436:	4631      	mov	r1, r6
 8007438:	461a      	mov	r2, r3
 800743a:	4620      	mov	r0, r4
 800743c:	f000 fd30 	bl	8007ea0 <__lshift>
 8007440:	4606      	mov	r6, r0
 8007442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007444:	2b00      	cmp	r3, #0
 8007446:	d072      	beq.n	800752e <_dtoa_r+0x926>
 8007448:	4631      	mov	r1, r6
 800744a:	4650      	mov	r0, sl
 800744c:	f000 fd94 	bl	8007f78 <__mcmp>
 8007450:	2800      	cmp	r0, #0
 8007452:	da6c      	bge.n	800752e <_dtoa_r+0x926>
 8007454:	2300      	movs	r3, #0
 8007456:	4651      	mov	r1, sl
 8007458:	220a      	movs	r2, #10
 800745a:	4620      	mov	r0, r4
 800745c:	f000 fb28 	bl	8007ab0 <__multadd>
 8007460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007462:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007466:	4682      	mov	sl, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 81b0 	beq.w	80077ce <_dtoa_r+0xbc6>
 800746e:	2300      	movs	r3, #0
 8007470:	4639      	mov	r1, r7
 8007472:	220a      	movs	r2, #10
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fb1b 	bl	8007ab0 <__multadd>
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	4607      	mov	r7, r0
 8007480:	f300 8096 	bgt.w	80075b0 <_dtoa_r+0x9a8>
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	2b02      	cmp	r3, #2
 8007488:	dc59      	bgt.n	800753e <_dtoa_r+0x936>
 800748a:	e091      	b.n	80075b0 <_dtoa_r+0x9a8>
 800748c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800748e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007492:	e758      	b.n	8007346 <_dtoa_r+0x73e>
 8007494:	9b04      	ldr	r3, [sp, #16]
 8007496:	1e5e      	subs	r6, r3, #1
 8007498:	9b08      	ldr	r3, [sp, #32]
 800749a:	42b3      	cmp	r3, r6
 800749c:	bfbf      	itttt	lt
 800749e:	9b08      	ldrlt	r3, [sp, #32]
 80074a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80074a2:	9608      	strlt	r6, [sp, #32]
 80074a4:	1af3      	sublt	r3, r6, r3
 80074a6:	bfb4      	ite	lt
 80074a8:	18d2      	addlt	r2, r2, r3
 80074aa:	1b9e      	subge	r6, r3, r6
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	bfbc      	itt	lt
 80074b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80074b2:	2600      	movlt	r6, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bfb7      	itett	lt
 80074b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80074bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80074c0:	1a9d      	sublt	r5, r3, r2
 80074c2:	2300      	movlt	r3, #0
 80074c4:	e741      	b.n	800734a <_dtoa_r+0x742>
 80074c6:	9e08      	ldr	r6, [sp, #32]
 80074c8:	9d05      	ldr	r5, [sp, #20]
 80074ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074cc:	e748      	b.n	8007360 <_dtoa_r+0x758>
 80074ce:	9a08      	ldr	r2, [sp, #32]
 80074d0:	e770      	b.n	80073b4 <_dtoa_r+0x7ac>
 80074d2:	9b07      	ldr	r3, [sp, #28]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	dc19      	bgt.n	800750c <_dtoa_r+0x904>
 80074d8:	9b02      	ldr	r3, [sp, #8]
 80074da:	b9bb      	cbnz	r3, 800750c <_dtoa_r+0x904>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e2:	b99b      	cbnz	r3, 800750c <_dtoa_r+0x904>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ea:	0d1b      	lsrs	r3, r3, #20
 80074ec:	051b      	lsls	r3, r3, #20
 80074ee:	b183      	cbz	r3, 8007512 <_dtoa_r+0x90a>
 80074f0:	9b05      	ldr	r3, [sp, #20]
 80074f2:	3301      	adds	r3, #1
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	9b06      	ldr	r3, [sp, #24]
 80074f8:	3301      	adds	r3, #1
 80074fa:	9306      	str	r3, [sp, #24]
 80074fc:	f04f 0801 	mov.w	r8, #1
 8007500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007502:	2b00      	cmp	r3, #0
 8007504:	f47f af6f 	bne.w	80073e6 <_dtoa_r+0x7de>
 8007508:	2001      	movs	r0, #1
 800750a:	e774      	b.n	80073f6 <_dtoa_r+0x7ee>
 800750c:	f04f 0800 	mov.w	r8, #0
 8007510:	e7f6      	b.n	8007500 <_dtoa_r+0x8f8>
 8007512:	4698      	mov	r8, r3
 8007514:	e7f4      	b.n	8007500 <_dtoa_r+0x8f8>
 8007516:	d082      	beq.n	800741e <_dtoa_r+0x816>
 8007518:	9a05      	ldr	r2, [sp, #20]
 800751a:	331c      	adds	r3, #28
 800751c:	441a      	add	r2, r3
 800751e:	9205      	str	r2, [sp, #20]
 8007520:	9a06      	ldr	r2, [sp, #24]
 8007522:	441a      	add	r2, r3
 8007524:	441d      	add	r5, r3
 8007526:	9206      	str	r2, [sp, #24]
 8007528:	e779      	b.n	800741e <_dtoa_r+0x816>
 800752a:	4603      	mov	r3, r0
 800752c:	e7f4      	b.n	8007518 <_dtoa_r+0x910>
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	dc37      	bgt.n	80075a4 <_dtoa_r+0x99c>
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	2b02      	cmp	r3, #2
 8007538:	dd34      	ble.n	80075a4 <_dtoa_r+0x99c>
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	9b01      	ldr	r3, [sp, #4]
 8007540:	b963      	cbnz	r3, 800755c <_dtoa_r+0x954>
 8007542:	4631      	mov	r1, r6
 8007544:	2205      	movs	r2, #5
 8007546:	4620      	mov	r0, r4
 8007548:	f000 fab2 	bl	8007ab0 <__multadd>
 800754c:	4601      	mov	r1, r0
 800754e:	4606      	mov	r6, r0
 8007550:	4650      	mov	r0, sl
 8007552:	f000 fd11 	bl	8007f78 <__mcmp>
 8007556:	2800      	cmp	r0, #0
 8007558:	f73f adbb 	bgt.w	80070d2 <_dtoa_r+0x4ca>
 800755c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755e:	9d00      	ldr	r5, [sp, #0]
 8007560:	ea6f 0b03 	mvn.w	fp, r3
 8007564:	f04f 0800 	mov.w	r8, #0
 8007568:	4631      	mov	r1, r6
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fa7e 	bl	8007a6c <_Bfree>
 8007570:	2f00      	cmp	r7, #0
 8007572:	f43f aeab 	beq.w	80072cc <_dtoa_r+0x6c4>
 8007576:	f1b8 0f00 	cmp.w	r8, #0
 800757a:	d005      	beq.n	8007588 <_dtoa_r+0x980>
 800757c:	45b8      	cmp	r8, r7
 800757e:	d003      	beq.n	8007588 <_dtoa_r+0x980>
 8007580:	4641      	mov	r1, r8
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fa72 	bl	8007a6c <_Bfree>
 8007588:	4639      	mov	r1, r7
 800758a:	4620      	mov	r0, r4
 800758c:	f000 fa6e 	bl	8007a6c <_Bfree>
 8007590:	e69c      	b.n	80072cc <_dtoa_r+0x6c4>
 8007592:	2600      	movs	r6, #0
 8007594:	4637      	mov	r7, r6
 8007596:	e7e1      	b.n	800755c <_dtoa_r+0x954>
 8007598:	46bb      	mov	fp, r7
 800759a:	4637      	mov	r7, r6
 800759c:	e599      	b.n	80070d2 <_dtoa_r+0x4ca>
 800759e:	bf00      	nop
 80075a0:	40240000 	.word	0x40240000
 80075a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80c8 	beq.w	800773c <_dtoa_r+0xb34>
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	dd05      	ble.n	80075c0 <_dtoa_r+0x9b8>
 80075b4:	4639      	mov	r1, r7
 80075b6:	462a      	mov	r2, r5
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fc71 	bl	8007ea0 <__lshift>
 80075be:	4607      	mov	r7, r0
 80075c0:	f1b8 0f00 	cmp.w	r8, #0
 80075c4:	d05b      	beq.n	800767e <_dtoa_r+0xa76>
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fa0f 	bl	80079ec <_Balloc>
 80075ce:	4605      	mov	r5, r0
 80075d0:	b928      	cbnz	r0, 80075de <_dtoa_r+0x9d6>
 80075d2:	4b83      	ldr	r3, [pc, #524]	; (80077e0 <_dtoa_r+0xbd8>)
 80075d4:	4602      	mov	r2, r0
 80075d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80075da:	f7ff bb2e 	b.w	8006c3a <_dtoa_r+0x32>
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	3202      	adds	r2, #2
 80075e2:	0092      	lsls	r2, r2, #2
 80075e4:	f107 010c 	add.w	r1, r7, #12
 80075e8:	300c      	adds	r0, #12
 80075ea:	f7ff fa70 	bl	8006ace <memcpy>
 80075ee:	2201      	movs	r2, #1
 80075f0:	4629      	mov	r1, r5
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fc54 	bl	8007ea0 <__lshift>
 80075f8:	9b00      	ldr	r3, [sp, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007602:	4413      	add	r3, r2
 8007604:	9308      	str	r3, [sp, #32]
 8007606:	9b02      	ldr	r3, [sp, #8]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	46b8      	mov	r8, r7
 800760e:	9306      	str	r3, [sp, #24]
 8007610:	4607      	mov	r7, r0
 8007612:	9b04      	ldr	r3, [sp, #16]
 8007614:	4631      	mov	r1, r6
 8007616:	3b01      	subs	r3, #1
 8007618:	4650      	mov	r0, sl
 800761a:	9301      	str	r3, [sp, #4]
 800761c:	f7ff fa6c 	bl	8006af8 <quorem>
 8007620:	4641      	mov	r1, r8
 8007622:	9002      	str	r0, [sp, #8]
 8007624:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007628:	4650      	mov	r0, sl
 800762a:	f000 fca5 	bl	8007f78 <__mcmp>
 800762e:	463a      	mov	r2, r7
 8007630:	9005      	str	r0, [sp, #20]
 8007632:	4631      	mov	r1, r6
 8007634:	4620      	mov	r0, r4
 8007636:	f000 fcbb 	bl	8007fb0 <__mdiff>
 800763a:	68c2      	ldr	r2, [r0, #12]
 800763c:	4605      	mov	r5, r0
 800763e:	bb02      	cbnz	r2, 8007682 <_dtoa_r+0xa7a>
 8007640:	4601      	mov	r1, r0
 8007642:	4650      	mov	r0, sl
 8007644:	f000 fc98 	bl	8007f78 <__mcmp>
 8007648:	4602      	mov	r2, r0
 800764a:	4629      	mov	r1, r5
 800764c:	4620      	mov	r0, r4
 800764e:	9209      	str	r2, [sp, #36]	; 0x24
 8007650:	f000 fa0c 	bl	8007a6c <_Bfree>
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007658:	9d04      	ldr	r5, [sp, #16]
 800765a:	ea43 0102 	orr.w	r1, r3, r2
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	4319      	orrs	r1, r3
 8007662:	d110      	bne.n	8007686 <_dtoa_r+0xa7e>
 8007664:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007668:	d029      	beq.n	80076be <_dtoa_r+0xab6>
 800766a:	9b05      	ldr	r3, [sp, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	dd02      	ble.n	8007676 <_dtoa_r+0xa6e>
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	f883 9000 	strb.w	r9, [r3]
 800767c:	e774      	b.n	8007568 <_dtoa_r+0x960>
 800767e:	4638      	mov	r0, r7
 8007680:	e7ba      	b.n	80075f8 <_dtoa_r+0x9f0>
 8007682:	2201      	movs	r2, #1
 8007684:	e7e1      	b.n	800764a <_dtoa_r+0xa42>
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	db04      	blt.n	8007696 <_dtoa_r+0xa8e>
 800768c:	9907      	ldr	r1, [sp, #28]
 800768e:	430b      	orrs	r3, r1
 8007690:	9906      	ldr	r1, [sp, #24]
 8007692:	430b      	orrs	r3, r1
 8007694:	d120      	bne.n	80076d8 <_dtoa_r+0xad0>
 8007696:	2a00      	cmp	r2, #0
 8007698:	dded      	ble.n	8007676 <_dtoa_r+0xa6e>
 800769a:	4651      	mov	r1, sl
 800769c:	2201      	movs	r2, #1
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 fbfe 	bl	8007ea0 <__lshift>
 80076a4:	4631      	mov	r1, r6
 80076a6:	4682      	mov	sl, r0
 80076a8:	f000 fc66 	bl	8007f78 <__mcmp>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	dc03      	bgt.n	80076b8 <_dtoa_r+0xab0>
 80076b0:	d1e1      	bne.n	8007676 <_dtoa_r+0xa6e>
 80076b2:	f019 0f01 	tst.w	r9, #1
 80076b6:	d0de      	beq.n	8007676 <_dtoa_r+0xa6e>
 80076b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076bc:	d1d8      	bne.n	8007670 <_dtoa_r+0xa68>
 80076be:	9a01      	ldr	r2, [sp, #4]
 80076c0:	2339      	movs	r3, #57	; 0x39
 80076c2:	7013      	strb	r3, [r2, #0]
 80076c4:	462b      	mov	r3, r5
 80076c6:	461d      	mov	r5, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076ce:	2a39      	cmp	r2, #57	; 0x39
 80076d0:	d06c      	beq.n	80077ac <_dtoa_r+0xba4>
 80076d2:	3201      	adds	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e747      	b.n	8007568 <_dtoa_r+0x960>
 80076d8:	2a00      	cmp	r2, #0
 80076da:	dd07      	ble.n	80076ec <_dtoa_r+0xae4>
 80076dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076e0:	d0ed      	beq.n	80076be <_dtoa_r+0xab6>
 80076e2:	9a01      	ldr	r2, [sp, #4]
 80076e4:	f109 0301 	add.w	r3, r9, #1
 80076e8:	7013      	strb	r3, [r2, #0]
 80076ea:	e73d      	b.n	8007568 <_dtoa_r+0x960>
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	9a08      	ldr	r2, [sp, #32]
 80076f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d043      	beq.n	8007780 <_dtoa_r+0xb78>
 80076f8:	4651      	mov	r1, sl
 80076fa:	2300      	movs	r3, #0
 80076fc:	220a      	movs	r2, #10
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 f9d6 	bl	8007ab0 <__multadd>
 8007704:	45b8      	cmp	r8, r7
 8007706:	4682      	mov	sl, r0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	f04f 020a 	mov.w	r2, #10
 8007710:	4641      	mov	r1, r8
 8007712:	4620      	mov	r0, r4
 8007714:	d107      	bne.n	8007726 <_dtoa_r+0xb1e>
 8007716:	f000 f9cb 	bl	8007ab0 <__multadd>
 800771a:	4680      	mov	r8, r0
 800771c:	4607      	mov	r7, r0
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	3301      	adds	r3, #1
 8007722:	9304      	str	r3, [sp, #16]
 8007724:	e775      	b.n	8007612 <_dtoa_r+0xa0a>
 8007726:	f000 f9c3 	bl	8007ab0 <__multadd>
 800772a:	4639      	mov	r1, r7
 800772c:	4680      	mov	r8, r0
 800772e:	2300      	movs	r3, #0
 8007730:	220a      	movs	r2, #10
 8007732:	4620      	mov	r0, r4
 8007734:	f000 f9bc 	bl	8007ab0 <__multadd>
 8007738:	4607      	mov	r7, r0
 800773a:	e7f0      	b.n	800771e <_dtoa_r+0xb16>
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	9d00      	ldr	r5, [sp, #0]
 8007742:	4631      	mov	r1, r6
 8007744:	4650      	mov	r0, sl
 8007746:	f7ff f9d7 	bl	8006af8 <quorem>
 800774a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	f805 9b01 	strb.w	r9, [r5], #1
 8007754:	1aea      	subs	r2, r5, r3
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	4293      	cmp	r3, r2
 800775a:	dd07      	ble.n	800776c <_dtoa_r+0xb64>
 800775c:	4651      	mov	r1, sl
 800775e:	2300      	movs	r3, #0
 8007760:	220a      	movs	r2, #10
 8007762:	4620      	mov	r0, r4
 8007764:	f000 f9a4 	bl	8007ab0 <__multadd>
 8007768:	4682      	mov	sl, r0
 800776a:	e7ea      	b.n	8007742 <_dtoa_r+0xb3a>
 800776c:	9b01      	ldr	r3, [sp, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	bfc8      	it	gt
 8007772:	461d      	movgt	r5, r3
 8007774:	9b00      	ldr	r3, [sp, #0]
 8007776:	bfd8      	it	le
 8007778:	2501      	movle	r5, #1
 800777a:	441d      	add	r5, r3
 800777c:	f04f 0800 	mov.w	r8, #0
 8007780:	4651      	mov	r1, sl
 8007782:	2201      	movs	r2, #1
 8007784:	4620      	mov	r0, r4
 8007786:	f000 fb8b 	bl	8007ea0 <__lshift>
 800778a:	4631      	mov	r1, r6
 800778c:	4682      	mov	sl, r0
 800778e:	f000 fbf3 	bl	8007f78 <__mcmp>
 8007792:	2800      	cmp	r0, #0
 8007794:	dc96      	bgt.n	80076c4 <_dtoa_r+0xabc>
 8007796:	d102      	bne.n	800779e <_dtoa_r+0xb96>
 8007798:	f019 0f01 	tst.w	r9, #1
 800779c:	d192      	bne.n	80076c4 <_dtoa_r+0xabc>
 800779e:	462b      	mov	r3, r5
 80077a0:	461d      	mov	r5, r3
 80077a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a6:	2a30      	cmp	r2, #48	; 0x30
 80077a8:	d0fa      	beq.n	80077a0 <_dtoa_r+0xb98>
 80077aa:	e6dd      	b.n	8007568 <_dtoa_r+0x960>
 80077ac:	9a00      	ldr	r2, [sp, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d189      	bne.n	80076c6 <_dtoa_r+0xabe>
 80077b2:	f10b 0b01 	add.w	fp, fp, #1
 80077b6:	2331      	movs	r3, #49	; 0x31
 80077b8:	e796      	b.n	80076e8 <_dtoa_r+0xae0>
 80077ba:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <_dtoa_r+0xbdc>)
 80077bc:	f7ff ba99 	b.w	8006cf2 <_dtoa_r+0xea>
 80077c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f47f aa6d 	bne.w	8006ca2 <_dtoa_r+0x9a>
 80077c8:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <_dtoa_r+0xbe0>)
 80077ca:	f7ff ba92 	b.w	8006cf2 <_dtoa_r+0xea>
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dcb5      	bgt.n	8007740 <_dtoa_r+0xb38>
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	f73f aeb1 	bgt.w	800753e <_dtoa_r+0x936>
 80077dc:	e7b0      	b.n	8007740 <_dtoa_r+0xb38>
 80077de:	bf00      	nop
 80077e0:	0800a338 	.word	0x0800a338
 80077e4:	0800a293 	.word	0x0800a293
 80077e8:	0800a2bc 	.word	0x0800a2bc

080077ec <_free_r>:
 80077ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ee:	2900      	cmp	r1, #0
 80077f0:	d044      	beq.n	800787c <_free_r+0x90>
 80077f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f6:	9001      	str	r0, [sp, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f1a1 0404 	sub.w	r4, r1, #4
 80077fe:	bfb8      	it	lt
 8007800:	18e4      	addlt	r4, r4, r3
 8007802:	f000 f8e7 	bl	80079d4 <__malloc_lock>
 8007806:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <_free_r+0x94>)
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	b933      	cbnz	r3, 800781c <_free_r+0x30>
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	6014      	str	r4, [r2, #0]
 8007812:	b003      	add	sp, #12
 8007814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007818:	f000 b8e2 	b.w	80079e0 <__malloc_unlock>
 800781c:	42a3      	cmp	r3, r4
 800781e:	d908      	bls.n	8007832 <_free_r+0x46>
 8007820:	6825      	ldr	r5, [r4, #0]
 8007822:	1961      	adds	r1, r4, r5
 8007824:	428b      	cmp	r3, r1
 8007826:	bf01      	itttt	eq
 8007828:	6819      	ldreq	r1, [r3, #0]
 800782a:	685b      	ldreq	r3, [r3, #4]
 800782c:	1949      	addeq	r1, r1, r5
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	e7ed      	b.n	800780e <_free_r+0x22>
 8007832:	461a      	mov	r2, r3
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b10b      	cbz	r3, 800783c <_free_r+0x50>
 8007838:	42a3      	cmp	r3, r4
 800783a:	d9fa      	bls.n	8007832 <_free_r+0x46>
 800783c:	6811      	ldr	r1, [r2, #0]
 800783e:	1855      	adds	r5, r2, r1
 8007840:	42a5      	cmp	r5, r4
 8007842:	d10b      	bne.n	800785c <_free_r+0x70>
 8007844:	6824      	ldr	r4, [r4, #0]
 8007846:	4421      	add	r1, r4
 8007848:	1854      	adds	r4, r2, r1
 800784a:	42a3      	cmp	r3, r4
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	d1e0      	bne.n	8007812 <_free_r+0x26>
 8007850:	681c      	ldr	r4, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	6053      	str	r3, [r2, #4]
 8007856:	440c      	add	r4, r1
 8007858:	6014      	str	r4, [r2, #0]
 800785a:	e7da      	b.n	8007812 <_free_r+0x26>
 800785c:	d902      	bls.n	8007864 <_free_r+0x78>
 800785e:	230c      	movs	r3, #12
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	e7d6      	b.n	8007812 <_free_r+0x26>
 8007864:	6825      	ldr	r5, [r4, #0]
 8007866:	1961      	adds	r1, r4, r5
 8007868:	428b      	cmp	r3, r1
 800786a:	bf04      	itt	eq
 800786c:	6819      	ldreq	r1, [r3, #0]
 800786e:	685b      	ldreq	r3, [r3, #4]
 8007870:	6063      	str	r3, [r4, #4]
 8007872:	bf04      	itt	eq
 8007874:	1949      	addeq	r1, r1, r5
 8007876:	6021      	streq	r1, [r4, #0]
 8007878:	6054      	str	r4, [r2, #4]
 800787a:	e7ca      	b.n	8007812 <_free_r+0x26>
 800787c:	b003      	add	sp, #12
 800787e:	bd30      	pop	{r4, r5, pc}
 8007880:	20000400 	.word	0x20000400

08007884 <malloc>:
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <malloc+0xc>)
 8007886:	4601      	mov	r1, r0
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f000 b823 	b.w	80078d4 <_malloc_r>
 800788e:	bf00      	nop
 8007890:	20000078 	.word	0x20000078

08007894 <sbrk_aligned>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	4e0e      	ldr	r6, [pc, #56]	; (80078d0 <sbrk_aligned+0x3c>)
 8007898:	460c      	mov	r4, r1
 800789a:	6831      	ldr	r1, [r6, #0]
 800789c:	4605      	mov	r5, r0
 800789e:	b911      	cbnz	r1, 80078a6 <sbrk_aligned+0x12>
 80078a0:	f001 fe1a 	bl	80094d8 <_sbrk_r>
 80078a4:	6030      	str	r0, [r6, #0]
 80078a6:	4621      	mov	r1, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f001 fe15 	bl	80094d8 <_sbrk_r>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	d00a      	beq.n	80078c8 <sbrk_aligned+0x34>
 80078b2:	1cc4      	adds	r4, r0, #3
 80078b4:	f024 0403 	bic.w	r4, r4, #3
 80078b8:	42a0      	cmp	r0, r4
 80078ba:	d007      	beq.n	80078cc <sbrk_aligned+0x38>
 80078bc:	1a21      	subs	r1, r4, r0
 80078be:	4628      	mov	r0, r5
 80078c0:	f001 fe0a 	bl	80094d8 <_sbrk_r>
 80078c4:	3001      	adds	r0, #1
 80078c6:	d101      	bne.n	80078cc <sbrk_aligned+0x38>
 80078c8:	f04f 34ff 	mov.w	r4, #4294967295
 80078cc:	4620      	mov	r0, r4
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	20000404 	.word	0x20000404

080078d4 <_malloc_r>:
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	1ccd      	adds	r5, r1, #3
 80078da:	f025 0503 	bic.w	r5, r5, #3
 80078de:	3508      	adds	r5, #8
 80078e0:	2d0c      	cmp	r5, #12
 80078e2:	bf38      	it	cc
 80078e4:	250c      	movcc	r5, #12
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	4607      	mov	r7, r0
 80078ea:	db01      	blt.n	80078f0 <_malloc_r+0x1c>
 80078ec:	42a9      	cmp	r1, r5
 80078ee:	d905      	bls.n	80078fc <_malloc_r+0x28>
 80078f0:	230c      	movs	r3, #12
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	2600      	movs	r6, #0
 80078f6:	4630      	mov	r0, r6
 80078f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079d0 <_malloc_r+0xfc>
 8007900:	f000 f868 	bl	80079d4 <__malloc_lock>
 8007904:	f8d8 3000 	ldr.w	r3, [r8]
 8007908:	461c      	mov	r4, r3
 800790a:	bb5c      	cbnz	r4, 8007964 <_malloc_r+0x90>
 800790c:	4629      	mov	r1, r5
 800790e:	4638      	mov	r0, r7
 8007910:	f7ff ffc0 	bl	8007894 <sbrk_aligned>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	4604      	mov	r4, r0
 8007918:	d155      	bne.n	80079c6 <_malloc_r+0xf2>
 800791a:	f8d8 4000 	ldr.w	r4, [r8]
 800791e:	4626      	mov	r6, r4
 8007920:	2e00      	cmp	r6, #0
 8007922:	d145      	bne.n	80079b0 <_malloc_r+0xdc>
 8007924:	2c00      	cmp	r4, #0
 8007926:	d048      	beq.n	80079ba <_malloc_r+0xe6>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	4631      	mov	r1, r6
 800792c:	4638      	mov	r0, r7
 800792e:	eb04 0903 	add.w	r9, r4, r3
 8007932:	f001 fdd1 	bl	80094d8 <_sbrk_r>
 8007936:	4581      	cmp	r9, r0
 8007938:	d13f      	bne.n	80079ba <_malloc_r+0xe6>
 800793a:	6821      	ldr	r1, [r4, #0]
 800793c:	1a6d      	subs	r5, r5, r1
 800793e:	4629      	mov	r1, r5
 8007940:	4638      	mov	r0, r7
 8007942:	f7ff ffa7 	bl	8007894 <sbrk_aligned>
 8007946:	3001      	adds	r0, #1
 8007948:	d037      	beq.n	80079ba <_malloc_r+0xe6>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	442b      	add	r3, r5
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	f8d8 3000 	ldr.w	r3, [r8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d038      	beq.n	80079ca <_malloc_r+0xf6>
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	42a2      	cmp	r2, r4
 800795c:	d12b      	bne.n	80079b6 <_malloc_r+0xe2>
 800795e:	2200      	movs	r2, #0
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	e00f      	b.n	8007984 <_malloc_r+0xb0>
 8007964:	6822      	ldr	r2, [r4, #0]
 8007966:	1b52      	subs	r2, r2, r5
 8007968:	d41f      	bmi.n	80079aa <_malloc_r+0xd6>
 800796a:	2a0b      	cmp	r2, #11
 800796c:	d917      	bls.n	800799e <_malloc_r+0xca>
 800796e:	1961      	adds	r1, r4, r5
 8007970:	42a3      	cmp	r3, r4
 8007972:	6025      	str	r5, [r4, #0]
 8007974:	bf18      	it	ne
 8007976:	6059      	strne	r1, [r3, #4]
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	bf08      	it	eq
 800797c:	f8c8 1000 	streq.w	r1, [r8]
 8007980:	5162      	str	r2, [r4, r5]
 8007982:	604b      	str	r3, [r1, #4]
 8007984:	4638      	mov	r0, r7
 8007986:	f104 060b 	add.w	r6, r4, #11
 800798a:	f000 f829 	bl	80079e0 <__malloc_unlock>
 800798e:	f026 0607 	bic.w	r6, r6, #7
 8007992:	1d23      	adds	r3, r4, #4
 8007994:	1af2      	subs	r2, r6, r3
 8007996:	d0ae      	beq.n	80078f6 <_malloc_r+0x22>
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	50a3      	str	r3, [r4, r2]
 800799c:	e7ab      	b.n	80078f6 <_malloc_r+0x22>
 800799e:	42a3      	cmp	r3, r4
 80079a0:	6862      	ldr	r2, [r4, #4]
 80079a2:	d1dd      	bne.n	8007960 <_malloc_r+0x8c>
 80079a4:	f8c8 2000 	str.w	r2, [r8]
 80079a8:	e7ec      	b.n	8007984 <_malloc_r+0xb0>
 80079aa:	4623      	mov	r3, r4
 80079ac:	6864      	ldr	r4, [r4, #4]
 80079ae:	e7ac      	b.n	800790a <_malloc_r+0x36>
 80079b0:	4634      	mov	r4, r6
 80079b2:	6876      	ldr	r6, [r6, #4]
 80079b4:	e7b4      	b.n	8007920 <_malloc_r+0x4c>
 80079b6:	4613      	mov	r3, r2
 80079b8:	e7cc      	b.n	8007954 <_malloc_r+0x80>
 80079ba:	230c      	movs	r3, #12
 80079bc:	603b      	str	r3, [r7, #0]
 80079be:	4638      	mov	r0, r7
 80079c0:	f000 f80e 	bl	80079e0 <__malloc_unlock>
 80079c4:	e797      	b.n	80078f6 <_malloc_r+0x22>
 80079c6:	6025      	str	r5, [r4, #0]
 80079c8:	e7dc      	b.n	8007984 <_malloc_r+0xb0>
 80079ca:	605b      	str	r3, [r3, #4]
 80079cc:	deff      	udf	#255	; 0xff
 80079ce:	bf00      	nop
 80079d0:	20000400 	.word	0x20000400

080079d4 <__malloc_lock>:
 80079d4:	4801      	ldr	r0, [pc, #4]	; (80079dc <__malloc_lock+0x8>)
 80079d6:	f7ff b878 	b.w	8006aca <__retarget_lock_acquire_recursive>
 80079da:	bf00      	nop
 80079dc:	200003fc 	.word	0x200003fc

080079e0 <__malloc_unlock>:
 80079e0:	4801      	ldr	r0, [pc, #4]	; (80079e8 <__malloc_unlock+0x8>)
 80079e2:	f7ff b873 	b.w	8006acc <__retarget_lock_release_recursive>
 80079e6:	bf00      	nop
 80079e8:	200003fc 	.word	0x200003fc

080079ec <_Balloc>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	69c6      	ldr	r6, [r0, #28]
 80079f0:	4604      	mov	r4, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	b976      	cbnz	r6, 8007a14 <_Balloc+0x28>
 80079f6:	2010      	movs	r0, #16
 80079f8:	f7ff ff44 	bl	8007884 <malloc>
 80079fc:	4602      	mov	r2, r0
 80079fe:	61e0      	str	r0, [r4, #28]
 8007a00:	b920      	cbnz	r0, 8007a0c <_Balloc+0x20>
 8007a02:	4b18      	ldr	r3, [pc, #96]	; (8007a64 <_Balloc+0x78>)
 8007a04:	4818      	ldr	r0, [pc, #96]	; (8007a68 <_Balloc+0x7c>)
 8007a06:	216b      	movs	r1, #107	; 0x6b
 8007a08:	f001 fd7e 	bl	8009508 <__assert_func>
 8007a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a10:	6006      	str	r6, [r0, #0]
 8007a12:	60c6      	str	r6, [r0, #12]
 8007a14:	69e6      	ldr	r6, [r4, #28]
 8007a16:	68f3      	ldr	r3, [r6, #12]
 8007a18:	b183      	cbz	r3, 8007a3c <_Balloc+0x50>
 8007a1a:	69e3      	ldr	r3, [r4, #28]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a22:	b9b8      	cbnz	r0, 8007a54 <_Balloc+0x68>
 8007a24:	2101      	movs	r1, #1
 8007a26:	fa01 f605 	lsl.w	r6, r1, r5
 8007a2a:	1d72      	adds	r2, r6, #5
 8007a2c:	0092      	lsls	r2, r2, #2
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f001 fd88 	bl	8009544 <_calloc_r>
 8007a34:	b160      	cbz	r0, 8007a50 <_Balloc+0x64>
 8007a36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a3a:	e00e      	b.n	8007a5a <_Balloc+0x6e>
 8007a3c:	2221      	movs	r2, #33	; 0x21
 8007a3e:	2104      	movs	r1, #4
 8007a40:	4620      	mov	r0, r4
 8007a42:	f001 fd7f 	bl	8009544 <_calloc_r>
 8007a46:	69e3      	ldr	r3, [r4, #28]
 8007a48:	60f0      	str	r0, [r6, #12]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e4      	bne.n	8007a1a <_Balloc+0x2e>
 8007a50:	2000      	movs	r0, #0
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	6802      	ldr	r2, [r0, #0]
 8007a56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a60:	e7f7      	b.n	8007a52 <_Balloc+0x66>
 8007a62:	bf00      	nop
 8007a64:	0800a2c9 	.word	0x0800a2c9
 8007a68:	0800a349 	.word	0x0800a349

08007a6c <_Bfree>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	69c6      	ldr	r6, [r0, #28]
 8007a70:	4605      	mov	r5, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	b976      	cbnz	r6, 8007a94 <_Bfree+0x28>
 8007a76:	2010      	movs	r0, #16
 8007a78:	f7ff ff04 	bl	8007884 <malloc>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	61e8      	str	r0, [r5, #28]
 8007a80:	b920      	cbnz	r0, 8007a8c <_Bfree+0x20>
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <_Bfree+0x3c>)
 8007a84:	4809      	ldr	r0, [pc, #36]	; (8007aac <_Bfree+0x40>)
 8007a86:	218f      	movs	r1, #143	; 0x8f
 8007a88:	f001 fd3e 	bl	8009508 <__assert_func>
 8007a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a90:	6006      	str	r6, [r0, #0]
 8007a92:	60c6      	str	r6, [r0, #12]
 8007a94:	b13c      	cbz	r4, 8007aa6 <_Bfree+0x3a>
 8007a96:	69eb      	ldr	r3, [r5, #28]
 8007a98:	6862      	ldr	r2, [r4, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007aa0:	6021      	str	r1, [r4, #0]
 8007aa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	0800a2c9 	.word	0x0800a2c9
 8007aac:	0800a349 	.word	0x0800a349

08007ab0 <__multadd>:
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	690d      	ldr	r5, [r1, #16]
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	461e      	mov	r6, r3
 8007abc:	f101 0c14 	add.w	ip, r1, #20
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ac6:	b299      	uxth	r1, r3
 8007ac8:	fb02 6101 	mla	r1, r2, r1, r6
 8007acc:	0c1e      	lsrs	r6, r3, #16
 8007ace:	0c0b      	lsrs	r3, r1, #16
 8007ad0:	fb02 3306 	mla	r3, r2, r6, r3
 8007ad4:	b289      	uxth	r1, r1
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007adc:	4285      	cmp	r5, r0
 8007ade:	f84c 1b04 	str.w	r1, [ip], #4
 8007ae2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ae6:	dcec      	bgt.n	8007ac2 <__multadd+0x12>
 8007ae8:	b30e      	cbz	r6, 8007b2e <__multadd+0x7e>
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	42ab      	cmp	r3, r5
 8007aee:	dc19      	bgt.n	8007b24 <__multadd+0x74>
 8007af0:	6861      	ldr	r1, [r4, #4]
 8007af2:	4638      	mov	r0, r7
 8007af4:	3101      	adds	r1, #1
 8007af6:	f7ff ff79 	bl	80079ec <_Balloc>
 8007afa:	4680      	mov	r8, r0
 8007afc:	b928      	cbnz	r0, 8007b0a <__multadd+0x5a>
 8007afe:	4602      	mov	r2, r0
 8007b00:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <__multadd+0x84>)
 8007b02:	480d      	ldr	r0, [pc, #52]	; (8007b38 <__multadd+0x88>)
 8007b04:	21ba      	movs	r1, #186	; 0xba
 8007b06:	f001 fcff 	bl	8009508 <__assert_func>
 8007b0a:	6922      	ldr	r2, [r4, #16]
 8007b0c:	3202      	adds	r2, #2
 8007b0e:	f104 010c 	add.w	r1, r4, #12
 8007b12:	0092      	lsls	r2, r2, #2
 8007b14:	300c      	adds	r0, #12
 8007b16:	f7fe ffda 	bl	8006ace <memcpy>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7ff ffa5 	bl	8007a6c <_Bfree>
 8007b22:	4644      	mov	r4, r8
 8007b24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b28:	3501      	adds	r5, #1
 8007b2a:	615e      	str	r6, [r3, #20]
 8007b2c:	6125      	str	r5, [r4, #16]
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	0800a338 	.word	0x0800a338
 8007b38:	0800a349 	.word	0x0800a349

08007b3c <__s2b>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	460c      	mov	r4, r1
 8007b42:	4615      	mov	r5, r2
 8007b44:	461f      	mov	r7, r3
 8007b46:	2209      	movs	r2, #9
 8007b48:	3308      	adds	r3, #8
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b50:	2100      	movs	r1, #0
 8007b52:	2201      	movs	r2, #1
 8007b54:	429a      	cmp	r2, r3
 8007b56:	db09      	blt.n	8007b6c <__s2b+0x30>
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7ff ff47 	bl	80079ec <_Balloc>
 8007b5e:	b940      	cbnz	r0, 8007b72 <__s2b+0x36>
 8007b60:	4602      	mov	r2, r0
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <__s2b+0x8c>)
 8007b64:	4819      	ldr	r0, [pc, #100]	; (8007bcc <__s2b+0x90>)
 8007b66:	21d3      	movs	r1, #211	; 0xd3
 8007b68:	f001 fcce 	bl	8009508 <__assert_func>
 8007b6c:	0052      	lsls	r2, r2, #1
 8007b6e:	3101      	adds	r1, #1
 8007b70:	e7f0      	b.n	8007b54 <__s2b+0x18>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	6143      	str	r3, [r0, #20]
 8007b76:	2d09      	cmp	r5, #9
 8007b78:	f04f 0301 	mov.w	r3, #1
 8007b7c:	6103      	str	r3, [r0, #16]
 8007b7e:	dd16      	ble.n	8007bae <__s2b+0x72>
 8007b80:	f104 0909 	add.w	r9, r4, #9
 8007b84:	46c8      	mov	r8, r9
 8007b86:	442c      	add	r4, r5
 8007b88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b8c:	4601      	mov	r1, r0
 8007b8e:	3b30      	subs	r3, #48	; 0x30
 8007b90:	220a      	movs	r2, #10
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7ff ff8c 	bl	8007ab0 <__multadd>
 8007b98:	45a0      	cmp	r8, r4
 8007b9a:	d1f5      	bne.n	8007b88 <__s2b+0x4c>
 8007b9c:	f1a5 0408 	sub.w	r4, r5, #8
 8007ba0:	444c      	add	r4, r9
 8007ba2:	1b2d      	subs	r5, r5, r4
 8007ba4:	1963      	adds	r3, r4, r5
 8007ba6:	42bb      	cmp	r3, r7
 8007ba8:	db04      	blt.n	8007bb4 <__s2b+0x78>
 8007baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bae:	340a      	adds	r4, #10
 8007bb0:	2509      	movs	r5, #9
 8007bb2:	e7f6      	b.n	8007ba2 <__s2b+0x66>
 8007bb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bb8:	4601      	mov	r1, r0
 8007bba:	3b30      	subs	r3, #48	; 0x30
 8007bbc:	220a      	movs	r2, #10
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff ff76 	bl	8007ab0 <__multadd>
 8007bc4:	e7ee      	b.n	8007ba4 <__s2b+0x68>
 8007bc6:	bf00      	nop
 8007bc8:	0800a338 	.word	0x0800a338
 8007bcc:	0800a349 	.word	0x0800a349

08007bd0 <__hi0bits>:
 8007bd0:	0c03      	lsrs	r3, r0, #16
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	b9d3      	cbnz	r3, 8007c0c <__hi0bits+0x3c>
 8007bd6:	0400      	lsls	r0, r0, #16
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bde:	bf04      	itt	eq
 8007be0:	0200      	lsleq	r0, r0, #8
 8007be2:	3308      	addeq	r3, #8
 8007be4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007be8:	bf04      	itt	eq
 8007bea:	0100      	lsleq	r0, r0, #4
 8007bec:	3304      	addeq	r3, #4
 8007bee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bf2:	bf04      	itt	eq
 8007bf4:	0080      	lsleq	r0, r0, #2
 8007bf6:	3302      	addeq	r3, #2
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	db05      	blt.n	8007c08 <__hi0bits+0x38>
 8007bfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c00:	f103 0301 	add.w	r3, r3, #1
 8007c04:	bf08      	it	eq
 8007c06:	2320      	moveq	r3, #32
 8007c08:	4618      	mov	r0, r3
 8007c0a:	4770      	bx	lr
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e7e4      	b.n	8007bda <__hi0bits+0xa>

08007c10 <__lo0bits>:
 8007c10:	6803      	ldr	r3, [r0, #0]
 8007c12:	f013 0207 	ands.w	r2, r3, #7
 8007c16:	d00c      	beq.n	8007c32 <__lo0bits+0x22>
 8007c18:	07d9      	lsls	r1, r3, #31
 8007c1a:	d422      	bmi.n	8007c62 <__lo0bits+0x52>
 8007c1c:	079a      	lsls	r2, r3, #30
 8007c1e:	bf49      	itett	mi
 8007c20:	085b      	lsrmi	r3, r3, #1
 8007c22:	089b      	lsrpl	r3, r3, #2
 8007c24:	6003      	strmi	r3, [r0, #0]
 8007c26:	2201      	movmi	r2, #1
 8007c28:	bf5c      	itt	pl
 8007c2a:	6003      	strpl	r3, [r0, #0]
 8007c2c:	2202      	movpl	r2, #2
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4770      	bx	lr
 8007c32:	b299      	uxth	r1, r3
 8007c34:	b909      	cbnz	r1, 8007c3a <__lo0bits+0x2a>
 8007c36:	0c1b      	lsrs	r3, r3, #16
 8007c38:	2210      	movs	r2, #16
 8007c3a:	b2d9      	uxtb	r1, r3
 8007c3c:	b909      	cbnz	r1, 8007c42 <__lo0bits+0x32>
 8007c3e:	3208      	adds	r2, #8
 8007c40:	0a1b      	lsrs	r3, r3, #8
 8007c42:	0719      	lsls	r1, r3, #28
 8007c44:	bf04      	itt	eq
 8007c46:	091b      	lsreq	r3, r3, #4
 8007c48:	3204      	addeq	r2, #4
 8007c4a:	0799      	lsls	r1, r3, #30
 8007c4c:	bf04      	itt	eq
 8007c4e:	089b      	lsreq	r3, r3, #2
 8007c50:	3202      	addeq	r2, #2
 8007c52:	07d9      	lsls	r1, r3, #31
 8007c54:	d403      	bmi.n	8007c5e <__lo0bits+0x4e>
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	f102 0201 	add.w	r2, r2, #1
 8007c5c:	d003      	beq.n	8007c66 <__lo0bits+0x56>
 8007c5e:	6003      	str	r3, [r0, #0]
 8007c60:	e7e5      	b.n	8007c2e <__lo0bits+0x1e>
 8007c62:	2200      	movs	r2, #0
 8007c64:	e7e3      	b.n	8007c2e <__lo0bits+0x1e>
 8007c66:	2220      	movs	r2, #32
 8007c68:	e7e1      	b.n	8007c2e <__lo0bits+0x1e>
	...

08007c6c <__i2b>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	460c      	mov	r4, r1
 8007c70:	2101      	movs	r1, #1
 8007c72:	f7ff febb 	bl	80079ec <_Balloc>
 8007c76:	4602      	mov	r2, r0
 8007c78:	b928      	cbnz	r0, 8007c86 <__i2b+0x1a>
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <__i2b+0x24>)
 8007c7c:	4805      	ldr	r0, [pc, #20]	; (8007c94 <__i2b+0x28>)
 8007c7e:	f240 1145 	movw	r1, #325	; 0x145
 8007c82:	f001 fc41 	bl	8009508 <__assert_func>
 8007c86:	2301      	movs	r3, #1
 8007c88:	6144      	str	r4, [r0, #20]
 8007c8a:	6103      	str	r3, [r0, #16]
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	0800a338 	.word	0x0800a338
 8007c94:	0800a349 	.word	0x0800a349

08007c98 <__multiply>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	4691      	mov	r9, r2
 8007c9e:	690a      	ldr	r2, [r1, #16]
 8007ca0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	bfb8      	it	lt
 8007ca8:	460b      	movlt	r3, r1
 8007caa:	460c      	mov	r4, r1
 8007cac:	bfbc      	itt	lt
 8007cae:	464c      	movlt	r4, r9
 8007cb0:	4699      	movlt	r9, r3
 8007cb2:	6927      	ldr	r7, [r4, #16]
 8007cb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cb8:	68a3      	ldr	r3, [r4, #8]
 8007cba:	6861      	ldr	r1, [r4, #4]
 8007cbc:	eb07 060a 	add.w	r6, r7, sl
 8007cc0:	42b3      	cmp	r3, r6
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	bfb8      	it	lt
 8007cc6:	3101      	addlt	r1, #1
 8007cc8:	f7ff fe90 	bl	80079ec <_Balloc>
 8007ccc:	b930      	cbnz	r0, 8007cdc <__multiply+0x44>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b44      	ldr	r3, [pc, #272]	; (8007de4 <__multiply+0x14c>)
 8007cd2:	4845      	ldr	r0, [pc, #276]	; (8007de8 <__multiply+0x150>)
 8007cd4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007cd8:	f001 fc16 	bl	8009508 <__assert_func>
 8007cdc:	f100 0514 	add.w	r5, r0, #20
 8007ce0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	4543      	cmp	r3, r8
 8007cea:	d321      	bcc.n	8007d30 <__multiply+0x98>
 8007cec:	f104 0314 	add.w	r3, r4, #20
 8007cf0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cf4:	f109 0314 	add.w	r3, r9, #20
 8007cf8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cfc:	9202      	str	r2, [sp, #8]
 8007cfe:	1b3a      	subs	r2, r7, r4
 8007d00:	3a15      	subs	r2, #21
 8007d02:	f022 0203 	bic.w	r2, r2, #3
 8007d06:	3204      	adds	r2, #4
 8007d08:	f104 0115 	add.w	r1, r4, #21
 8007d0c:	428f      	cmp	r7, r1
 8007d0e:	bf38      	it	cc
 8007d10:	2204      	movcc	r2, #4
 8007d12:	9201      	str	r2, [sp, #4]
 8007d14:	9a02      	ldr	r2, [sp, #8]
 8007d16:	9303      	str	r3, [sp, #12]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d80c      	bhi.n	8007d36 <__multiply+0x9e>
 8007d1c:	2e00      	cmp	r6, #0
 8007d1e:	dd03      	ble.n	8007d28 <__multiply+0x90>
 8007d20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d05b      	beq.n	8007de0 <__multiply+0x148>
 8007d28:	6106      	str	r6, [r0, #16]
 8007d2a:	b005      	add	sp, #20
 8007d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d30:	f843 2b04 	str.w	r2, [r3], #4
 8007d34:	e7d8      	b.n	8007ce8 <__multiply+0x50>
 8007d36:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d3a:	f1ba 0f00 	cmp.w	sl, #0
 8007d3e:	d024      	beq.n	8007d8a <__multiply+0xf2>
 8007d40:	f104 0e14 	add.w	lr, r4, #20
 8007d44:	46a9      	mov	r9, r5
 8007d46:	f04f 0c00 	mov.w	ip, #0
 8007d4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d4e:	f8d9 1000 	ldr.w	r1, [r9]
 8007d52:	fa1f fb82 	uxth.w	fp, r2
 8007d56:	b289      	uxth	r1, r1
 8007d58:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d60:	f8d9 2000 	ldr.w	r2, [r9]
 8007d64:	4461      	add	r1, ip
 8007d66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d72:	b289      	uxth	r1, r1
 8007d74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d78:	4577      	cmp	r7, lr
 8007d7a:	f849 1b04 	str.w	r1, [r9], #4
 8007d7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d82:	d8e2      	bhi.n	8007d4a <__multiply+0xb2>
 8007d84:	9a01      	ldr	r2, [sp, #4]
 8007d86:	f845 c002 	str.w	ip, [r5, r2]
 8007d8a:	9a03      	ldr	r2, [sp, #12]
 8007d8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d90:	3304      	adds	r3, #4
 8007d92:	f1b9 0f00 	cmp.w	r9, #0
 8007d96:	d021      	beq.n	8007ddc <__multiply+0x144>
 8007d98:	6829      	ldr	r1, [r5, #0]
 8007d9a:	f104 0c14 	add.w	ip, r4, #20
 8007d9e:	46ae      	mov	lr, r5
 8007da0:	f04f 0a00 	mov.w	sl, #0
 8007da4:	f8bc b000 	ldrh.w	fp, [ip]
 8007da8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007dac:	fb09 220b 	mla	r2, r9, fp, r2
 8007db0:	4452      	add	r2, sl
 8007db2:	b289      	uxth	r1, r1
 8007db4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007db8:	f84e 1b04 	str.w	r1, [lr], #4
 8007dbc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007dc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dc4:	f8be 1000 	ldrh.w	r1, [lr]
 8007dc8:	fb09 110a 	mla	r1, r9, sl, r1
 8007dcc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007dd0:	4567      	cmp	r7, ip
 8007dd2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dd6:	d8e5      	bhi.n	8007da4 <__multiply+0x10c>
 8007dd8:	9a01      	ldr	r2, [sp, #4]
 8007dda:	50a9      	str	r1, [r5, r2]
 8007ddc:	3504      	adds	r5, #4
 8007dde:	e799      	b.n	8007d14 <__multiply+0x7c>
 8007de0:	3e01      	subs	r6, #1
 8007de2:	e79b      	b.n	8007d1c <__multiply+0x84>
 8007de4:	0800a338 	.word	0x0800a338
 8007de8:	0800a349 	.word	0x0800a349

08007dec <__pow5mult>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	4615      	mov	r5, r2
 8007df2:	f012 0203 	ands.w	r2, r2, #3
 8007df6:	4606      	mov	r6, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	d007      	beq.n	8007e0c <__pow5mult+0x20>
 8007dfc:	4c25      	ldr	r4, [pc, #148]	; (8007e94 <__pow5mult+0xa8>)
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	2300      	movs	r3, #0
 8007e02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e06:	f7ff fe53 	bl	8007ab0 <__multadd>
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	10ad      	asrs	r5, r5, #2
 8007e0e:	d03d      	beq.n	8007e8c <__pow5mult+0xa0>
 8007e10:	69f4      	ldr	r4, [r6, #28]
 8007e12:	b97c      	cbnz	r4, 8007e34 <__pow5mult+0x48>
 8007e14:	2010      	movs	r0, #16
 8007e16:	f7ff fd35 	bl	8007884 <malloc>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	61f0      	str	r0, [r6, #28]
 8007e1e:	b928      	cbnz	r0, 8007e2c <__pow5mult+0x40>
 8007e20:	4b1d      	ldr	r3, [pc, #116]	; (8007e98 <__pow5mult+0xac>)
 8007e22:	481e      	ldr	r0, [pc, #120]	; (8007e9c <__pow5mult+0xb0>)
 8007e24:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e28:	f001 fb6e 	bl	8009508 <__assert_func>
 8007e2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e30:	6004      	str	r4, [r0, #0]
 8007e32:	60c4      	str	r4, [r0, #12]
 8007e34:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e3c:	b94c      	cbnz	r4, 8007e52 <__pow5mult+0x66>
 8007e3e:	f240 2171 	movw	r1, #625	; 0x271
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ff12 	bl	8007c6c <__i2b>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e4e:	4604      	mov	r4, r0
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	f04f 0900 	mov.w	r9, #0
 8007e56:	07eb      	lsls	r3, r5, #31
 8007e58:	d50a      	bpl.n	8007e70 <__pow5mult+0x84>
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff ff1a 	bl	8007c98 <__multiply>
 8007e64:	4639      	mov	r1, r7
 8007e66:	4680      	mov	r8, r0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f7ff fdff 	bl	8007a6c <_Bfree>
 8007e6e:	4647      	mov	r7, r8
 8007e70:	106d      	asrs	r5, r5, #1
 8007e72:	d00b      	beq.n	8007e8c <__pow5mult+0xa0>
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	b938      	cbnz	r0, 8007e88 <__pow5mult+0x9c>
 8007e78:	4622      	mov	r2, r4
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f7ff ff0b 	bl	8007c98 <__multiply>
 8007e82:	6020      	str	r0, [r4, #0]
 8007e84:	f8c0 9000 	str.w	r9, [r0]
 8007e88:	4604      	mov	r4, r0
 8007e8a:	e7e4      	b.n	8007e56 <__pow5mult+0x6a>
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e92:	bf00      	nop
 8007e94:	0800a498 	.word	0x0800a498
 8007e98:	0800a2c9 	.word	0x0800a2c9
 8007e9c:	0800a349 	.word	0x0800a349

08007ea0 <__lshift>:
 8007ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	6849      	ldr	r1, [r1, #4]
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eae:	68a3      	ldr	r3, [r4, #8]
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	4691      	mov	r9, r2
 8007eb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eb8:	f108 0601 	add.w	r6, r8, #1
 8007ebc:	42b3      	cmp	r3, r6
 8007ebe:	db0b      	blt.n	8007ed8 <__lshift+0x38>
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f7ff fd93 	bl	80079ec <_Balloc>
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	b948      	cbnz	r0, 8007ede <__lshift+0x3e>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	4b28      	ldr	r3, [pc, #160]	; (8007f70 <__lshift+0xd0>)
 8007ece:	4829      	ldr	r0, [pc, #164]	; (8007f74 <__lshift+0xd4>)
 8007ed0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007ed4:	f001 fb18 	bl	8009508 <__assert_func>
 8007ed8:	3101      	adds	r1, #1
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	e7ee      	b.n	8007ebc <__lshift+0x1c>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f100 0114 	add.w	r1, r0, #20
 8007ee4:	f100 0210 	add.w	r2, r0, #16
 8007ee8:	4618      	mov	r0, r3
 8007eea:	4553      	cmp	r3, sl
 8007eec:	db33      	blt.n	8007f56 <__lshift+0xb6>
 8007eee:	6920      	ldr	r0, [r4, #16]
 8007ef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ef4:	f104 0314 	add.w	r3, r4, #20
 8007ef8:	f019 091f 	ands.w	r9, r9, #31
 8007efc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f04:	d02b      	beq.n	8007f5e <__lshift+0xbe>
 8007f06:	f1c9 0e20 	rsb	lr, r9, #32
 8007f0a:	468a      	mov	sl, r1
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	fa00 f009 	lsl.w	r0, r0, r9
 8007f14:	4310      	orrs	r0, r2
 8007f16:	f84a 0b04 	str.w	r0, [sl], #4
 8007f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1e:	459c      	cmp	ip, r3
 8007f20:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f24:	d8f3      	bhi.n	8007f0e <__lshift+0x6e>
 8007f26:	ebac 0304 	sub.w	r3, ip, r4
 8007f2a:	3b15      	subs	r3, #21
 8007f2c:	f023 0303 	bic.w	r3, r3, #3
 8007f30:	3304      	adds	r3, #4
 8007f32:	f104 0015 	add.w	r0, r4, #21
 8007f36:	4584      	cmp	ip, r0
 8007f38:	bf38      	it	cc
 8007f3a:	2304      	movcc	r3, #4
 8007f3c:	50ca      	str	r2, [r1, r3]
 8007f3e:	b10a      	cbz	r2, 8007f44 <__lshift+0xa4>
 8007f40:	f108 0602 	add.w	r6, r8, #2
 8007f44:	3e01      	subs	r6, #1
 8007f46:	4638      	mov	r0, r7
 8007f48:	612e      	str	r6, [r5, #16]
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	f7ff fd8e 	bl	8007a6c <_Bfree>
 8007f50:	4628      	mov	r0, r5
 8007f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f56:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	e7c5      	b.n	8007eea <__lshift+0x4a>
 8007f5e:	3904      	subs	r1, #4
 8007f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f64:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f68:	459c      	cmp	ip, r3
 8007f6a:	d8f9      	bhi.n	8007f60 <__lshift+0xc0>
 8007f6c:	e7ea      	b.n	8007f44 <__lshift+0xa4>
 8007f6e:	bf00      	nop
 8007f70:	0800a338 	.word	0x0800a338
 8007f74:	0800a349 	.word	0x0800a349

08007f78 <__mcmp>:
 8007f78:	b530      	push	{r4, r5, lr}
 8007f7a:	6902      	ldr	r2, [r0, #16]
 8007f7c:	690c      	ldr	r4, [r1, #16]
 8007f7e:	1b12      	subs	r2, r2, r4
 8007f80:	d10e      	bne.n	8007fa0 <__mcmp+0x28>
 8007f82:	f100 0314 	add.w	r3, r0, #20
 8007f86:	3114      	adds	r1, #20
 8007f88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f98:	42a5      	cmp	r5, r4
 8007f9a:	d003      	beq.n	8007fa4 <__mcmp+0x2c>
 8007f9c:	d305      	bcc.n	8007faa <__mcmp+0x32>
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	bd30      	pop	{r4, r5, pc}
 8007fa4:	4283      	cmp	r3, r0
 8007fa6:	d3f3      	bcc.n	8007f90 <__mcmp+0x18>
 8007fa8:	e7fa      	b.n	8007fa0 <__mcmp+0x28>
 8007faa:	f04f 32ff 	mov.w	r2, #4294967295
 8007fae:	e7f7      	b.n	8007fa0 <__mcmp+0x28>

08007fb0 <__mdiff>:
 8007fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4690      	mov	r8, r2
 8007fbe:	f7ff ffdb 	bl	8007f78 <__mcmp>
 8007fc2:	1e05      	subs	r5, r0, #0
 8007fc4:	d110      	bne.n	8007fe8 <__mdiff+0x38>
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f7ff fd0f 	bl	80079ec <_Balloc>
 8007fce:	b930      	cbnz	r0, 8007fde <__mdiff+0x2e>
 8007fd0:	4b3a      	ldr	r3, [pc, #232]	; (80080bc <__mdiff+0x10c>)
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	f240 2137 	movw	r1, #567	; 0x237
 8007fd8:	4839      	ldr	r0, [pc, #228]	; (80080c0 <__mdiff+0x110>)
 8007fda:	f001 fa95 	bl	8009508 <__assert_func>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe8:	bfa4      	itt	ge
 8007fea:	4643      	movge	r3, r8
 8007fec:	46a0      	movge	r8, r4
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ff4:	bfa6      	itte	ge
 8007ff6:	461c      	movge	r4, r3
 8007ff8:	2500      	movge	r5, #0
 8007ffa:	2501      	movlt	r5, #1
 8007ffc:	f7ff fcf6 	bl	80079ec <_Balloc>
 8008000:	b920      	cbnz	r0, 800800c <__mdiff+0x5c>
 8008002:	4b2e      	ldr	r3, [pc, #184]	; (80080bc <__mdiff+0x10c>)
 8008004:	4602      	mov	r2, r0
 8008006:	f240 2145 	movw	r1, #581	; 0x245
 800800a:	e7e5      	b.n	8007fd8 <__mdiff+0x28>
 800800c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008010:	6926      	ldr	r6, [r4, #16]
 8008012:	60c5      	str	r5, [r0, #12]
 8008014:	f104 0914 	add.w	r9, r4, #20
 8008018:	f108 0514 	add.w	r5, r8, #20
 800801c:	f100 0e14 	add.w	lr, r0, #20
 8008020:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008024:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008028:	f108 0210 	add.w	r2, r8, #16
 800802c:	46f2      	mov	sl, lr
 800802e:	2100      	movs	r1, #0
 8008030:	f859 3b04 	ldr.w	r3, [r9], #4
 8008034:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008038:	fa11 f88b 	uxtah	r8, r1, fp
 800803c:	b299      	uxth	r1, r3
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	eba8 0801 	sub.w	r8, r8, r1
 8008044:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008048:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800804c:	fa1f f888 	uxth.w	r8, r8
 8008050:	1419      	asrs	r1, r3, #16
 8008052:	454e      	cmp	r6, r9
 8008054:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008058:	f84a 3b04 	str.w	r3, [sl], #4
 800805c:	d8e8      	bhi.n	8008030 <__mdiff+0x80>
 800805e:	1b33      	subs	r3, r6, r4
 8008060:	3b15      	subs	r3, #21
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	3304      	adds	r3, #4
 8008068:	3415      	adds	r4, #21
 800806a:	42a6      	cmp	r6, r4
 800806c:	bf38      	it	cc
 800806e:	2304      	movcc	r3, #4
 8008070:	441d      	add	r5, r3
 8008072:	4473      	add	r3, lr
 8008074:	469e      	mov	lr, r3
 8008076:	462e      	mov	r6, r5
 8008078:	4566      	cmp	r6, ip
 800807a:	d30e      	bcc.n	800809a <__mdiff+0xea>
 800807c:	f10c 0203 	add.w	r2, ip, #3
 8008080:	1b52      	subs	r2, r2, r5
 8008082:	f022 0203 	bic.w	r2, r2, #3
 8008086:	3d03      	subs	r5, #3
 8008088:	45ac      	cmp	ip, r5
 800808a:	bf38      	it	cc
 800808c:	2200      	movcc	r2, #0
 800808e:	4413      	add	r3, r2
 8008090:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008094:	b17a      	cbz	r2, 80080b6 <__mdiff+0x106>
 8008096:	6107      	str	r7, [r0, #16]
 8008098:	e7a4      	b.n	8007fe4 <__mdiff+0x34>
 800809a:	f856 8b04 	ldr.w	r8, [r6], #4
 800809e:	fa11 f288 	uxtah	r2, r1, r8
 80080a2:	1414      	asrs	r4, r2, #16
 80080a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080a8:	b292      	uxth	r2, r2
 80080aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080ae:	f84e 2b04 	str.w	r2, [lr], #4
 80080b2:	1421      	asrs	r1, r4, #16
 80080b4:	e7e0      	b.n	8008078 <__mdiff+0xc8>
 80080b6:	3f01      	subs	r7, #1
 80080b8:	e7ea      	b.n	8008090 <__mdiff+0xe0>
 80080ba:	bf00      	nop
 80080bc:	0800a338 	.word	0x0800a338
 80080c0:	0800a349 	.word	0x0800a349

080080c4 <__ulp>:
 80080c4:	b082      	sub	sp, #8
 80080c6:	ed8d 0b00 	vstr	d0, [sp]
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <__ulp+0x48>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dc08      	bgt.n	80080ea <__ulp+0x26>
 80080d8:	425b      	negs	r3, r3
 80080da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80080de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80080e2:	da04      	bge.n	80080ee <__ulp+0x2a>
 80080e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80080e8:	4113      	asrs	r3, r2
 80080ea:	2200      	movs	r2, #0
 80080ec:	e008      	b.n	8008100 <__ulp+0x3c>
 80080ee:	f1a2 0314 	sub.w	r3, r2, #20
 80080f2:	2b1e      	cmp	r3, #30
 80080f4:	bfda      	itte	le
 80080f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80080fa:	40da      	lsrle	r2, r3
 80080fc:	2201      	movgt	r2, #1
 80080fe:	2300      	movs	r3, #0
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	ec41 0b10 	vmov	d0, r0, r1
 8008108:	b002      	add	sp, #8
 800810a:	4770      	bx	lr
 800810c:	7ff00000 	.word	0x7ff00000

08008110 <__b2d>:
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	6906      	ldr	r6, [r0, #16]
 8008116:	f100 0814 	add.w	r8, r0, #20
 800811a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800811e:	1f37      	subs	r7, r6, #4
 8008120:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008124:	4610      	mov	r0, r2
 8008126:	f7ff fd53 	bl	8007bd0 <__hi0bits>
 800812a:	f1c0 0320 	rsb	r3, r0, #32
 800812e:	280a      	cmp	r0, #10
 8008130:	600b      	str	r3, [r1, #0]
 8008132:	491b      	ldr	r1, [pc, #108]	; (80081a0 <__b2d+0x90>)
 8008134:	dc15      	bgt.n	8008162 <__b2d+0x52>
 8008136:	f1c0 0c0b 	rsb	ip, r0, #11
 800813a:	fa22 f30c 	lsr.w	r3, r2, ip
 800813e:	45b8      	cmp	r8, r7
 8008140:	ea43 0501 	orr.w	r5, r3, r1
 8008144:	bf34      	ite	cc
 8008146:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800814a:	2300      	movcs	r3, #0
 800814c:	3015      	adds	r0, #21
 800814e:	fa02 f000 	lsl.w	r0, r2, r0
 8008152:	fa23 f30c 	lsr.w	r3, r3, ip
 8008156:	4303      	orrs	r3, r0
 8008158:	461c      	mov	r4, r3
 800815a:	ec45 4b10 	vmov	d0, r4, r5
 800815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008162:	45b8      	cmp	r8, r7
 8008164:	bf3a      	itte	cc
 8008166:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800816a:	f1a6 0708 	subcc.w	r7, r6, #8
 800816e:	2300      	movcs	r3, #0
 8008170:	380b      	subs	r0, #11
 8008172:	d012      	beq.n	800819a <__b2d+0x8a>
 8008174:	f1c0 0120 	rsb	r1, r0, #32
 8008178:	fa23 f401 	lsr.w	r4, r3, r1
 800817c:	4082      	lsls	r2, r0
 800817e:	4322      	orrs	r2, r4
 8008180:	4547      	cmp	r7, r8
 8008182:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008186:	bf8c      	ite	hi
 8008188:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800818c:	2200      	movls	r2, #0
 800818e:	4083      	lsls	r3, r0
 8008190:	40ca      	lsrs	r2, r1
 8008192:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008196:	4313      	orrs	r3, r2
 8008198:	e7de      	b.n	8008158 <__b2d+0x48>
 800819a:	ea42 0501 	orr.w	r5, r2, r1
 800819e:	e7db      	b.n	8008158 <__b2d+0x48>
 80081a0:	3ff00000 	.word	0x3ff00000

080081a4 <__d2b>:
 80081a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	460f      	mov	r7, r1
 80081aa:	2101      	movs	r1, #1
 80081ac:	ec59 8b10 	vmov	r8, r9, d0
 80081b0:	4616      	mov	r6, r2
 80081b2:	f7ff fc1b 	bl	80079ec <_Balloc>
 80081b6:	4604      	mov	r4, r0
 80081b8:	b930      	cbnz	r0, 80081c8 <__d2b+0x24>
 80081ba:	4602      	mov	r2, r0
 80081bc:	4b24      	ldr	r3, [pc, #144]	; (8008250 <__d2b+0xac>)
 80081be:	4825      	ldr	r0, [pc, #148]	; (8008254 <__d2b+0xb0>)
 80081c0:	f240 310f 	movw	r1, #783	; 0x30f
 80081c4:	f001 f9a0 	bl	8009508 <__assert_func>
 80081c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081d0:	bb2d      	cbnz	r5, 800821e <__d2b+0x7a>
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	f1b8 0300 	subs.w	r3, r8, #0
 80081d8:	d026      	beq.n	8008228 <__d2b+0x84>
 80081da:	4668      	mov	r0, sp
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	f7ff fd17 	bl	8007c10 <__lo0bits>
 80081e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081e6:	b1e8      	cbz	r0, 8008224 <__d2b+0x80>
 80081e8:	f1c0 0320 	rsb	r3, r0, #32
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	430b      	orrs	r3, r1
 80081f2:	40c2      	lsrs	r2, r0
 80081f4:	6163      	str	r3, [r4, #20]
 80081f6:	9201      	str	r2, [sp, #4]
 80081f8:	9b01      	ldr	r3, [sp, #4]
 80081fa:	61a3      	str	r3, [r4, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	bf14      	ite	ne
 8008200:	2202      	movne	r2, #2
 8008202:	2201      	moveq	r2, #1
 8008204:	6122      	str	r2, [r4, #16]
 8008206:	b1bd      	cbz	r5, 8008238 <__d2b+0x94>
 8008208:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800820c:	4405      	add	r5, r0
 800820e:	603d      	str	r5, [r7, #0]
 8008210:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008214:	6030      	str	r0, [r6, #0]
 8008216:	4620      	mov	r0, r4
 8008218:	b003      	add	sp, #12
 800821a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008222:	e7d6      	b.n	80081d2 <__d2b+0x2e>
 8008224:	6161      	str	r1, [r4, #20]
 8008226:	e7e7      	b.n	80081f8 <__d2b+0x54>
 8008228:	a801      	add	r0, sp, #4
 800822a:	f7ff fcf1 	bl	8007c10 <__lo0bits>
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	6163      	str	r3, [r4, #20]
 8008232:	3020      	adds	r0, #32
 8008234:	2201      	movs	r2, #1
 8008236:	e7e5      	b.n	8008204 <__d2b+0x60>
 8008238:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800823c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008240:	6038      	str	r0, [r7, #0]
 8008242:	6918      	ldr	r0, [r3, #16]
 8008244:	f7ff fcc4 	bl	8007bd0 <__hi0bits>
 8008248:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800824c:	e7e2      	b.n	8008214 <__d2b+0x70>
 800824e:	bf00      	nop
 8008250:	0800a338 	.word	0x0800a338
 8008254:	0800a349 	.word	0x0800a349

08008258 <__ratio>:
 8008258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	4688      	mov	r8, r1
 800825e:	4669      	mov	r1, sp
 8008260:	4681      	mov	r9, r0
 8008262:	f7ff ff55 	bl	8008110 <__b2d>
 8008266:	a901      	add	r1, sp, #4
 8008268:	4640      	mov	r0, r8
 800826a:	ec55 4b10 	vmov	r4, r5, d0
 800826e:	f7ff ff4f 	bl	8008110 <__b2d>
 8008272:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008276:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800827a:	eba3 0c02 	sub.w	ip, r3, r2
 800827e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008288:	ec51 0b10 	vmov	r0, r1, d0
 800828c:	2b00      	cmp	r3, #0
 800828e:	bfd6      	itet	le
 8008290:	460a      	movle	r2, r1
 8008292:	462a      	movgt	r2, r5
 8008294:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008298:	468b      	mov	fp, r1
 800829a:	462f      	mov	r7, r5
 800829c:	bfd4      	ite	le
 800829e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80082a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80082a6:	4620      	mov	r0, r4
 80082a8:	ee10 2a10 	vmov	r2, s0
 80082ac:	465b      	mov	r3, fp
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f8 facc 	bl	800084c <__aeabi_ddiv>
 80082b4:	ec41 0b10 	vmov	d0, r0, r1
 80082b8:	b003      	add	sp, #12
 80082ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082be <__copybits>:
 80082be:	3901      	subs	r1, #1
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	1149      	asrs	r1, r1, #5
 80082c4:	6914      	ldr	r4, [r2, #16]
 80082c6:	3101      	adds	r1, #1
 80082c8:	f102 0314 	add.w	r3, r2, #20
 80082cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80082d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80082d4:	1f05      	subs	r5, r0, #4
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	d30c      	bcc.n	80082f4 <__copybits+0x36>
 80082da:	1aa3      	subs	r3, r4, r2
 80082dc:	3b11      	subs	r3, #17
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	3211      	adds	r2, #17
 80082e4:	42a2      	cmp	r2, r4
 80082e6:	bf88      	it	hi
 80082e8:	2300      	movhi	r3, #0
 80082ea:	4418      	add	r0, r3
 80082ec:	2300      	movs	r3, #0
 80082ee:	4288      	cmp	r0, r1
 80082f0:	d305      	bcc.n	80082fe <__copybits+0x40>
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80082f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80082fc:	e7eb      	b.n	80082d6 <__copybits+0x18>
 80082fe:	f840 3b04 	str.w	r3, [r0], #4
 8008302:	e7f4      	b.n	80082ee <__copybits+0x30>

08008304 <__any_on>:
 8008304:	f100 0214 	add.w	r2, r0, #20
 8008308:	6900      	ldr	r0, [r0, #16]
 800830a:	114b      	asrs	r3, r1, #5
 800830c:	4298      	cmp	r0, r3
 800830e:	b510      	push	{r4, lr}
 8008310:	db11      	blt.n	8008336 <__any_on+0x32>
 8008312:	dd0a      	ble.n	800832a <__any_on+0x26>
 8008314:	f011 011f 	ands.w	r1, r1, #31
 8008318:	d007      	beq.n	800832a <__any_on+0x26>
 800831a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800831e:	fa24 f001 	lsr.w	r0, r4, r1
 8008322:	fa00 f101 	lsl.w	r1, r0, r1
 8008326:	428c      	cmp	r4, r1
 8008328:	d10b      	bne.n	8008342 <__any_on+0x3e>
 800832a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800832e:	4293      	cmp	r3, r2
 8008330:	d803      	bhi.n	800833a <__any_on+0x36>
 8008332:	2000      	movs	r0, #0
 8008334:	bd10      	pop	{r4, pc}
 8008336:	4603      	mov	r3, r0
 8008338:	e7f7      	b.n	800832a <__any_on+0x26>
 800833a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800833e:	2900      	cmp	r1, #0
 8008340:	d0f5      	beq.n	800832e <__any_on+0x2a>
 8008342:	2001      	movs	r0, #1
 8008344:	e7f6      	b.n	8008334 <__any_on+0x30>

08008346 <sulp>:
 8008346:	b570      	push	{r4, r5, r6, lr}
 8008348:	4604      	mov	r4, r0
 800834a:	460d      	mov	r5, r1
 800834c:	ec45 4b10 	vmov	d0, r4, r5
 8008350:	4616      	mov	r6, r2
 8008352:	f7ff feb7 	bl	80080c4 <__ulp>
 8008356:	ec51 0b10 	vmov	r0, r1, d0
 800835a:	b17e      	cbz	r6, 800837c <sulp+0x36>
 800835c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008360:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008364:	2b00      	cmp	r3, #0
 8008366:	dd09      	ble.n	800837c <sulp+0x36>
 8008368:	051b      	lsls	r3, r3, #20
 800836a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800836e:	2400      	movs	r4, #0
 8008370:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008374:	4622      	mov	r2, r4
 8008376:	462b      	mov	r3, r5
 8008378:	f7f8 f93e 	bl	80005f8 <__aeabi_dmul>
 800837c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008380 <_strtod_l>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	ed2d 8b02 	vpush	{d8}
 8008388:	b09b      	sub	sp, #108	; 0x6c
 800838a:	4604      	mov	r4, r0
 800838c:	9213      	str	r2, [sp, #76]	; 0x4c
 800838e:	2200      	movs	r2, #0
 8008390:	9216      	str	r2, [sp, #88]	; 0x58
 8008392:	460d      	mov	r5, r1
 8008394:	f04f 0800 	mov.w	r8, #0
 8008398:	f04f 0900 	mov.w	r9, #0
 800839c:	460a      	mov	r2, r1
 800839e:	9215      	str	r2, [sp, #84]	; 0x54
 80083a0:	7811      	ldrb	r1, [r2, #0]
 80083a2:	292b      	cmp	r1, #43	; 0x2b
 80083a4:	d04c      	beq.n	8008440 <_strtod_l+0xc0>
 80083a6:	d83a      	bhi.n	800841e <_strtod_l+0x9e>
 80083a8:	290d      	cmp	r1, #13
 80083aa:	d834      	bhi.n	8008416 <_strtod_l+0x96>
 80083ac:	2908      	cmp	r1, #8
 80083ae:	d834      	bhi.n	800841a <_strtod_l+0x9a>
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d03d      	beq.n	8008430 <_strtod_l+0xb0>
 80083b4:	2200      	movs	r2, #0
 80083b6:	920a      	str	r2, [sp, #40]	; 0x28
 80083b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80083ba:	7832      	ldrb	r2, [r6, #0]
 80083bc:	2a30      	cmp	r2, #48	; 0x30
 80083be:	f040 80b4 	bne.w	800852a <_strtod_l+0x1aa>
 80083c2:	7872      	ldrb	r2, [r6, #1]
 80083c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80083c8:	2a58      	cmp	r2, #88	; 0x58
 80083ca:	d170      	bne.n	80084ae <_strtod_l+0x12e>
 80083cc:	9302      	str	r3, [sp, #8]
 80083ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	ab16      	add	r3, sp, #88	; 0x58
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	4a8e      	ldr	r2, [pc, #568]	; (8008610 <_strtod_l+0x290>)
 80083d8:	ab17      	add	r3, sp, #92	; 0x5c
 80083da:	a915      	add	r1, sp, #84	; 0x54
 80083dc:	4620      	mov	r0, r4
 80083de:	f001 f92f 	bl	8009640 <__gethex>
 80083e2:	f010 070f 	ands.w	r7, r0, #15
 80083e6:	4605      	mov	r5, r0
 80083e8:	d005      	beq.n	80083f6 <_strtod_l+0x76>
 80083ea:	2f06      	cmp	r7, #6
 80083ec:	d12a      	bne.n	8008444 <_strtod_l+0xc4>
 80083ee:	3601      	adds	r6, #1
 80083f0:	2300      	movs	r3, #0
 80083f2:	9615      	str	r6, [sp, #84]	; 0x54
 80083f4:	930a      	str	r3, [sp, #40]	; 0x28
 80083f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f040 857f 	bne.w	8008efc <_strtod_l+0xb7c>
 80083fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008400:	b1db      	cbz	r3, 800843a <_strtod_l+0xba>
 8008402:	4642      	mov	r2, r8
 8008404:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008408:	ec43 2b10 	vmov	d0, r2, r3
 800840c:	b01b      	add	sp, #108	; 0x6c
 800840e:	ecbd 8b02 	vpop	{d8}
 8008412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008416:	2920      	cmp	r1, #32
 8008418:	d1cc      	bne.n	80083b4 <_strtod_l+0x34>
 800841a:	3201      	adds	r2, #1
 800841c:	e7bf      	b.n	800839e <_strtod_l+0x1e>
 800841e:	292d      	cmp	r1, #45	; 0x2d
 8008420:	d1c8      	bne.n	80083b4 <_strtod_l+0x34>
 8008422:	2101      	movs	r1, #1
 8008424:	910a      	str	r1, [sp, #40]	; 0x28
 8008426:	1c51      	adds	r1, r2, #1
 8008428:	9115      	str	r1, [sp, #84]	; 0x54
 800842a:	7852      	ldrb	r2, [r2, #1]
 800842c:	2a00      	cmp	r2, #0
 800842e:	d1c3      	bne.n	80083b8 <_strtod_l+0x38>
 8008430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008432:	9515      	str	r5, [sp, #84]	; 0x54
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 855f 	bne.w	8008ef8 <_strtod_l+0xb78>
 800843a:	4642      	mov	r2, r8
 800843c:	464b      	mov	r3, r9
 800843e:	e7e3      	b.n	8008408 <_strtod_l+0x88>
 8008440:	2100      	movs	r1, #0
 8008442:	e7ef      	b.n	8008424 <_strtod_l+0xa4>
 8008444:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008446:	b13a      	cbz	r2, 8008458 <_strtod_l+0xd8>
 8008448:	2135      	movs	r1, #53	; 0x35
 800844a:	a818      	add	r0, sp, #96	; 0x60
 800844c:	f7ff ff37 	bl	80082be <__copybits>
 8008450:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008452:	4620      	mov	r0, r4
 8008454:	f7ff fb0a 	bl	8007a6c <_Bfree>
 8008458:	3f01      	subs	r7, #1
 800845a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800845c:	2f04      	cmp	r7, #4
 800845e:	d806      	bhi.n	800846e <_strtod_l+0xee>
 8008460:	e8df f007 	tbb	[pc, r7]
 8008464:	201d0314 	.word	0x201d0314
 8008468:	14          	.byte	0x14
 8008469:	00          	.byte	0x00
 800846a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800846e:	05e9      	lsls	r1, r5, #23
 8008470:	bf48      	it	mi
 8008472:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800847a:	0d1b      	lsrs	r3, r3, #20
 800847c:	051b      	lsls	r3, r3, #20
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1b9      	bne.n	80083f6 <_strtod_l+0x76>
 8008482:	f7fe faf7 	bl	8006a74 <__errno>
 8008486:	2322      	movs	r3, #34	; 0x22
 8008488:	6003      	str	r3, [r0, #0]
 800848a:	e7b4      	b.n	80083f6 <_strtod_l+0x76>
 800848c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008490:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008494:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008498:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800849c:	e7e7      	b.n	800846e <_strtod_l+0xee>
 800849e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008618 <_strtod_l+0x298>
 80084a2:	e7e4      	b.n	800846e <_strtod_l+0xee>
 80084a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80084a8:	f04f 38ff 	mov.w	r8, #4294967295
 80084ac:	e7df      	b.n	800846e <_strtod_l+0xee>
 80084ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	9215      	str	r2, [sp, #84]	; 0x54
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b30      	cmp	r3, #48	; 0x30
 80084b8:	d0f9      	beq.n	80084ae <_strtod_l+0x12e>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d09b      	beq.n	80083f6 <_strtod_l+0x76>
 80084be:	2301      	movs	r3, #1
 80084c0:	f04f 0a00 	mov.w	sl, #0
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80084ce:	46d3      	mov	fp, sl
 80084d0:	220a      	movs	r2, #10
 80084d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80084d4:	7806      	ldrb	r6, [r0, #0]
 80084d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80084da:	b2d9      	uxtb	r1, r3
 80084dc:	2909      	cmp	r1, #9
 80084de:	d926      	bls.n	800852e <_strtod_l+0x1ae>
 80084e0:	494c      	ldr	r1, [pc, #304]	; (8008614 <_strtod_l+0x294>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	f000 ffe6 	bl	80094b4 <strncmp>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d030      	beq.n	800854e <_strtod_l+0x1ce>
 80084ec:	2000      	movs	r0, #0
 80084ee:	4632      	mov	r2, r6
 80084f0:	9005      	str	r0, [sp, #20]
 80084f2:	465e      	mov	r6, fp
 80084f4:	4603      	mov	r3, r0
 80084f6:	2a65      	cmp	r2, #101	; 0x65
 80084f8:	d001      	beq.n	80084fe <_strtod_l+0x17e>
 80084fa:	2a45      	cmp	r2, #69	; 0x45
 80084fc:	d113      	bne.n	8008526 <_strtod_l+0x1a6>
 80084fe:	b91e      	cbnz	r6, 8008508 <_strtod_l+0x188>
 8008500:	9a04      	ldr	r2, [sp, #16]
 8008502:	4302      	orrs	r2, r0
 8008504:	d094      	beq.n	8008430 <_strtod_l+0xb0>
 8008506:	2600      	movs	r6, #0
 8008508:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800850a:	1c6a      	adds	r2, r5, #1
 800850c:	9215      	str	r2, [sp, #84]	; 0x54
 800850e:	786a      	ldrb	r2, [r5, #1]
 8008510:	2a2b      	cmp	r2, #43	; 0x2b
 8008512:	d074      	beq.n	80085fe <_strtod_l+0x27e>
 8008514:	2a2d      	cmp	r2, #45	; 0x2d
 8008516:	d078      	beq.n	800860a <_strtod_l+0x28a>
 8008518:	f04f 0c00 	mov.w	ip, #0
 800851c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008520:	2909      	cmp	r1, #9
 8008522:	d97f      	bls.n	8008624 <_strtod_l+0x2a4>
 8008524:	9515      	str	r5, [sp, #84]	; 0x54
 8008526:	2700      	movs	r7, #0
 8008528:	e09e      	b.n	8008668 <_strtod_l+0x2e8>
 800852a:	2300      	movs	r3, #0
 800852c:	e7c8      	b.n	80084c0 <_strtod_l+0x140>
 800852e:	f1bb 0f08 	cmp.w	fp, #8
 8008532:	bfd8      	it	le
 8008534:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008536:	f100 0001 	add.w	r0, r0, #1
 800853a:	bfda      	itte	le
 800853c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008540:	9309      	strle	r3, [sp, #36]	; 0x24
 8008542:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008546:	f10b 0b01 	add.w	fp, fp, #1
 800854a:	9015      	str	r0, [sp, #84]	; 0x54
 800854c:	e7c1      	b.n	80084d2 <_strtod_l+0x152>
 800854e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	9215      	str	r2, [sp, #84]	; 0x54
 8008554:	785a      	ldrb	r2, [r3, #1]
 8008556:	f1bb 0f00 	cmp.w	fp, #0
 800855a:	d037      	beq.n	80085cc <_strtod_l+0x24c>
 800855c:	9005      	str	r0, [sp, #20]
 800855e:	465e      	mov	r6, fp
 8008560:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008564:	2b09      	cmp	r3, #9
 8008566:	d912      	bls.n	800858e <_strtod_l+0x20e>
 8008568:	2301      	movs	r3, #1
 800856a:	e7c4      	b.n	80084f6 <_strtod_l+0x176>
 800856c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	9215      	str	r2, [sp, #84]	; 0x54
 8008572:	785a      	ldrb	r2, [r3, #1]
 8008574:	3001      	adds	r0, #1
 8008576:	2a30      	cmp	r2, #48	; 0x30
 8008578:	d0f8      	beq.n	800856c <_strtod_l+0x1ec>
 800857a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800857e:	2b08      	cmp	r3, #8
 8008580:	f200 84c1 	bhi.w	8008f06 <_strtod_l+0xb86>
 8008584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008586:	9005      	str	r0, [sp, #20]
 8008588:	2000      	movs	r0, #0
 800858a:	930b      	str	r3, [sp, #44]	; 0x2c
 800858c:	4606      	mov	r6, r0
 800858e:	3a30      	subs	r2, #48	; 0x30
 8008590:	f100 0301 	add.w	r3, r0, #1
 8008594:	d014      	beq.n	80085c0 <_strtod_l+0x240>
 8008596:	9905      	ldr	r1, [sp, #20]
 8008598:	4419      	add	r1, r3
 800859a:	9105      	str	r1, [sp, #20]
 800859c:	4633      	mov	r3, r6
 800859e:	eb00 0c06 	add.w	ip, r0, r6
 80085a2:	210a      	movs	r1, #10
 80085a4:	4563      	cmp	r3, ip
 80085a6:	d113      	bne.n	80085d0 <_strtod_l+0x250>
 80085a8:	1833      	adds	r3, r6, r0
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	f106 0601 	add.w	r6, r6, #1
 80085b0:	4406      	add	r6, r0
 80085b2:	dc1a      	bgt.n	80085ea <_strtod_l+0x26a>
 80085b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b6:	230a      	movs	r3, #10
 80085b8:	fb03 2301 	mla	r3, r3, r1, r2
 80085bc:	9309      	str	r3, [sp, #36]	; 0x24
 80085be:	2300      	movs	r3, #0
 80085c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085c2:	1c51      	adds	r1, r2, #1
 80085c4:	9115      	str	r1, [sp, #84]	; 0x54
 80085c6:	7852      	ldrb	r2, [r2, #1]
 80085c8:	4618      	mov	r0, r3
 80085ca:	e7c9      	b.n	8008560 <_strtod_l+0x1e0>
 80085cc:	4658      	mov	r0, fp
 80085ce:	e7d2      	b.n	8008576 <_strtod_l+0x1f6>
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	f103 0301 	add.w	r3, r3, #1
 80085d6:	dc03      	bgt.n	80085e0 <_strtod_l+0x260>
 80085d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085da:	434f      	muls	r7, r1
 80085dc:	9709      	str	r7, [sp, #36]	; 0x24
 80085de:	e7e1      	b.n	80085a4 <_strtod_l+0x224>
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	bfd8      	it	le
 80085e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80085e8:	e7dc      	b.n	80085a4 <_strtod_l+0x224>
 80085ea:	2e10      	cmp	r6, #16
 80085ec:	bfdc      	itt	le
 80085ee:	230a      	movle	r3, #10
 80085f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80085f4:	e7e3      	b.n	80085be <_strtod_l+0x23e>
 80085f6:	2300      	movs	r3, #0
 80085f8:	9305      	str	r3, [sp, #20]
 80085fa:	2301      	movs	r3, #1
 80085fc:	e780      	b.n	8008500 <_strtod_l+0x180>
 80085fe:	f04f 0c00 	mov.w	ip, #0
 8008602:	1caa      	adds	r2, r5, #2
 8008604:	9215      	str	r2, [sp, #84]	; 0x54
 8008606:	78aa      	ldrb	r2, [r5, #2]
 8008608:	e788      	b.n	800851c <_strtod_l+0x19c>
 800860a:	f04f 0c01 	mov.w	ip, #1
 800860e:	e7f8      	b.n	8008602 <_strtod_l+0x282>
 8008610:	0800a4a8 	.word	0x0800a4a8
 8008614:	0800a4a4 	.word	0x0800a4a4
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800861e:	1c51      	adds	r1, r2, #1
 8008620:	9115      	str	r1, [sp, #84]	; 0x54
 8008622:	7852      	ldrb	r2, [r2, #1]
 8008624:	2a30      	cmp	r2, #48	; 0x30
 8008626:	d0f9      	beq.n	800861c <_strtod_l+0x29c>
 8008628:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800862c:	2908      	cmp	r1, #8
 800862e:	f63f af7a 	bhi.w	8008526 <_strtod_l+0x1a6>
 8008632:	3a30      	subs	r2, #48	; 0x30
 8008634:	9208      	str	r2, [sp, #32]
 8008636:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008638:	920c      	str	r2, [sp, #48]	; 0x30
 800863a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800863c:	1c57      	adds	r7, r2, #1
 800863e:	9715      	str	r7, [sp, #84]	; 0x54
 8008640:	7852      	ldrb	r2, [r2, #1]
 8008642:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008646:	f1be 0f09 	cmp.w	lr, #9
 800864a:	d938      	bls.n	80086be <_strtod_l+0x33e>
 800864c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800864e:	1a7f      	subs	r7, r7, r1
 8008650:	2f08      	cmp	r7, #8
 8008652:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008656:	dc03      	bgt.n	8008660 <_strtod_l+0x2e0>
 8008658:	9908      	ldr	r1, [sp, #32]
 800865a:	428f      	cmp	r7, r1
 800865c:	bfa8      	it	ge
 800865e:	460f      	movge	r7, r1
 8008660:	f1bc 0f00 	cmp.w	ip, #0
 8008664:	d000      	beq.n	8008668 <_strtod_l+0x2e8>
 8008666:	427f      	negs	r7, r7
 8008668:	2e00      	cmp	r6, #0
 800866a:	d14f      	bne.n	800870c <_strtod_l+0x38c>
 800866c:	9904      	ldr	r1, [sp, #16]
 800866e:	4301      	orrs	r1, r0
 8008670:	f47f aec1 	bne.w	80083f6 <_strtod_l+0x76>
 8008674:	2b00      	cmp	r3, #0
 8008676:	f47f aedb 	bne.w	8008430 <_strtod_l+0xb0>
 800867a:	2a69      	cmp	r2, #105	; 0x69
 800867c:	d029      	beq.n	80086d2 <_strtod_l+0x352>
 800867e:	dc26      	bgt.n	80086ce <_strtod_l+0x34e>
 8008680:	2a49      	cmp	r2, #73	; 0x49
 8008682:	d026      	beq.n	80086d2 <_strtod_l+0x352>
 8008684:	2a4e      	cmp	r2, #78	; 0x4e
 8008686:	f47f aed3 	bne.w	8008430 <_strtod_l+0xb0>
 800868a:	499b      	ldr	r1, [pc, #620]	; (80088f8 <_strtod_l+0x578>)
 800868c:	a815      	add	r0, sp, #84	; 0x54
 800868e:	f001 fa17 	bl	8009ac0 <__match>
 8008692:	2800      	cmp	r0, #0
 8008694:	f43f aecc 	beq.w	8008430 <_strtod_l+0xb0>
 8008698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b28      	cmp	r3, #40	; 0x28
 800869e:	d12f      	bne.n	8008700 <_strtod_l+0x380>
 80086a0:	4996      	ldr	r1, [pc, #600]	; (80088fc <_strtod_l+0x57c>)
 80086a2:	aa18      	add	r2, sp, #96	; 0x60
 80086a4:	a815      	add	r0, sp, #84	; 0x54
 80086a6:	f001 fa1f 	bl	8009ae8 <__hexnan>
 80086aa:	2805      	cmp	r0, #5
 80086ac:	d128      	bne.n	8008700 <_strtod_l+0x380>
 80086ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80086b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80086bc:	e69b      	b.n	80083f6 <_strtod_l+0x76>
 80086be:	9f08      	ldr	r7, [sp, #32]
 80086c0:	210a      	movs	r1, #10
 80086c2:	fb01 2107 	mla	r1, r1, r7, r2
 80086c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80086ca:	9208      	str	r2, [sp, #32]
 80086cc:	e7b5      	b.n	800863a <_strtod_l+0x2ba>
 80086ce:	2a6e      	cmp	r2, #110	; 0x6e
 80086d0:	e7d9      	b.n	8008686 <_strtod_l+0x306>
 80086d2:	498b      	ldr	r1, [pc, #556]	; (8008900 <_strtod_l+0x580>)
 80086d4:	a815      	add	r0, sp, #84	; 0x54
 80086d6:	f001 f9f3 	bl	8009ac0 <__match>
 80086da:	2800      	cmp	r0, #0
 80086dc:	f43f aea8 	beq.w	8008430 <_strtod_l+0xb0>
 80086e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e2:	4988      	ldr	r1, [pc, #544]	; (8008904 <_strtod_l+0x584>)
 80086e4:	3b01      	subs	r3, #1
 80086e6:	a815      	add	r0, sp, #84	; 0x54
 80086e8:	9315      	str	r3, [sp, #84]	; 0x54
 80086ea:	f001 f9e9 	bl	8009ac0 <__match>
 80086ee:	b910      	cbnz	r0, 80086f6 <_strtod_l+0x376>
 80086f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086f2:	3301      	adds	r3, #1
 80086f4:	9315      	str	r3, [sp, #84]	; 0x54
 80086f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008914 <_strtod_l+0x594>
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	e67a      	b.n	80083f6 <_strtod_l+0x76>
 8008700:	4881      	ldr	r0, [pc, #516]	; (8008908 <_strtod_l+0x588>)
 8008702:	f000 fef9 	bl	80094f8 <nan>
 8008706:	ec59 8b10 	vmov	r8, r9, d0
 800870a:	e674      	b.n	80083f6 <_strtod_l+0x76>
 800870c:	9b05      	ldr	r3, [sp, #20]
 800870e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008710:	1afb      	subs	r3, r7, r3
 8008712:	f1bb 0f00 	cmp.w	fp, #0
 8008716:	bf08      	it	eq
 8008718:	46b3      	moveq	fp, r6
 800871a:	2e10      	cmp	r6, #16
 800871c:	9308      	str	r3, [sp, #32]
 800871e:	4635      	mov	r5, r6
 8008720:	bfa8      	it	ge
 8008722:	2510      	movge	r5, #16
 8008724:	f7f7 feee 	bl	8000504 <__aeabi_ui2d>
 8008728:	2e09      	cmp	r6, #9
 800872a:	4680      	mov	r8, r0
 800872c:	4689      	mov	r9, r1
 800872e:	dd13      	ble.n	8008758 <_strtod_l+0x3d8>
 8008730:	4b76      	ldr	r3, [pc, #472]	; (800890c <_strtod_l+0x58c>)
 8008732:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008736:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800873a:	f7f7 ff5d 	bl	80005f8 <__aeabi_dmul>
 800873e:	4680      	mov	r8, r0
 8008740:	4650      	mov	r0, sl
 8008742:	4689      	mov	r9, r1
 8008744:	f7f7 fede 	bl	8000504 <__aeabi_ui2d>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4640      	mov	r0, r8
 800874e:	4649      	mov	r1, r9
 8008750:	f7f7 fd9c 	bl	800028c <__adddf3>
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	2e0f      	cmp	r6, #15
 800875a:	dc38      	bgt.n	80087ce <_strtod_l+0x44e>
 800875c:	9b08      	ldr	r3, [sp, #32]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f43f ae49 	beq.w	80083f6 <_strtod_l+0x76>
 8008764:	dd24      	ble.n	80087b0 <_strtod_l+0x430>
 8008766:	2b16      	cmp	r3, #22
 8008768:	dc0b      	bgt.n	8008782 <_strtod_l+0x402>
 800876a:	4968      	ldr	r1, [pc, #416]	; (800890c <_strtod_l+0x58c>)
 800876c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008774:	4642      	mov	r2, r8
 8008776:	464b      	mov	r3, r9
 8008778:	f7f7 ff3e 	bl	80005f8 <__aeabi_dmul>
 800877c:	4680      	mov	r8, r0
 800877e:	4689      	mov	r9, r1
 8008780:	e639      	b.n	80083f6 <_strtod_l+0x76>
 8008782:	9a08      	ldr	r2, [sp, #32]
 8008784:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008788:	4293      	cmp	r3, r2
 800878a:	db20      	blt.n	80087ce <_strtod_l+0x44e>
 800878c:	4c5f      	ldr	r4, [pc, #380]	; (800890c <_strtod_l+0x58c>)
 800878e:	f1c6 060f 	rsb	r6, r6, #15
 8008792:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008796:	4642      	mov	r2, r8
 8008798:	464b      	mov	r3, r9
 800879a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800879e:	f7f7 ff2b 	bl	80005f8 <__aeabi_dmul>
 80087a2:	9b08      	ldr	r3, [sp, #32]
 80087a4:	1b9e      	subs	r6, r3, r6
 80087a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80087aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087ae:	e7e3      	b.n	8008778 <_strtod_l+0x3f8>
 80087b0:	9b08      	ldr	r3, [sp, #32]
 80087b2:	3316      	adds	r3, #22
 80087b4:	db0b      	blt.n	80087ce <_strtod_l+0x44e>
 80087b6:	9b05      	ldr	r3, [sp, #20]
 80087b8:	1bdf      	subs	r7, r3, r7
 80087ba:	4b54      	ldr	r3, [pc, #336]	; (800890c <_strtod_l+0x58c>)
 80087bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80087c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c4:	4640      	mov	r0, r8
 80087c6:	4649      	mov	r1, r9
 80087c8:	f7f8 f840 	bl	800084c <__aeabi_ddiv>
 80087cc:	e7d6      	b.n	800877c <_strtod_l+0x3fc>
 80087ce:	9b08      	ldr	r3, [sp, #32]
 80087d0:	1b75      	subs	r5, r6, r5
 80087d2:	441d      	add	r5, r3
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	dd70      	ble.n	80088ba <_strtod_l+0x53a>
 80087d8:	f015 030f 	ands.w	r3, r5, #15
 80087dc:	d00a      	beq.n	80087f4 <_strtod_l+0x474>
 80087de:	494b      	ldr	r1, [pc, #300]	; (800890c <_strtod_l+0x58c>)
 80087e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087e4:	4642      	mov	r2, r8
 80087e6:	464b      	mov	r3, r9
 80087e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ec:	f7f7 ff04 	bl	80005f8 <__aeabi_dmul>
 80087f0:	4680      	mov	r8, r0
 80087f2:	4689      	mov	r9, r1
 80087f4:	f035 050f 	bics.w	r5, r5, #15
 80087f8:	d04d      	beq.n	8008896 <_strtod_l+0x516>
 80087fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80087fe:	dd22      	ble.n	8008846 <_strtod_l+0x4c6>
 8008800:	2500      	movs	r5, #0
 8008802:	46ab      	mov	fp, r5
 8008804:	9509      	str	r5, [sp, #36]	; 0x24
 8008806:	9505      	str	r5, [sp, #20]
 8008808:	2322      	movs	r3, #34	; 0x22
 800880a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008914 <_strtod_l+0x594>
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	f04f 0800 	mov.w	r8, #0
 8008814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008816:	2b00      	cmp	r3, #0
 8008818:	f43f aded 	beq.w	80083f6 <_strtod_l+0x76>
 800881c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800881e:	4620      	mov	r0, r4
 8008820:	f7ff f924 	bl	8007a6c <_Bfree>
 8008824:	9905      	ldr	r1, [sp, #20]
 8008826:	4620      	mov	r0, r4
 8008828:	f7ff f920 	bl	8007a6c <_Bfree>
 800882c:	4659      	mov	r1, fp
 800882e:	4620      	mov	r0, r4
 8008830:	f7ff f91c 	bl	8007a6c <_Bfree>
 8008834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff f918 	bl	8007a6c <_Bfree>
 800883c:	4629      	mov	r1, r5
 800883e:	4620      	mov	r0, r4
 8008840:	f7ff f914 	bl	8007a6c <_Bfree>
 8008844:	e5d7      	b.n	80083f6 <_strtod_l+0x76>
 8008846:	4b32      	ldr	r3, [pc, #200]	; (8008910 <_strtod_l+0x590>)
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	2300      	movs	r3, #0
 800884c:	112d      	asrs	r5, r5, #4
 800884e:	4640      	mov	r0, r8
 8008850:	4649      	mov	r1, r9
 8008852:	469a      	mov	sl, r3
 8008854:	2d01      	cmp	r5, #1
 8008856:	dc21      	bgt.n	800889c <_strtod_l+0x51c>
 8008858:	b10b      	cbz	r3, 800885e <_strtod_l+0x4de>
 800885a:	4680      	mov	r8, r0
 800885c:	4689      	mov	r9, r1
 800885e:	492c      	ldr	r1, [pc, #176]	; (8008910 <_strtod_l+0x590>)
 8008860:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008864:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008870:	f7f7 fec2 	bl	80005f8 <__aeabi_dmul>
 8008874:	4b27      	ldr	r3, [pc, #156]	; (8008914 <_strtod_l+0x594>)
 8008876:	460a      	mov	r2, r1
 8008878:	400b      	ands	r3, r1
 800887a:	4927      	ldr	r1, [pc, #156]	; (8008918 <_strtod_l+0x598>)
 800887c:	428b      	cmp	r3, r1
 800887e:	4680      	mov	r8, r0
 8008880:	d8be      	bhi.n	8008800 <_strtod_l+0x480>
 8008882:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008886:	428b      	cmp	r3, r1
 8008888:	bf86      	itte	hi
 800888a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800891c <_strtod_l+0x59c>
 800888e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008892:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008896:	2300      	movs	r3, #0
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	e07b      	b.n	8008994 <_strtod_l+0x614>
 800889c:	07ea      	lsls	r2, r5, #31
 800889e:	d505      	bpl.n	80088ac <_strtod_l+0x52c>
 80088a0:	9b04      	ldr	r3, [sp, #16]
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fea7 	bl	80005f8 <__aeabi_dmul>
 80088aa:	2301      	movs	r3, #1
 80088ac:	9a04      	ldr	r2, [sp, #16]
 80088ae:	3208      	adds	r2, #8
 80088b0:	f10a 0a01 	add.w	sl, sl, #1
 80088b4:	106d      	asrs	r5, r5, #1
 80088b6:	9204      	str	r2, [sp, #16]
 80088b8:	e7cc      	b.n	8008854 <_strtod_l+0x4d4>
 80088ba:	d0ec      	beq.n	8008896 <_strtod_l+0x516>
 80088bc:	426d      	negs	r5, r5
 80088be:	f015 020f 	ands.w	r2, r5, #15
 80088c2:	d00a      	beq.n	80088da <_strtod_l+0x55a>
 80088c4:	4b11      	ldr	r3, [pc, #68]	; (800890c <_strtod_l+0x58c>)
 80088c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ca:	4640      	mov	r0, r8
 80088cc:	4649      	mov	r1, r9
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 ffbb 	bl	800084c <__aeabi_ddiv>
 80088d6:	4680      	mov	r8, r0
 80088d8:	4689      	mov	r9, r1
 80088da:	112d      	asrs	r5, r5, #4
 80088dc:	d0db      	beq.n	8008896 <_strtod_l+0x516>
 80088de:	2d1f      	cmp	r5, #31
 80088e0:	dd1e      	ble.n	8008920 <_strtod_l+0x5a0>
 80088e2:	2500      	movs	r5, #0
 80088e4:	46ab      	mov	fp, r5
 80088e6:	9509      	str	r5, [sp, #36]	; 0x24
 80088e8:	9505      	str	r5, [sp, #20]
 80088ea:	2322      	movs	r3, #34	; 0x22
 80088ec:	f04f 0800 	mov.w	r8, #0
 80088f0:	f04f 0900 	mov.w	r9, #0
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	e78d      	b.n	8008814 <_strtod_l+0x494>
 80088f8:	0800a290 	.word	0x0800a290
 80088fc:	0800a4bc 	.word	0x0800a4bc
 8008900:	0800a288 	.word	0x0800a288
 8008904:	0800a2bf 	.word	0x0800a2bf
 8008908:	0800a64d 	.word	0x0800a64d
 800890c:	0800a3d0 	.word	0x0800a3d0
 8008910:	0800a3a8 	.word	0x0800a3a8
 8008914:	7ff00000 	.word	0x7ff00000
 8008918:	7ca00000 	.word	0x7ca00000
 800891c:	7fefffff 	.word	0x7fefffff
 8008920:	f015 0310 	ands.w	r3, r5, #16
 8008924:	bf18      	it	ne
 8008926:	236a      	movne	r3, #106	; 0x6a
 8008928:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008ccc <_strtod_l+0x94c>
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	2300      	movs	r3, #0
 8008934:	07ea      	lsls	r2, r5, #31
 8008936:	d504      	bpl.n	8008942 <_strtod_l+0x5c2>
 8008938:	e9da 2300 	ldrd	r2, r3, [sl]
 800893c:	f7f7 fe5c 	bl	80005f8 <__aeabi_dmul>
 8008940:	2301      	movs	r3, #1
 8008942:	106d      	asrs	r5, r5, #1
 8008944:	f10a 0a08 	add.w	sl, sl, #8
 8008948:	d1f4      	bne.n	8008934 <_strtod_l+0x5b4>
 800894a:	b10b      	cbz	r3, 8008950 <_strtod_l+0x5d0>
 800894c:	4680      	mov	r8, r0
 800894e:	4689      	mov	r9, r1
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	b1bb      	cbz	r3, 8008984 <_strtod_l+0x604>
 8008954:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008958:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800895c:	2b00      	cmp	r3, #0
 800895e:	4649      	mov	r1, r9
 8008960:	dd10      	ble.n	8008984 <_strtod_l+0x604>
 8008962:	2b1f      	cmp	r3, #31
 8008964:	f340 811e 	ble.w	8008ba4 <_strtod_l+0x824>
 8008968:	2b34      	cmp	r3, #52	; 0x34
 800896a:	bfde      	ittt	le
 800896c:	f04f 33ff 	movle.w	r3, #4294967295
 8008970:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008974:	4093      	lslle	r3, r2
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	bfcc      	ite	gt
 800897c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008980:	ea03 0901 	andle.w	r9, r3, r1
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	4640      	mov	r0, r8
 800898a:	4649      	mov	r1, r9
 800898c:	f7f8 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008990:	2800      	cmp	r0, #0
 8008992:	d1a6      	bne.n	80088e2 <_strtod_l+0x562>
 8008994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800899a:	4633      	mov	r3, r6
 800899c:	465a      	mov	r2, fp
 800899e:	4620      	mov	r0, r4
 80089a0:	f7ff f8cc 	bl	8007b3c <__s2b>
 80089a4:	9009      	str	r0, [sp, #36]	; 0x24
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f43f af2a 	beq.w	8008800 <_strtod_l+0x480>
 80089ac:	9a08      	ldr	r2, [sp, #32]
 80089ae:	9b05      	ldr	r3, [sp, #20]
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	eba3 0307 	sub.w	r3, r3, r7
 80089b6:	bfa8      	it	ge
 80089b8:	2300      	movge	r3, #0
 80089ba:	930c      	str	r3, [sp, #48]	; 0x30
 80089bc:	2500      	movs	r5, #0
 80089be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089c2:	9312      	str	r3, [sp, #72]	; 0x48
 80089c4:	46ab      	mov	fp, r5
 80089c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c8:	4620      	mov	r0, r4
 80089ca:	6859      	ldr	r1, [r3, #4]
 80089cc:	f7ff f80e 	bl	80079ec <_Balloc>
 80089d0:	9005      	str	r0, [sp, #20]
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f43f af18 	beq.w	8008808 <_strtod_l+0x488>
 80089d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	3202      	adds	r2, #2
 80089de:	f103 010c 	add.w	r1, r3, #12
 80089e2:	0092      	lsls	r2, r2, #2
 80089e4:	300c      	adds	r0, #12
 80089e6:	f7fe f872 	bl	8006ace <memcpy>
 80089ea:	ec49 8b10 	vmov	d0, r8, r9
 80089ee:	aa18      	add	r2, sp, #96	; 0x60
 80089f0:	a917      	add	r1, sp, #92	; 0x5c
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7ff fbd6 	bl	80081a4 <__d2b>
 80089f8:	ec49 8b18 	vmov	d8, r8, r9
 80089fc:	9016      	str	r0, [sp, #88]	; 0x58
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f af02 	beq.w	8008808 <_strtod_l+0x488>
 8008a04:	2101      	movs	r1, #1
 8008a06:	4620      	mov	r0, r4
 8008a08:	f7ff f930 	bl	8007c6c <__i2b>
 8008a0c:	4683      	mov	fp, r0
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f aefa 	beq.w	8008808 <_strtod_l+0x488>
 8008a14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a18:	2e00      	cmp	r6, #0
 8008a1a:	bfab      	itete	ge
 8008a1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008a1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008a20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008a22:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008a26:	bfac      	ite	ge
 8008a28:	eb06 0a03 	addge.w	sl, r6, r3
 8008a2c:	1b9f      	sublt	r7, r3, r6
 8008a2e:	9b04      	ldr	r3, [sp, #16]
 8008a30:	1af6      	subs	r6, r6, r3
 8008a32:	4416      	add	r6, r2
 8008a34:	4ba0      	ldr	r3, [pc, #640]	; (8008cb8 <_strtod_l+0x938>)
 8008a36:	3e01      	subs	r6, #1
 8008a38:	429e      	cmp	r6, r3
 8008a3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a3e:	f280 80c4 	bge.w	8008bca <_strtod_l+0x84a>
 8008a42:	1b9b      	subs	r3, r3, r6
 8008a44:	2b1f      	cmp	r3, #31
 8008a46:	eba2 0203 	sub.w	r2, r2, r3
 8008a4a:	f04f 0101 	mov.w	r1, #1
 8008a4e:	f300 80b0 	bgt.w	8008bb2 <_strtod_l+0x832>
 8008a52:	fa01 f303 	lsl.w	r3, r1, r3
 8008a56:	930e      	str	r3, [sp, #56]	; 0x38
 8008a58:	2300      	movs	r3, #0
 8008a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a5c:	eb0a 0602 	add.w	r6, sl, r2
 8008a60:	9b04      	ldr	r3, [sp, #16]
 8008a62:	45b2      	cmp	sl, r6
 8008a64:	4417      	add	r7, r2
 8008a66:	441f      	add	r7, r3
 8008a68:	4653      	mov	r3, sl
 8008a6a:	bfa8      	it	ge
 8008a6c:	4633      	movge	r3, r6
 8008a6e:	42bb      	cmp	r3, r7
 8008a70:	bfa8      	it	ge
 8008a72:	463b      	movge	r3, r7
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfc2      	ittt	gt
 8008a78:	1af6      	subgt	r6, r6, r3
 8008a7a:	1aff      	subgt	r7, r7, r3
 8008a7c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dd17      	ble.n	8008ab6 <_strtod_l+0x736>
 8008a86:	4659      	mov	r1, fp
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7ff f9ae 	bl	8007dec <__pow5mult>
 8008a90:	4683      	mov	fp, r0
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f43f aeb8 	beq.w	8008808 <_strtod_l+0x488>
 8008a98:	4601      	mov	r1, r0
 8008a9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f7ff f8fb 	bl	8007c98 <__multiply>
 8008aa2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f43f aeaf 	beq.w	8008808 <_strtod_l+0x488>
 8008aaa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008aac:	4620      	mov	r0, r4
 8008aae:	f7fe ffdd 	bl	8007a6c <_Bfree>
 8008ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ab4:	9316      	str	r3, [sp, #88]	; 0x58
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	f300 808c 	bgt.w	8008bd4 <_strtod_l+0x854>
 8008abc:	9b08      	ldr	r3, [sp, #32]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dd08      	ble.n	8008ad4 <_strtod_l+0x754>
 8008ac2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ac4:	9905      	ldr	r1, [sp, #20]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff f990 	bl	8007dec <__pow5mult>
 8008acc:	9005      	str	r0, [sp, #20]
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f43f ae9a 	beq.w	8008808 <_strtod_l+0x488>
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	dd08      	ble.n	8008aea <_strtod_l+0x76a>
 8008ad8:	9905      	ldr	r1, [sp, #20]
 8008ada:	463a      	mov	r2, r7
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7ff f9df 	bl	8007ea0 <__lshift>
 8008ae2:	9005      	str	r0, [sp, #20]
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	f43f ae8f 	beq.w	8008808 <_strtod_l+0x488>
 8008aea:	f1ba 0f00 	cmp.w	sl, #0
 8008aee:	dd08      	ble.n	8008b02 <_strtod_l+0x782>
 8008af0:	4659      	mov	r1, fp
 8008af2:	4652      	mov	r2, sl
 8008af4:	4620      	mov	r0, r4
 8008af6:	f7ff f9d3 	bl	8007ea0 <__lshift>
 8008afa:	4683      	mov	fp, r0
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f43f ae83 	beq.w	8008808 <_strtod_l+0x488>
 8008b02:	9a05      	ldr	r2, [sp, #20]
 8008b04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b06:	4620      	mov	r0, r4
 8008b08:	f7ff fa52 	bl	8007fb0 <__mdiff>
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	f43f ae7a 	beq.w	8008808 <_strtod_l+0x488>
 8008b14:	68c3      	ldr	r3, [r0, #12]
 8008b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60c3      	str	r3, [r0, #12]
 8008b1c:	4659      	mov	r1, fp
 8008b1e:	f7ff fa2b 	bl	8007f78 <__mcmp>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	da60      	bge.n	8008be8 <_strtod_l+0x868>
 8008b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b28:	ea53 0308 	orrs.w	r3, r3, r8
 8008b2c:	f040 8084 	bne.w	8008c38 <_strtod_l+0x8b8>
 8008b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d17f      	bne.n	8008c38 <_strtod_l+0x8b8>
 8008b38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b3c:	0d1b      	lsrs	r3, r3, #20
 8008b3e:	051b      	lsls	r3, r3, #20
 8008b40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b44:	d978      	bls.n	8008c38 <_strtod_l+0x8b8>
 8008b46:	696b      	ldr	r3, [r5, #20]
 8008b48:	b913      	cbnz	r3, 8008b50 <_strtod_l+0x7d0>
 8008b4a:	692b      	ldr	r3, [r5, #16]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	dd73      	ble.n	8008c38 <_strtod_l+0x8b8>
 8008b50:	4629      	mov	r1, r5
 8008b52:	2201      	movs	r2, #1
 8008b54:	4620      	mov	r0, r4
 8008b56:	f7ff f9a3 	bl	8007ea0 <__lshift>
 8008b5a:	4659      	mov	r1, fp
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	f7ff fa0b 	bl	8007f78 <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	dd68      	ble.n	8008c38 <_strtod_l+0x8b8>
 8008b66:	9904      	ldr	r1, [sp, #16]
 8008b68:	4a54      	ldr	r2, [pc, #336]	; (8008cbc <_strtod_l+0x93c>)
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	f000 8084 	beq.w	8008c7a <_strtod_l+0x8fa>
 8008b72:	ea02 0109 	and.w	r1, r2, r9
 8008b76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b7a:	dc7e      	bgt.n	8008c7a <_strtod_l+0x8fa>
 8008b7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b80:	f77f aeb3 	ble.w	80088ea <_strtod_l+0x56a>
 8008b84:	4b4e      	ldr	r3, [pc, #312]	; (8008cc0 <_strtod_l+0x940>)
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f7f7 fd34 	bl	80005f8 <__aeabi_dmul>
 8008b90:	4b4a      	ldr	r3, [pc, #296]	; (8008cbc <_strtod_l+0x93c>)
 8008b92:	400b      	ands	r3, r1
 8008b94:	4680      	mov	r8, r0
 8008b96:	4689      	mov	r9, r1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f47f ae3f 	bne.w	800881c <_strtod_l+0x49c>
 8008b9e:	2322      	movs	r3, #34	; 0x22
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	e63b      	b.n	800881c <_strtod_l+0x49c>
 8008ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	ea03 0808 	and.w	r8, r3, r8
 8008bb0:	e6e8      	b.n	8008984 <_strtod_l+0x604>
 8008bb2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008bb6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008bba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008bbe:	36e2      	adds	r6, #226	; 0xe2
 8008bc0:	fa01 f306 	lsl.w	r3, r1, r6
 8008bc4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008bc8:	e748      	b.n	8008a5c <_strtod_l+0x6dc>
 8008bca:	2100      	movs	r1, #0
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008bd2:	e743      	b.n	8008a5c <_strtod_l+0x6dc>
 8008bd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bd6:	4632      	mov	r2, r6
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f7ff f961 	bl	8007ea0 <__lshift>
 8008bde:	9016      	str	r0, [sp, #88]	; 0x58
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f47f af6b 	bne.w	8008abc <_strtod_l+0x73c>
 8008be6:	e60f      	b.n	8008808 <_strtod_l+0x488>
 8008be8:	46ca      	mov	sl, r9
 8008bea:	d171      	bne.n	8008cd0 <_strtod_l+0x950>
 8008bec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bf2:	b352      	cbz	r2, 8008c4a <_strtod_l+0x8ca>
 8008bf4:	4a33      	ldr	r2, [pc, #204]	; (8008cc4 <_strtod_l+0x944>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d12a      	bne.n	8008c50 <_strtod_l+0x8d0>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	b1fb      	cbz	r3, 8008c40 <_strtod_l+0x8c0>
 8008c00:	4b2e      	ldr	r3, [pc, #184]	; (8008cbc <_strtod_l+0x93c>)
 8008c02:	ea09 0303 	and.w	r3, r9, r3
 8008c06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0e:	d81a      	bhi.n	8008c46 <_strtod_l+0x8c6>
 8008c10:	0d1b      	lsrs	r3, r3, #20
 8008c12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	d118      	bne.n	8008c50 <_strtod_l+0x8d0>
 8008c1e:	4b2a      	ldr	r3, [pc, #168]	; (8008cc8 <_strtod_l+0x948>)
 8008c20:	459a      	cmp	sl, r3
 8008c22:	d102      	bne.n	8008c2a <_strtod_l+0x8aa>
 8008c24:	3101      	adds	r1, #1
 8008c26:	f43f adef 	beq.w	8008808 <_strtod_l+0x488>
 8008c2a:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <_strtod_l+0x93c>)
 8008c2c:	ea0a 0303 	and.w	r3, sl, r3
 8008c30:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008c34:	f04f 0800 	mov.w	r8, #0
 8008c38:	9b04      	ldr	r3, [sp, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1a2      	bne.n	8008b84 <_strtod_l+0x804>
 8008c3e:	e5ed      	b.n	800881c <_strtod_l+0x49c>
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295
 8008c44:	e7e9      	b.n	8008c1a <_strtod_l+0x89a>
 8008c46:	4613      	mov	r3, r2
 8008c48:	e7e7      	b.n	8008c1a <_strtod_l+0x89a>
 8008c4a:	ea53 0308 	orrs.w	r3, r3, r8
 8008c4e:	d08a      	beq.n	8008b66 <_strtod_l+0x7e6>
 8008c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c52:	b1e3      	cbz	r3, 8008c8e <_strtod_l+0x90e>
 8008c54:	ea13 0f0a 	tst.w	r3, sl
 8008c58:	d0ee      	beq.n	8008c38 <_strtod_l+0x8b8>
 8008c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c5c:	9a04      	ldr	r2, [sp, #16]
 8008c5e:	4640      	mov	r0, r8
 8008c60:	4649      	mov	r1, r9
 8008c62:	b1c3      	cbz	r3, 8008c96 <_strtod_l+0x916>
 8008c64:	f7ff fb6f 	bl	8008346 <sulp>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	ec51 0b18 	vmov	r0, r1, d8
 8008c70:	f7f7 fb0c 	bl	800028c <__adddf3>
 8008c74:	4680      	mov	r8, r0
 8008c76:	4689      	mov	r9, r1
 8008c78:	e7de      	b.n	8008c38 <_strtod_l+0x8b8>
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c80:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c84:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c88:	f04f 38ff 	mov.w	r8, #4294967295
 8008c8c:	e7d4      	b.n	8008c38 <_strtod_l+0x8b8>
 8008c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c90:	ea13 0f08 	tst.w	r3, r8
 8008c94:	e7e0      	b.n	8008c58 <_strtod_l+0x8d8>
 8008c96:	f7ff fb56 	bl	8008346 <sulp>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	ec51 0b18 	vmov	r0, r1, d8
 8008ca2:	f7f7 faf1 	bl	8000288 <__aeabi_dsub>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4680      	mov	r8, r0
 8008cac:	4689      	mov	r9, r1
 8008cae:	f7f7 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d0c0      	beq.n	8008c38 <_strtod_l+0x8b8>
 8008cb6:	e618      	b.n	80088ea <_strtod_l+0x56a>
 8008cb8:	fffffc02 	.word	0xfffffc02
 8008cbc:	7ff00000 	.word	0x7ff00000
 8008cc0:	39500000 	.word	0x39500000
 8008cc4:	000fffff 	.word	0x000fffff
 8008cc8:	7fefffff 	.word	0x7fefffff
 8008ccc:	0800a4d0 	.word	0x0800a4d0
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f7ff fac0 	bl	8008258 <__ratio>
 8008cd8:	ec57 6b10 	vmov	r6, r7, d0
 8008cdc:	ee10 0a10 	vmov	r0, s0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	f7f7 ff02 	bl	8000af0 <__aeabi_dcmple>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d071      	beq.n	8008dd4 <_strtod_l+0xa54>
 8008cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d17c      	bne.n	8008df0 <_strtod_l+0xa70>
 8008cf6:	f1b8 0f00 	cmp.w	r8, #0
 8008cfa:	d15a      	bne.n	8008db2 <_strtod_l+0xa32>
 8008cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d15d      	bne.n	8008dc0 <_strtod_l+0xa40>
 8008d04:	4b90      	ldr	r3, [pc, #576]	; (8008f48 <_strtod_l+0xbc8>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 fee6 	bl	8000adc <__aeabi_dcmplt>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d15c      	bne.n	8008dce <_strtod_l+0xa4e>
 8008d14:	4630      	mov	r0, r6
 8008d16:	4639      	mov	r1, r7
 8008d18:	4b8c      	ldr	r3, [pc, #560]	; (8008f4c <_strtod_l+0xbcc>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f7f7 fc6c 	bl	80005f8 <__aeabi_dmul>
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008d28:	9606      	str	r6, [sp, #24]
 8008d2a:	9307      	str	r3, [sp, #28]
 8008d2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d34:	4b86      	ldr	r3, [pc, #536]	; (8008f50 <_strtod_l+0xbd0>)
 8008d36:	ea0a 0303 	and.w	r3, sl, r3
 8008d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d3e:	4b85      	ldr	r3, [pc, #532]	; (8008f54 <_strtod_l+0xbd4>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	f040 8090 	bne.w	8008e66 <_strtod_l+0xae6>
 8008d46:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008d4a:	ec49 8b10 	vmov	d0, r8, r9
 8008d4e:	f7ff f9b9 	bl	80080c4 <__ulp>
 8008d52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d56:	ec51 0b10 	vmov	r0, r1, d0
 8008d5a:	f7f7 fc4d 	bl	80005f8 <__aeabi_dmul>
 8008d5e:	4642      	mov	r2, r8
 8008d60:	464b      	mov	r3, r9
 8008d62:	f7f7 fa93 	bl	800028c <__adddf3>
 8008d66:	460b      	mov	r3, r1
 8008d68:	4979      	ldr	r1, [pc, #484]	; (8008f50 <_strtod_l+0xbd0>)
 8008d6a:	4a7b      	ldr	r2, [pc, #492]	; (8008f58 <_strtod_l+0xbd8>)
 8008d6c:	4019      	ands	r1, r3
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	4680      	mov	r8, r0
 8008d72:	d944      	bls.n	8008dfe <_strtod_l+0xa7e>
 8008d74:	ee18 2a90 	vmov	r2, s17
 8008d78:	4b78      	ldr	r3, [pc, #480]	; (8008f5c <_strtod_l+0xbdc>)
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d104      	bne.n	8008d88 <_strtod_l+0xa08>
 8008d7e:	ee18 3a10 	vmov	r3, s16
 8008d82:	3301      	adds	r3, #1
 8008d84:	f43f ad40 	beq.w	8008808 <_strtod_l+0x488>
 8008d88:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008f5c <_strtod_l+0xbdc>
 8008d8c:	f04f 38ff 	mov.w	r8, #4294967295
 8008d90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7fe fe6a 	bl	8007a6c <_Bfree>
 8008d98:	9905      	ldr	r1, [sp, #20]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f7fe fe66 	bl	8007a6c <_Bfree>
 8008da0:	4659      	mov	r1, fp
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7fe fe62 	bl	8007a6c <_Bfree>
 8008da8:	4629      	mov	r1, r5
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7fe fe5e 	bl	8007a6c <_Bfree>
 8008db0:	e609      	b.n	80089c6 <_strtod_l+0x646>
 8008db2:	f1b8 0f01 	cmp.w	r8, #1
 8008db6:	d103      	bne.n	8008dc0 <_strtod_l+0xa40>
 8008db8:	f1b9 0f00 	cmp.w	r9, #0
 8008dbc:	f43f ad95 	beq.w	80088ea <_strtod_l+0x56a>
 8008dc0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008f18 <_strtod_l+0xb98>
 8008dc4:	4f60      	ldr	r7, [pc, #384]	; (8008f48 <_strtod_l+0xbc8>)
 8008dc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dca:	2600      	movs	r6, #0
 8008dcc:	e7ae      	b.n	8008d2c <_strtod_l+0x9ac>
 8008dce:	4f5f      	ldr	r7, [pc, #380]	; (8008f4c <_strtod_l+0xbcc>)
 8008dd0:	2600      	movs	r6, #0
 8008dd2:	e7a7      	b.n	8008d24 <_strtod_l+0x9a4>
 8008dd4:	4b5d      	ldr	r3, [pc, #372]	; (8008f4c <_strtod_l+0xbcc>)
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4639      	mov	r1, r7
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f7f7 fc0c 	bl	80005f8 <__aeabi_dmul>
 8008de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de2:	4606      	mov	r6, r0
 8008de4:	460f      	mov	r7, r1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d09c      	beq.n	8008d24 <_strtod_l+0x9a4>
 8008dea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008dee:	e79d      	b.n	8008d2c <_strtod_l+0x9ac>
 8008df0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008f20 <_strtod_l+0xba0>
 8008df4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008df8:	ec57 6b17 	vmov	r6, r7, d7
 8008dfc:	e796      	b.n	8008d2c <_strtod_l+0x9ac>
 8008dfe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008e02:	9b04      	ldr	r3, [sp, #16]
 8008e04:	46ca      	mov	sl, r9
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1c2      	bne.n	8008d90 <_strtod_l+0xa10>
 8008e0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e10:	0d1b      	lsrs	r3, r3, #20
 8008e12:	051b      	lsls	r3, r3, #20
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d1bb      	bne.n	8008d90 <_strtod_l+0xa10>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 ff4c 	bl	8000cb8 <__aeabi_d2lz>
 8008e20:	f7f7 fbbc 	bl	800059c <__aeabi_l2d>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7f7 fa2c 	bl	8000288 <__aeabi_dsub>
 8008e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e36:	ea43 0308 	orr.w	r3, r3, r8
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	460f      	mov	r7, r1
 8008e40:	d054      	beq.n	8008eec <_strtod_l+0xb6c>
 8008e42:	a339      	add	r3, pc, #228	; (adr r3, 8008f28 <_strtod_l+0xba8>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fe48 	bl	8000adc <__aeabi_dcmplt>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f47f ace5 	bne.w	800881c <_strtod_l+0x49c>
 8008e52:	a337      	add	r3, pc, #220	; (adr r3, 8008f30 <_strtod_l+0xbb0>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 fe5c 	bl	8000b18 <__aeabi_dcmpgt>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d095      	beq.n	8008d90 <_strtod_l+0xa10>
 8008e64:	e4da      	b.n	800881c <_strtod_l+0x49c>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	b333      	cbz	r3, 8008eb8 <_strtod_l+0xb38>
 8008e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e70:	d822      	bhi.n	8008eb8 <_strtod_l+0xb38>
 8008e72:	a331      	add	r3, pc, #196	; (adr r3, 8008f38 <_strtod_l+0xbb8>)
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 fe38 	bl	8000af0 <__aeabi_dcmple>
 8008e80:	b1a0      	cbz	r0, 8008eac <_strtod_l+0xb2c>
 8008e82:	4639      	mov	r1, r7
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7f7 fe8f 	bl	8000ba8 <__aeabi_d2uiz>
 8008e8a:	2801      	cmp	r0, #1
 8008e8c:	bf38      	it	cc
 8008e8e:	2001      	movcc	r0, #1
 8008e90:	f7f7 fb38 	bl	8000504 <__aeabi_ui2d>
 8008e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e96:	4606      	mov	r6, r0
 8008e98:	460f      	mov	r7, r1
 8008e9a:	bb23      	cbnz	r3, 8008ee6 <_strtod_l+0xb66>
 8008e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ea0:	9010      	str	r0, [sp, #64]	; 0x40
 8008ea2:	9311      	str	r3, [sp, #68]	; 0x44
 8008ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ea8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008eac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eb0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ebc:	eeb0 0a48 	vmov.f32	s0, s16
 8008ec0:	eef0 0a68 	vmov.f32	s1, s17
 8008ec4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008ec8:	f7ff f8fc 	bl	80080c4 <__ulp>
 8008ecc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ed0:	ec53 2b10 	vmov	r2, r3, d0
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	ec53 2b18 	vmov	r2, r3, d8
 8008edc:	f7f7 f9d6 	bl	800028c <__adddf3>
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	4689      	mov	r9, r1
 8008ee4:	e78d      	b.n	8008e02 <_strtod_l+0xa82>
 8008ee6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008eea:	e7db      	b.n	8008ea4 <_strtod_l+0xb24>
 8008eec:	a314      	add	r3, pc, #80	; (adr r3, 8008f40 <_strtod_l+0xbc0>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8008ef6:	e7b3      	b.n	8008e60 <_strtod_l+0xae0>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	930a      	str	r3, [sp, #40]	; 0x28
 8008efc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	f7ff ba7c 	b.w	80083fe <_strtod_l+0x7e>
 8008f06:	2a65      	cmp	r2, #101	; 0x65
 8008f08:	f43f ab75 	beq.w	80085f6 <_strtod_l+0x276>
 8008f0c:	2a45      	cmp	r2, #69	; 0x45
 8008f0e:	f43f ab72 	beq.w	80085f6 <_strtod_l+0x276>
 8008f12:	2301      	movs	r3, #1
 8008f14:	f7ff bbaa 	b.w	800866c <_strtod_l+0x2ec>
 8008f18:	00000000 	.word	0x00000000
 8008f1c:	bff00000 	.word	0xbff00000
 8008f20:	00000000 	.word	0x00000000
 8008f24:	3ff00000 	.word	0x3ff00000
 8008f28:	94a03595 	.word	0x94a03595
 8008f2c:	3fdfffff 	.word	0x3fdfffff
 8008f30:	35afe535 	.word	0x35afe535
 8008f34:	3fe00000 	.word	0x3fe00000
 8008f38:	ffc00000 	.word	0xffc00000
 8008f3c:	41dfffff 	.word	0x41dfffff
 8008f40:	94a03595 	.word	0x94a03595
 8008f44:	3fcfffff 	.word	0x3fcfffff
 8008f48:	3ff00000 	.word	0x3ff00000
 8008f4c:	3fe00000 	.word	0x3fe00000
 8008f50:	7ff00000 	.word	0x7ff00000
 8008f54:	7fe00000 	.word	0x7fe00000
 8008f58:	7c9fffff 	.word	0x7c9fffff
 8008f5c:	7fefffff 	.word	0x7fefffff

08008f60 <_strtod_r>:
 8008f60:	4b01      	ldr	r3, [pc, #4]	; (8008f68 <_strtod_r+0x8>)
 8008f62:	f7ff ba0d 	b.w	8008380 <_strtod_l>
 8008f66:	bf00      	nop
 8008f68:	2000007c 	.word	0x2000007c

08008f6c <_strtol_l.constprop.0>:
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f72:	d001      	beq.n	8008f78 <_strtol_l.constprop.0+0xc>
 8008f74:	2b24      	cmp	r3, #36	; 0x24
 8008f76:	d906      	bls.n	8008f86 <_strtol_l.constprop.0+0x1a>
 8008f78:	f7fd fd7c 	bl	8006a74 <__errno>
 8008f7c:	2316      	movs	r3, #22
 8008f7e:	6003      	str	r3, [r0, #0]
 8008f80:	2000      	movs	r0, #0
 8008f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800906c <_strtol_l.constprop.0+0x100>
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	462e      	mov	r6, r5
 8008f8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f96:	f017 0708 	ands.w	r7, r7, #8
 8008f9a:	d1f7      	bne.n	8008f8c <_strtol_l.constprop.0+0x20>
 8008f9c:	2c2d      	cmp	r4, #45	; 0x2d
 8008f9e:	d132      	bne.n	8009006 <_strtol_l.constprop.0+0x9a>
 8008fa0:	782c      	ldrb	r4, [r5, #0]
 8008fa2:	2701      	movs	r7, #1
 8008fa4:	1cb5      	adds	r5, r6, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d05b      	beq.n	8009062 <_strtol_l.constprop.0+0xf6>
 8008faa:	2b10      	cmp	r3, #16
 8008fac:	d109      	bne.n	8008fc2 <_strtol_l.constprop.0+0x56>
 8008fae:	2c30      	cmp	r4, #48	; 0x30
 8008fb0:	d107      	bne.n	8008fc2 <_strtol_l.constprop.0+0x56>
 8008fb2:	782c      	ldrb	r4, [r5, #0]
 8008fb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008fb8:	2c58      	cmp	r4, #88	; 0x58
 8008fba:	d14d      	bne.n	8009058 <_strtol_l.constprop.0+0xec>
 8008fbc:	786c      	ldrb	r4, [r5, #1]
 8008fbe:	2310      	movs	r3, #16
 8008fc0:	3502      	adds	r5, #2
 8008fc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008fc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fca:	f04f 0e00 	mov.w	lr, #0
 8008fce:	fbb8 f9f3 	udiv	r9, r8, r3
 8008fd2:	4676      	mov	r6, lr
 8008fd4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fd8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008fdc:	f1bc 0f09 	cmp.w	ip, #9
 8008fe0:	d816      	bhi.n	8009010 <_strtol_l.constprop.0+0xa4>
 8008fe2:	4664      	mov	r4, ip
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	dd24      	ble.n	8009032 <_strtol_l.constprop.0+0xc6>
 8008fe8:	f1be 3fff 	cmp.w	lr, #4294967295
 8008fec:	d008      	beq.n	8009000 <_strtol_l.constprop.0+0x94>
 8008fee:	45b1      	cmp	r9, r6
 8008ff0:	d31c      	bcc.n	800902c <_strtol_l.constprop.0+0xc0>
 8008ff2:	d101      	bne.n	8008ff8 <_strtol_l.constprop.0+0x8c>
 8008ff4:	45a2      	cmp	sl, r4
 8008ff6:	db19      	blt.n	800902c <_strtol_l.constprop.0+0xc0>
 8008ff8:	fb06 4603 	mla	r6, r6, r3, r4
 8008ffc:	f04f 0e01 	mov.w	lr, #1
 8009000:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009004:	e7e8      	b.n	8008fd8 <_strtol_l.constprop.0+0x6c>
 8009006:	2c2b      	cmp	r4, #43	; 0x2b
 8009008:	bf04      	itt	eq
 800900a:	782c      	ldrbeq	r4, [r5, #0]
 800900c:	1cb5      	addeq	r5, r6, #2
 800900e:	e7ca      	b.n	8008fa6 <_strtol_l.constprop.0+0x3a>
 8009010:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009014:	f1bc 0f19 	cmp.w	ip, #25
 8009018:	d801      	bhi.n	800901e <_strtol_l.constprop.0+0xb2>
 800901a:	3c37      	subs	r4, #55	; 0x37
 800901c:	e7e2      	b.n	8008fe4 <_strtol_l.constprop.0+0x78>
 800901e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009022:	f1bc 0f19 	cmp.w	ip, #25
 8009026:	d804      	bhi.n	8009032 <_strtol_l.constprop.0+0xc6>
 8009028:	3c57      	subs	r4, #87	; 0x57
 800902a:	e7db      	b.n	8008fe4 <_strtol_l.constprop.0+0x78>
 800902c:	f04f 3eff 	mov.w	lr, #4294967295
 8009030:	e7e6      	b.n	8009000 <_strtol_l.constprop.0+0x94>
 8009032:	f1be 3fff 	cmp.w	lr, #4294967295
 8009036:	d105      	bne.n	8009044 <_strtol_l.constprop.0+0xd8>
 8009038:	2322      	movs	r3, #34	; 0x22
 800903a:	6003      	str	r3, [r0, #0]
 800903c:	4646      	mov	r6, r8
 800903e:	b942      	cbnz	r2, 8009052 <_strtol_l.constprop.0+0xe6>
 8009040:	4630      	mov	r0, r6
 8009042:	e79e      	b.n	8008f82 <_strtol_l.constprop.0+0x16>
 8009044:	b107      	cbz	r7, 8009048 <_strtol_l.constprop.0+0xdc>
 8009046:	4276      	negs	r6, r6
 8009048:	2a00      	cmp	r2, #0
 800904a:	d0f9      	beq.n	8009040 <_strtol_l.constprop.0+0xd4>
 800904c:	f1be 0f00 	cmp.w	lr, #0
 8009050:	d000      	beq.n	8009054 <_strtol_l.constprop.0+0xe8>
 8009052:	1e69      	subs	r1, r5, #1
 8009054:	6011      	str	r1, [r2, #0]
 8009056:	e7f3      	b.n	8009040 <_strtol_l.constprop.0+0xd4>
 8009058:	2430      	movs	r4, #48	; 0x30
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1b1      	bne.n	8008fc2 <_strtol_l.constprop.0+0x56>
 800905e:	2308      	movs	r3, #8
 8009060:	e7af      	b.n	8008fc2 <_strtol_l.constprop.0+0x56>
 8009062:	2c30      	cmp	r4, #48	; 0x30
 8009064:	d0a5      	beq.n	8008fb2 <_strtol_l.constprop.0+0x46>
 8009066:	230a      	movs	r3, #10
 8009068:	e7ab      	b.n	8008fc2 <_strtol_l.constprop.0+0x56>
 800906a:	bf00      	nop
 800906c:	0800a4f9 	.word	0x0800a4f9

08009070 <_strtol_r>:
 8009070:	f7ff bf7c 	b.w	8008f6c <_strtol_l.constprop.0>

08009074 <__ssputs_r>:
 8009074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	688e      	ldr	r6, [r1, #8]
 800907a:	461f      	mov	r7, r3
 800907c:	42be      	cmp	r6, r7
 800907e:	680b      	ldr	r3, [r1, #0]
 8009080:	4682      	mov	sl, r0
 8009082:	460c      	mov	r4, r1
 8009084:	4690      	mov	r8, r2
 8009086:	d82c      	bhi.n	80090e2 <__ssputs_r+0x6e>
 8009088:	898a      	ldrh	r2, [r1, #12]
 800908a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800908e:	d026      	beq.n	80090de <__ssputs_r+0x6a>
 8009090:	6965      	ldr	r5, [r4, #20]
 8009092:	6909      	ldr	r1, [r1, #16]
 8009094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009098:	eba3 0901 	sub.w	r9, r3, r1
 800909c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a0:	1c7b      	adds	r3, r7, #1
 80090a2:	444b      	add	r3, r9
 80090a4:	106d      	asrs	r5, r5, #1
 80090a6:	429d      	cmp	r5, r3
 80090a8:	bf38      	it	cc
 80090aa:	461d      	movcc	r5, r3
 80090ac:	0553      	lsls	r3, r2, #21
 80090ae:	d527      	bpl.n	8009100 <__ssputs_r+0x8c>
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7fe fc0f 	bl	80078d4 <_malloc_r>
 80090b6:	4606      	mov	r6, r0
 80090b8:	b360      	cbz	r0, 8009114 <__ssputs_r+0xa0>
 80090ba:	6921      	ldr	r1, [r4, #16]
 80090bc:	464a      	mov	r2, r9
 80090be:	f7fd fd06 	bl	8006ace <memcpy>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	6126      	str	r6, [r4, #16]
 80090d0:	6165      	str	r5, [r4, #20]
 80090d2:	444e      	add	r6, r9
 80090d4:	eba5 0509 	sub.w	r5, r5, r9
 80090d8:	6026      	str	r6, [r4, #0]
 80090da:	60a5      	str	r5, [r4, #8]
 80090dc:	463e      	mov	r6, r7
 80090de:	42be      	cmp	r6, r7
 80090e0:	d900      	bls.n	80090e4 <__ssputs_r+0x70>
 80090e2:	463e      	mov	r6, r7
 80090e4:	6820      	ldr	r0, [r4, #0]
 80090e6:	4632      	mov	r2, r6
 80090e8:	4641      	mov	r1, r8
 80090ea:	f000 f9c9 	bl	8009480 <memmove>
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	1b9b      	subs	r3, r3, r6
 80090f2:	60a3      	str	r3, [r4, #8]
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	4433      	add	r3, r6
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	2000      	movs	r0, #0
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	462a      	mov	r2, r5
 8009102:	f000 fd9e 	bl	8009c42 <_realloc_r>
 8009106:	4606      	mov	r6, r0
 8009108:	2800      	cmp	r0, #0
 800910a:	d1e0      	bne.n	80090ce <__ssputs_r+0x5a>
 800910c:	6921      	ldr	r1, [r4, #16]
 800910e:	4650      	mov	r0, sl
 8009110:	f7fe fb6c 	bl	80077ec <_free_r>
 8009114:	230c      	movs	r3, #12
 8009116:	f8ca 3000 	str.w	r3, [sl]
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	f04f 30ff 	mov.w	r0, #4294967295
 8009126:	e7e9      	b.n	80090fc <__ssputs_r+0x88>

08009128 <_svfiprintf_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	4698      	mov	r8, r3
 800912e:	898b      	ldrh	r3, [r1, #12]
 8009130:	061b      	lsls	r3, r3, #24
 8009132:	b09d      	sub	sp, #116	; 0x74
 8009134:	4607      	mov	r7, r0
 8009136:	460d      	mov	r5, r1
 8009138:	4614      	mov	r4, r2
 800913a:	d50e      	bpl.n	800915a <_svfiprintf_r+0x32>
 800913c:	690b      	ldr	r3, [r1, #16]
 800913e:	b963      	cbnz	r3, 800915a <_svfiprintf_r+0x32>
 8009140:	2140      	movs	r1, #64	; 0x40
 8009142:	f7fe fbc7 	bl	80078d4 <_malloc_r>
 8009146:	6028      	str	r0, [r5, #0]
 8009148:	6128      	str	r0, [r5, #16]
 800914a:	b920      	cbnz	r0, 8009156 <_svfiprintf_r+0x2e>
 800914c:	230c      	movs	r3, #12
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	e0d0      	b.n	80092f8 <_svfiprintf_r+0x1d0>
 8009156:	2340      	movs	r3, #64	; 0x40
 8009158:	616b      	str	r3, [r5, #20]
 800915a:	2300      	movs	r3, #0
 800915c:	9309      	str	r3, [sp, #36]	; 0x24
 800915e:	2320      	movs	r3, #32
 8009160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009164:	f8cd 800c 	str.w	r8, [sp, #12]
 8009168:	2330      	movs	r3, #48	; 0x30
 800916a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009310 <_svfiprintf_r+0x1e8>
 800916e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009172:	f04f 0901 	mov.w	r9, #1
 8009176:	4623      	mov	r3, r4
 8009178:	469a      	mov	sl, r3
 800917a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917e:	b10a      	cbz	r2, 8009184 <_svfiprintf_r+0x5c>
 8009180:	2a25      	cmp	r2, #37	; 0x25
 8009182:	d1f9      	bne.n	8009178 <_svfiprintf_r+0x50>
 8009184:	ebba 0b04 	subs.w	fp, sl, r4
 8009188:	d00b      	beq.n	80091a2 <_svfiprintf_r+0x7a>
 800918a:	465b      	mov	r3, fp
 800918c:	4622      	mov	r2, r4
 800918e:	4629      	mov	r1, r5
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff ff6f 	bl	8009074 <__ssputs_r>
 8009196:	3001      	adds	r0, #1
 8009198:	f000 80a9 	beq.w	80092ee <_svfiprintf_r+0x1c6>
 800919c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800919e:	445a      	add	r2, fp
 80091a0:	9209      	str	r2, [sp, #36]	; 0x24
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80a1 	beq.w	80092ee <_svfiprintf_r+0x1c6>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b6:	f10a 0a01 	add.w	sl, sl, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c2:	931a      	str	r3, [sp, #104]	; 0x68
 80091c4:	4654      	mov	r4, sl
 80091c6:	2205      	movs	r2, #5
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	4850      	ldr	r0, [pc, #320]	; (8009310 <_svfiprintf_r+0x1e8>)
 80091ce:	f7f6 ffff 	bl	80001d0 <memchr>
 80091d2:	9a04      	ldr	r2, [sp, #16]
 80091d4:	b9d8      	cbnz	r0, 800920e <_svfiprintf_r+0xe6>
 80091d6:	06d0      	lsls	r0, r2, #27
 80091d8:	bf44      	itt	mi
 80091da:	2320      	movmi	r3, #32
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e0:	0711      	lsls	r1, r2, #28
 80091e2:	bf44      	itt	mi
 80091e4:	232b      	movmi	r3, #43	; 0x2b
 80091e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b2a      	cmp	r3, #42	; 0x2a
 80091f0:	d015      	beq.n	800921e <_svfiprintf_r+0xf6>
 80091f2:	9a07      	ldr	r2, [sp, #28]
 80091f4:	4654      	mov	r4, sl
 80091f6:	2000      	movs	r0, #0
 80091f8:	f04f 0c0a 	mov.w	ip, #10
 80091fc:	4621      	mov	r1, r4
 80091fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009202:	3b30      	subs	r3, #48	; 0x30
 8009204:	2b09      	cmp	r3, #9
 8009206:	d94d      	bls.n	80092a4 <_svfiprintf_r+0x17c>
 8009208:	b1b0      	cbz	r0, 8009238 <_svfiprintf_r+0x110>
 800920a:	9207      	str	r2, [sp, #28]
 800920c:	e014      	b.n	8009238 <_svfiprintf_r+0x110>
 800920e:	eba0 0308 	sub.w	r3, r0, r8
 8009212:	fa09 f303 	lsl.w	r3, r9, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	46a2      	mov	sl, r4
 800921c:	e7d2      	b.n	80091c4 <_svfiprintf_r+0x9c>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	9103      	str	r1, [sp, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbb      	ittet	lt
 800922a:	425b      	neglt	r3, r3
 800922c:	f042 0202 	orrlt.w	r2, r2, #2
 8009230:	9307      	strge	r3, [sp, #28]
 8009232:	9307      	strlt	r3, [sp, #28]
 8009234:	bfb8      	it	lt
 8009236:	9204      	strlt	r2, [sp, #16]
 8009238:	7823      	ldrb	r3, [r4, #0]
 800923a:	2b2e      	cmp	r3, #46	; 0x2e
 800923c:	d10c      	bne.n	8009258 <_svfiprintf_r+0x130>
 800923e:	7863      	ldrb	r3, [r4, #1]
 8009240:	2b2a      	cmp	r3, #42	; 0x2a
 8009242:	d134      	bne.n	80092ae <_svfiprintf_r+0x186>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	9203      	str	r2, [sp, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfb8      	it	lt
 8009250:	f04f 33ff 	movlt.w	r3, #4294967295
 8009254:	3402      	adds	r4, #2
 8009256:	9305      	str	r3, [sp, #20]
 8009258:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009320 <_svfiprintf_r+0x1f8>
 800925c:	7821      	ldrb	r1, [r4, #0]
 800925e:	2203      	movs	r2, #3
 8009260:	4650      	mov	r0, sl
 8009262:	f7f6 ffb5 	bl	80001d0 <memchr>
 8009266:	b138      	cbz	r0, 8009278 <_svfiprintf_r+0x150>
 8009268:	9b04      	ldr	r3, [sp, #16]
 800926a:	eba0 000a 	sub.w	r0, r0, sl
 800926e:	2240      	movs	r2, #64	; 0x40
 8009270:	4082      	lsls	r2, r0
 8009272:	4313      	orrs	r3, r2
 8009274:	3401      	adds	r4, #1
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	4825      	ldr	r0, [pc, #148]	; (8009314 <_svfiprintf_r+0x1ec>)
 800927e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009282:	2206      	movs	r2, #6
 8009284:	f7f6 ffa4 	bl	80001d0 <memchr>
 8009288:	2800      	cmp	r0, #0
 800928a:	d038      	beq.n	80092fe <_svfiprintf_r+0x1d6>
 800928c:	4b22      	ldr	r3, [pc, #136]	; (8009318 <_svfiprintf_r+0x1f0>)
 800928e:	bb1b      	cbnz	r3, 80092d8 <_svfiprintf_r+0x1b0>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	3307      	adds	r3, #7
 8009294:	f023 0307 	bic.w	r3, r3, #7
 8009298:	3308      	adds	r3, #8
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929e:	4433      	add	r3, r6
 80092a0:	9309      	str	r3, [sp, #36]	; 0x24
 80092a2:	e768      	b.n	8009176 <_svfiprintf_r+0x4e>
 80092a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a8:	460c      	mov	r4, r1
 80092aa:	2001      	movs	r0, #1
 80092ac:	e7a6      	b.n	80091fc <_svfiprintf_r+0xd4>
 80092ae:	2300      	movs	r3, #0
 80092b0:	3401      	adds	r4, #1
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	4619      	mov	r1, r3
 80092b6:	f04f 0c0a 	mov.w	ip, #10
 80092ba:	4620      	mov	r0, r4
 80092bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c0:	3a30      	subs	r2, #48	; 0x30
 80092c2:	2a09      	cmp	r2, #9
 80092c4:	d903      	bls.n	80092ce <_svfiprintf_r+0x1a6>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0c6      	beq.n	8009258 <_svfiprintf_r+0x130>
 80092ca:	9105      	str	r1, [sp, #20]
 80092cc:	e7c4      	b.n	8009258 <_svfiprintf_r+0x130>
 80092ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d2:	4604      	mov	r4, r0
 80092d4:	2301      	movs	r3, #1
 80092d6:	e7f0      	b.n	80092ba <_svfiprintf_r+0x192>
 80092d8:	ab03      	add	r3, sp, #12
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	462a      	mov	r2, r5
 80092de:	4b0f      	ldr	r3, [pc, #60]	; (800931c <_svfiprintf_r+0x1f4>)
 80092e0:	a904      	add	r1, sp, #16
 80092e2:	4638      	mov	r0, r7
 80092e4:	f7fc fc78 	bl	8005bd8 <_printf_float>
 80092e8:	1c42      	adds	r2, r0, #1
 80092ea:	4606      	mov	r6, r0
 80092ec:	d1d6      	bne.n	800929c <_svfiprintf_r+0x174>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	065b      	lsls	r3, r3, #25
 80092f2:	f53f af2d 	bmi.w	8009150 <_svfiprintf_r+0x28>
 80092f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092f8:	b01d      	add	sp, #116	; 0x74
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	462a      	mov	r2, r5
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <_svfiprintf_r+0x1f4>)
 8009306:	a904      	add	r1, sp, #16
 8009308:	4638      	mov	r0, r7
 800930a:	f7fc ff09 	bl	8006120 <_printf_i>
 800930e:	e7eb      	b.n	80092e8 <_svfiprintf_r+0x1c0>
 8009310:	0800a5f9 	.word	0x0800a5f9
 8009314:	0800a603 	.word	0x0800a603
 8009318:	08005bd9 	.word	0x08005bd9
 800931c:	08009075 	.word	0x08009075
 8009320:	0800a5ff 	.word	0x0800a5ff

08009324 <__sflush_r>:
 8009324:	898a      	ldrh	r2, [r1, #12]
 8009326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	4605      	mov	r5, r0
 800932c:	0710      	lsls	r0, r2, #28
 800932e:	460c      	mov	r4, r1
 8009330:	d458      	bmi.n	80093e4 <__sflush_r+0xc0>
 8009332:	684b      	ldr	r3, [r1, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	dc05      	bgt.n	8009344 <__sflush_r+0x20>
 8009338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	dc02      	bgt.n	8009344 <__sflush_r+0x20>
 800933e:	2000      	movs	r0, #0
 8009340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009346:	2e00      	cmp	r6, #0
 8009348:	d0f9      	beq.n	800933e <__sflush_r+0x1a>
 800934a:	2300      	movs	r3, #0
 800934c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009350:	682f      	ldr	r7, [r5, #0]
 8009352:	6a21      	ldr	r1, [r4, #32]
 8009354:	602b      	str	r3, [r5, #0]
 8009356:	d032      	beq.n	80093be <__sflush_r+0x9a>
 8009358:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	075a      	lsls	r2, r3, #29
 800935e:	d505      	bpl.n	800936c <__sflush_r+0x48>
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	1ac0      	subs	r0, r0, r3
 8009364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009366:	b10b      	cbz	r3, 800936c <__sflush_r+0x48>
 8009368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800936a:	1ac0      	subs	r0, r0, r3
 800936c:	2300      	movs	r3, #0
 800936e:	4602      	mov	r2, r0
 8009370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009372:	6a21      	ldr	r1, [r4, #32]
 8009374:	4628      	mov	r0, r5
 8009376:	47b0      	blx	r6
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	d106      	bne.n	800938c <__sflush_r+0x68>
 800937e:	6829      	ldr	r1, [r5, #0]
 8009380:	291d      	cmp	r1, #29
 8009382:	d82b      	bhi.n	80093dc <__sflush_r+0xb8>
 8009384:	4a29      	ldr	r2, [pc, #164]	; (800942c <__sflush_r+0x108>)
 8009386:	410a      	asrs	r2, r1
 8009388:	07d6      	lsls	r6, r2, #31
 800938a:	d427      	bmi.n	80093dc <__sflush_r+0xb8>
 800938c:	2200      	movs	r2, #0
 800938e:	6062      	str	r2, [r4, #4]
 8009390:	04d9      	lsls	r1, r3, #19
 8009392:	6922      	ldr	r2, [r4, #16]
 8009394:	6022      	str	r2, [r4, #0]
 8009396:	d504      	bpl.n	80093a2 <__sflush_r+0x7e>
 8009398:	1c42      	adds	r2, r0, #1
 800939a:	d101      	bne.n	80093a0 <__sflush_r+0x7c>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b903      	cbnz	r3, 80093a2 <__sflush_r+0x7e>
 80093a0:	6560      	str	r0, [r4, #84]	; 0x54
 80093a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a4:	602f      	str	r7, [r5, #0]
 80093a6:	2900      	cmp	r1, #0
 80093a8:	d0c9      	beq.n	800933e <__sflush_r+0x1a>
 80093aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ae:	4299      	cmp	r1, r3
 80093b0:	d002      	beq.n	80093b8 <__sflush_r+0x94>
 80093b2:	4628      	mov	r0, r5
 80093b4:	f7fe fa1a 	bl	80077ec <_free_r>
 80093b8:	2000      	movs	r0, #0
 80093ba:	6360      	str	r0, [r4, #52]	; 0x34
 80093bc:	e7c0      	b.n	8009340 <__sflush_r+0x1c>
 80093be:	2301      	movs	r3, #1
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b0      	blx	r6
 80093c4:	1c41      	adds	r1, r0, #1
 80093c6:	d1c8      	bne.n	800935a <__sflush_r+0x36>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0c5      	beq.n	800935a <__sflush_r+0x36>
 80093ce:	2b1d      	cmp	r3, #29
 80093d0:	d001      	beq.n	80093d6 <__sflush_r+0xb2>
 80093d2:	2b16      	cmp	r3, #22
 80093d4:	d101      	bne.n	80093da <__sflush_r+0xb6>
 80093d6:	602f      	str	r7, [r5, #0]
 80093d8:	e7b1      	b.n	800933e <__sflush_r+0x1a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	e7ad      	b.n	8009340 <__sflush_r+0x1c>
 80093e4:	690f      	ldr	r7, [r1, #16]
 80093e6:	2f00      	cmp	r7, #0
 80093e8:	d0a9      	beq.n	800933e <__sflush_r+0x1a>
 80093ea:	0793      	lsls	r3, r2, #30
 80093ec:	680e      	ldr	r6, [r1, #0]
 80093ee:	bf08      	it	eq
 80093f0:	694b      	ldreq	r3, [r1, #20]
 80093f2:	600f      	str	r7, [r1, #0]
 80093f4:	bf18      	it	ne
 80093f6:	2300      	movne	r3, #0
 80093f8:	eba6 0807 	sub.w	r8, r6, r7
 80093fc:	608b      	str	r3, [r1, #8]
 80093fe:	f1b8 0f00 	cmp.w	r8, #0
 8009402:	dd9c      	ble.n	800933e <__sflush_r+0x1a>
 8009404:	6a21      	ldr	r1, [r4, #32]
 8009406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009408:	4643      	mov	r3, r8
 800940a:	463a      	mov	r2, r7
 800940c:	4628      	mov	r0, r5
 800940e:	47b0      	blx	r6
 8009410:	2800      	cmp	r0, #0
 8009412:	dc06      	bgt.n	8009422 <__sflush_r+0xfe>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	f04f 30ff 	mov.w	r0, #4294967295
 8009420:	e78e      	b.n	8009340 <__sflush_r+0x1c>
 8009422:	4407      	add	r7, r0
 8009424:	eba8 0800 	sub.w	r8, r8, r0
 8009428:	e7e9      	b.n	80093fe <__sflush_r+0xda>
 800942a:	bf00      	nop
 800942c:	dfbffffe 	.word	0xdfbffffe

08009430 <_fflush_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	690b      	ldr	r3, [r1, #16]
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b913      	cbnz	r3, 8009440 <_fflush_r+0x10>
 800943a:	2500      	movs	r5, #0
 800943c:	4628      	mov	r0, r5
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	b118      	cbz	r0, 800944a <_fflush_r+0x1a>
 8009442:	6a03      	ldr	r3, [r0, #32]
 8009444:	b90b      	cbnz	r3, 800944a <_fflush_r+0x1a>
 8009446:	f7fd fa29 	bl	800689c <__sinit>
 800944a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0f3      	beq.n	800943a <_fflush_r+0xa>
 8009452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009454:	07d0      	lsls	r0, r2, #31
 8009456:	d404      	bmi.n	8009462 <_fflush_r+0x32>
 8009458:	0599      	lsls	r1, r3, #22
 800945a:	d402      	bmi.n	8009462 <_fflush_r+0x32>
 800945c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800945e:	f7fd fb34 	bl	8006aca <__retarget_lock_acquire_recursive>
 8009462:	4628      	mov	r0, r5
 8009464:	4621      	mov	r1, r4
 8009466:	f7ff ff5d 	bl	8009324 <__sflush_r>
 800946a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800946c:	07da      	lsls	r2, r3, #31
 800946e:	4605      	mov	r5, r0
 8009470:	d4e4      	bmi.n	800943c <_fflush_r+0xc>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	059b      	lsls	r3, r3, #22
 8009476:	d4e1      	bmi.n	800943c <_fflush_r+0xc>
 8009478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947a:	f7fd fb27 	bl	8006acc <__retarget_lock_release_recursive>
 800947e:	e7dd      	b.n	800943c <_fflush_r+0xc>

08009480 <memmove>:
 8009480:	4288      	cmp	r0, r1
 8009482:	b510      	push	{r4, lr}
 8009484:	eb01 0402 	add.w	r4, r1, r2
 8009488:	d902      	bls.n	8009490 <memmove+0x10>
 800948a:	4284      	cmp	r4, r0
 800948c:	4623      	mov	r3, r4
 800948e:	d807      	bhi.n	80094a0 <memmove+0x20>
 8009490:	1e43      	subs	r3, r0, #1
 8009492:	42a1      	cmp	r1, r4
 8009494:	d008      	beq.n	80094a8 <memmove+0x28>
 8009496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800949a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800949e:	e7f8      	b.n	8009492 <memmove+0x12>
 80094a0:	4402      	add	r2, r0
 80094a2:	4601      	mov	r1, r0
 80094a4:	428a      	cmp	r2, r1
 80094a6:	d100      	bne.n	80094aa <memmove+0x2a>
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094b2:	e7f7      	b.n	80094a4 <memmove+0x24>

080094b4 <strncmp>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	b16a      	cbz	r2, 80094d4 <strncmp+0x20>
 80094b8:	3901      	subs	r1, #1
 80094ba:	1884      	adds	r4, r0, r2
 80094bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d103      	bne.n	80094d0 <strncmp+0x1c>
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d001      	beq.n	80094d0 <strncmp+0x1c>
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	d1f5      	bne.n	80094bc <strncmp+0x8>
 80094d0:	1ad0      	subs	r0, r2, r3
 80094d2:	bd10      	pop	{r4, pc}
 80094d4:	4610      	mov	r0, r2
 80094d6:	e7fc      	b.n	80094d2 <strncmp+0x1e>

080094d8 <_sbrk_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d06      	ldr	r5, [pc, #24]	; (80094f4 <_sbrk_r+0x1c>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	602b      	str	r3, [r5, #0]
 80094e4:	f7f9 fa10 	bl	8002908 <_sbrk>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_sbrk_r+0x1a>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_sbrk_r+0x1a>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	200003f8 	.word	0x200003f8

080094f8 <nan>:
 80094f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009500 <nan+0x8>
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	00000000 	.word	0x00000000
 8009504:	7ff80000 	.word	0x7ff80000

08009508 <__assert_func>:
 8009508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800950a:	4614      	mov	r4, r2
 800950c:	461a      	mov	r2, r3
 800950e:	4b09      	ldr	r3, [pc, #36]	; (8009534 <__assert_func+0x2c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4605      	mov	r5, r0
 8009514:	68d8      	ldr	r0, [r3, #12]
 8009516:	b14c      	cbz	r4, 800952c <__assert_func+0x24>
 8009518:	4b07      	ldr	r3, [pc, #28]	; (8009538 <__assert_func+0x30>)
 800951a:	9100      	str	r1, [sp, #0]
 800951c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009520:	4906      	ldr	r1, [pc, #24]	; (800953c <__assert_func+0x34>)
 8009522:	462b      	mov	r3, r5
 8009524:	f000 fbca 	bl	8009cbc <fiprintf>
 8009528:	f000 fbda 	bl	8009ce0 <abort>
 800952c:	4b04      	ldr	r3, [pc, #16]	; (8009540 <__assert_func+0x38>)
 800952e:	461c      	mov	r4, r3
 8009530:	e7f3      	b.n	800951a <__assert_func+0x12>
 8009532:	bf00      	nop
 8009534:	20000078 	.word	0x20000078
 8009538:	0800a612 	.word	0x0800a612
 800953c:	0800a61f 	.word	0x0800a61f
 8009540:	0800a64d 	.word	0x0800a64d

08009544 <_calloc_r>:
 8009544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009546:	fba1 2402 	umull	r2, r4, r1, r2
 800954a:	b94c      	cbnz	r4, 8009560 <_calloc_r+0x1c>
 800954c:	4611      	mov	r1, r2
 800954e:	9201      	str	r2, [sp, #4]
 8009550:	f7fe f9c0 	bl	80078d4 <_malloc_r>
 8009554:	9a01      	ldr	r2, [sp, #4]
 8009556:	4605      	mov	r5, r0
 8009558:	b930      	cbnz	r0, 8009568 <_calloc_r+0x24>
 800955a:	4628      	mov	r0, r5
 800955c:	b003      	add	sp, #12
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	220c      	movs	r2, #12
 8009562:	6002      	str	r2, [r0, #0]
 8009564:	2500      	movs	r5, #0
 8009566:	e7f8      	b.n	800955a <_calloc_r+0x16>
 8009568:	4621      	mov	r1, r4
 800956a:	f7fd fa30 	bl	80069ce <memset>
 800956e:	e7f4      	b.n	800955a <_calloc_r+0x16>

08009570 <rshift>:
 8009570:	6903      	ldr	r3, [r0, #16]
 8009572:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009576:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800957a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800957e:	f100 0414 	add.w	r4, r0, #20
 8009582:	dd45      	ble.n	8009610 <rshift+0xa0>
 8009584:	f011 011f 	ands.w	r1, r1, #31
 8009588:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800958c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009590:	d10c      	bne.n	80095ac <rshift+0x3c>
 8009592:	f100 0710 	add.w	r7, r0, #16
 8009596:	4629      	mov	r1, r5
 8009598:	42b1      	cmp	r1, r6
 800959a:	d334      	bcc.n	8009606 <rshift+0x96>
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	1eea      	subs	r2, r5, #3
 80095a2:	4296      	cmp	r6, r2
 80095a4:	bf38      	it	cc
 80095a6:	2300      	movcc	r3, #0
 80095a8:	4423      	add	r3, r4
 80095aa:	e015      	b.n	80095d8 <rshift+0x68>
 80095ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095b0:	f1c1 0820 	rsb	r8, r1, #32
 80095b4:	40cf      	lsrs	r7, r1
 80095b6:	f105 0e04 	add.w	lr, r5, #4
 80095ba:	46a1      	mov	r9, r4
 80095bc:	4576      	cmp	r6, lr
 80095be:	46f4      	mov	ip, lr
 80095c0:	d815      	bhi.n	80095ee <rshift+0x7e>
 80095c2:	1a9a      	subs	r2, r3, r2
 80095c4:	0092      	lsls	r2, r2, #2
 80095c6:	3a04      	subs	r2, #4
 80095c8:	3501      	adds	r5, #1
 80095ca:	42ae      	cmp	r6, r5
 80095cc:	bf38      	it	cc
 80095ce:	2200      	movcc	r2, #0
 80095d0:	18a3      	adds	r3, r4, r2
 80095d2:	50a7      	str	r7, [r4, r2]
 80095d4:	b107      	cbz	r7, 80095d8 <rshift+0x68>
 80095d6:	3304      	adds	r3, #4
 80095d8:	1b1a      	subs	r2, r3, r4
 80095da:	42a3      	cmp	r3, r4
 80095dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095e0:	bf08      	it	eq
 80095e2:	2300      	moveq	r3, #0
 80095e4:	6102      	str	r2, [r0, #16]
 80095e6:	bf08      	it	eq
 80095e8:	6143      	streq	r3, [r0, #20]
 80095ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ee:	f8dc c000 	ldr.w	ip, [ip]
 80095f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80095f6:	ea4c 0707 	orr.w	r7, ip, r7
 80095fa:	f849 7b04 	str.w	r7, [r9], #4
 80095fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009602:	40cf      	lsrs	r7, r1
 8009604:	e7da      	b.n	80095bc <rshift+0x4c>
 8009606:	f851 cb04 	ldr.w	ip, [r1], #4
 800960a:	f847 cf04 	str.w	ip, [r7, #4]!
 800960e:	e7c3      	b.n	8009598 <rshift+0x28>
 8009610:	4623      	mov	r3, r4
 8009612:	e7e1      	b.n	80095d8 <rshift+0x68>

08009614 <__hexdig_fun>:
 8009614:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009618:	2b09      	cmp	r3, #9
 800961a:	d802      	bhi.n	8009622 <__hexdig_fun+0xe>
 800961c:	3820      	subs	r0, #32
 800961e:	b2c0      	uxtb	r0, r0
 8009620:	4770      	bx	lr
 8009622:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009626:	2b05      	cmp	r3, #5
 8009628:	d801      	bhi.n	800962e <__hexdig_fun+0x1a>
 800962a:	3847      	subs	r0, #71	; 0x47
 800962c:	e7f7      	b.n	800961e <__hexdig_fun+0xa>
 800962e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009632:	2b05      	cmp	r3, #5
 8009634:	d801      	bhi.n	800963a <__hexdig_fun+0x26>
 8009636:	3827      	subs	r0, #39	; 0x27
 8009638:	e7f1      	b.n	800961e <__hexdig_fun+0xa>
 800963a:	2000      	movs	r0, #0
 800963c:	4770      	bx	lr
	...

08009640 <__gethex>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	4617      	mov	r7, r2
 8009646:	680a      	ldr	r2, [r1, #0]
 8009648:	b085      	sub	sp, #20
 800964a:	f102 0b02 	add.w	fp, r2, #2
 800964e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009652:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009656:	4681      	mov	r9, r0
 8009658:	468a      	mov	sl, r1
 800965a:	9302      	str	r3, [sp, #8]
 800965c:	32fe      	adds	r2, #254	; 0xfe
 800965e:	eb02 030b 	add.w	r3, r2, fp
 8009662:	46d8      	mov	r8, fp
 8009664:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	2830      	cmp	r0, #48	; 0x30
 800966c:	d0f7      	beq.n	800965e <__gethex+0x1e>
 800966e:	f7ff ffd1 	bl	8009614 <__hexdig_fun>
 8009672:	4604      	mov	r4, r0
 8009674:	2800      	cmp	r0, #0
 8009676:	d138      	bne.n	80096ea <__gethex+0xaa>
 8009678:	49a7      	ldr	r1, [pc, #668]	; (8009918 <__gethex+0x2d8>)
 800967a:	2201      	movs	r2, #1
 800967c:	4640      	mov	r0, r8
 800967e:	f7ff ff19 	bl	80094b4 <strncmp>
 8009682:	4606      	mov	r6, r0
 8009684:	2800      	cmp	r0, #0
 8009686:	d169      	bne.n	800975c <__gethex+0x11c>
 8009688:	f898 0001 	ldrb.w	r0, [r8, #1]
 800968c:	465d      	mov	r5, fp
 800968e:	f7ff ffc1 	bl	8009614 <__hexdig_fun>
 8009692:	2800      	cmp	r0, #0
 8009694:	d064      	beq.n	8009760 <__gethex+0x120>
 8009696:	465a      	mov	r2, fp
 8009698:	7810      	ldrb	r0, [r2, #0]
 800969a:	2830      	cmp	r0, #48	; 0x30
 800969c:	4690      	mov	r8, r2
 800969e:	f102 0201 	add.w	r2, r2, #1
 80096a2:	d0f9      	beq.n	8009698 <__gethex+0x58>
 80096a4:	f7ff ffb6 	bl	8009614 <__hexdig_fun>
 80096a8:	2301      	movs	r3, #1
 80096aa:	fab0 f480 	clz	r4, r0
 80096ae:	0964      	lsrs	r4, r4, #5
 80096b0:	465e      	mov	r6, fp
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	4642      	mov	r2, r8
 80096b6:	4615      	mov	r5, r2
 80096b8:	3201      	adds	r2, #1
 80096ba:	7828      	ldrb	r0, [r5, #0]
 80096bc:	f7ff ffaa 	bl	8009614 <__hexdig_fun>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d1f8      	bne.n	80096b6 <__gethex+0x76>
 80096c4:	4994      	ldr	r1, [pc, #592]	; (8009918 <__gethex+0x2d8>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	4628      	mov	r0, r5
 80096ca:	f7ff fef3 	bl	80094b4 <strncmp>
 80096ce:	b978      	cbnz	r0, 80096f0 <__gethex+0xb0>
 80096d0:	b946      	cbnz	r6, 80096e4 <__gethex+0xa4>
 80096d2:	1c6e      	adds	r6, r5, #1
 80096d4:	4632      	mov	r2, r6
 80096d6:	4615      	mov	r5, r2
 80096d8:	3201      	adds	r2, #1
 80096da:	7828      	ldrb	r0, [r5, #0]
 80096dc:	f7ff ff9a 	bl	8009614 <__hexdig_fun>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d1f8      	bne.n	80096d6 <__gethex+0x96>
 80096e4:	1b73      	subs	r3, r6, r5
 80096e6:	009e      	lsls	r6, r3, #2
 80096e8:	e004      	b.n	80096f4 <__gethex+0xb4>
 80096ea:	2400      	movs	r4, #0
 80096ec:	4626      	mov	r6, r4
 80096ee:	e7e1      	b.n	80096b4 <__gethex+0x74>
 80096f0:	2e00      	cmp	r6, #0
 80096f2:	d1f7      	bne.n	80096e4 <__gethex+0xa4>
 80096f4:	782b      	ldrb	r3, [r5, #0]
 80096f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096fa:	2b50      	cmp	r3, #80	; 0x50
 80096fc:	d13d      	bne.n	800977a <__gethex+0x13a>
 80096fe:	786b      	ldrb	r3, [r5, #1]
 8009700:	2b2b      	cmp	r3, #43	; 0x2b
 8009702:	d02f      	beq.n	8009764 <__gethex+0x124>
 8009704:	2b2d      	cmp	r3, #45	; 0x2d
 8009706:	d031      	beq.n	800976c <__gethex+0x12c>
 8009708:	1c69      	adds	r1, r5, #1
 800970a:	f04f 0b00 	mov.w	fp, #0
 800970e:	7808      	ldrb	r0, [r1, #0]
 8009710:	f7ff ff80 	bl	8009614 <__hexdig_fun>
 8009714:	1e42      	subs	r2, r0, #1
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	2a18      	cmp	r2, #24
 800971a:	d82e      	bhi.n	800977a <__gethex+0x13a>
 800971c:	f1a0 0210 	sub.w	r2, r0, #16
 8009720:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009724:	f7ff ff76 	bl	8009614 <__hexdig_fun>
 8009728:	f100 3cff 	add.w	ip, r0, #4294967295
 800972c:	fa5f fc8c 	uxtb.w	ip, ip
 8009730:	f1bc 0f18 	cmp.w	ip, #24
 8009734:	d91d      	bls.n	8009772 <__gethex+0x132>
 8009736:	f1bb 0f00 	cmp.w	fp, #0
 800973a:	d000      	beq.n	800973e <__gethex+0xfe>
 800973c:	4252      	negs	r2, r2
 800973e:	4416      	add	r6, r2
 8009740:	f8ca 1000 	str.w	r1, [sl]
 8009744:	b1dc      	cbz	r4, 800977e <__gethex+0x13e>
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bf14      	ite	ne
 800974c:	f04f 0800 	movne.w	r8, #0
 8009750:	f04f 0806 	moveq.w	r8, #6
 8009754:	4640      	mov	r0, r8
 8009756:	b005      	add	sp, #20
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975c:	4645      	mov	r5, r8
 800975e:	4626      	mov	r6, r4
 8009760:	2401      	movs	r4, #1
 8009762:	e7c7      	b.n	80096f4 <__gethex+0xb4>
 8009764:	f04f 0b00 	mov.w	fp, #0
 8009768:	1ca9      	adds	r1, r5, #2
 800976a:	e7d0      	b.n	800970e <__gethex+0xce>
 800976c:	f04f 0b01 	mov.w	fp, #1
 8009770:	e7fa      	b.n	8009768 <__gethex+0x128>
 8009772:	230a      	movs	r3, #10
 8009774:	fb03 0002 	mla	r0, r3, r2, r0
 8009778:	e7d0      	b.n	800971c <__gethex+0xdc>
 800977a:	4629      	mov	r1, r5
 800977c:	e7e0      	b.n	8009740 <__gethex+0x100>
 800977e:	eba5 0308 	sub.w	r3, r5, r8
 8009782:	3b01      	subs	r3, #1
 8009784:	4621      	mov	r1, r4
 8009786:	2b07      	cmp	r3, #7
 8009788:	dc0a      	bgt.n	80097a0 <__gethex+0x160>
 800978a:	4648      	mov	r0, r9
 800978c:	f7fe f92e 	bl	80079ec <_Balloc>
 8009790:	4604      	mov	r4, r0
 8009792:	b940      	cbnz	r0, 80097a6 <__gethex+0x166>
 8009794:	4b61      	ldr	r3, [pc, #388]	; (800991c <__gethex+0x2dc>)
 8009796:	4602      	mov	r2, r0
 8009798:	21e4      	movs	r1, #228	; 0xe4
 800979a:	4861      	ldr	r0, [pc, #388]	; (8009920 <__gethex+0x2e0>)
 800979c:	f7ff feb4 	bl	8009508 <__assert_func>
 80097a0:	3101      	adds	r1, #1
 80097a2:	105b      	asrs	r3, r3, #1
 80097a4:	e7ef      	b.n	8009786 <__gethex+0x146>
 80097a6:	f100 0a14 	add.w	sl, r0, #20
 80097aa:	2300      	movs	r3, #0
 80097ac:	495a      	ldr	r1, [pc, #360]	; (8009918 <__gethex+0x2d8>)
 80097ae:	f8cd a004 	str.w	sl, [sp, #4]
 80097b2:	469b      	mov	fp, r3
 80097b4:	45a8      	cmp	r8, r5
 80097b6:	d342      	bcc.n	800983e <__gethex+0x1fe>
 80097b8:	9801      	ldr	r0, [sp, #4]
 80097ba:	f840 bb04 	str.w	fp, [r0], #4
 80097be:	eba0 000a 	sub.w	r0, r0, sl
 80097c2:	1080      	asrs	r0, r0, #2
 80097c4:	6120      	str	r0, [r4, #16]
 80097c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80097ca:	4658      	mov	r0, fp
 80097cc:	f7fe fa00 	bl	8007bd0 <__hi0bits>
 80097d0:	683d      	ldr	r5, [r7, #0]
 80097d2:	eba8 0000 	sub.w	r0, r8, r0
 80097d6:	42a8      	cmp	r0, r5
 80097d8:	dd59      	ble.n	800988e <__gethex+0x24e>
 80097da:	eba0 0805 	sub.w	r8, r0, r5
 80097de:	4641      	mov	r1, r8
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7fe fd8f 	bl	8008304 <__any_on>
 80097e6:	4683      	mov	fp, r0
 80097e8:	b1b8      	cbz	r0, 800981a <__gethex+0x1da>
 80097ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80097ee:	1159      	asrs	r1, r3, #5
 80097f0:	f003 021f 	and.w	r2, r3, #31
 80097f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097f8:	f04f 0b01 	mov.w	fp, #1
 80097fc:	fa0b f202 	lsl.w	r2, fp, r2
 8009800:	420a      	tst	r2, r1
 8009802:	d00a      	beq.n	800981a <__gethex+0x1da>
 8009804:	455b      	cmp	r3, fp
 8009806:	dd06      	ble.n	8009816 <__gethex+0x1d6>
 8009808:	f1a8 0102 	sub.w	r1, r8, #2
 800980c:	4620      	mov	r0, r4
 800980e:	f7fe fd79 	bl	8008304 <__any_on>
 8009812:	2800      	cmp	r0, #0
 8009814:	d138      	bne.n	8009888 <__gethex+0x248>
 8009816:	f04f 0b02 	mov.w	fp, #2
 800981a:	4641      	mov	r1, r8
 800981c:	4620      	mov	r0, r4
 800981e:	f7ff fea7 	bl	8009570 <rshift>
 8009822:	4446      	add	r6, r8
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	42b3      	cmp	r3, r6
 8009828:	da41      	bge.n	80098ae <__gethex+0x26e>
 800982a:	4621      	mov	r1, r4
 800982c:	4648      	mov	r0, r9
 800982e:	f7fe f91d 	bl	8007a6c <_Bfree>
 8009832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009834:	2300      	movs	r3, #0
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800983c:	e78a      	b.n	8009754 <__gethex+0x114>
 800983e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009842:	2a2e      	cmp	r2, #46	; 0x2e
 8009844:	d014      	beq.n	8009870 <__gethex+0x230>
 8009846:	2b20      	cmp	r3, #32
 8009848:	d106      	bne.n	8009858 <__gethex+0x218>
 800984a:	9b01      	ldr	r3, [sp, #4]
 800984c:	f843 bb04 	str.w	fp, [r3], #4
 8009850:	f04f 0b00 	mov.w	fp, #0
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	465b      	mov	r3, fp
 8009858:	7828      	ldrb	r0, [r5, #0]
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	f7ff feda 	bl	8009614 <__hexdig_fun>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	f000 000f 	and.w	r0, r0, #15
 8009866:	4098      	lsls	r0, r3
 8009868:	ea4b 0b00 	orr.w	fp, fp, r0
 800986c:	3304      	adds	r3, #4
 800986e:	e7a1      	b.n	80097b4 <__gethex+0x174>
 8009870:	45a8      	cmp	r8, r5
 8009872:	d8e8      	bhi.n	8009846 <__gethex+0x206>
 8009874:	2201      	movs	r2, #1
 8009876:	4628      	mov	r0, r5
 8009878:	9303      	str	r3, [sp, #12]
 800987a:	f7ff fe1b 	bl	80094b4 <strncmp>
 800987e:	4926      	ldr	r1, [pc, #152]	; (8009918 <__gethex+0x2d8>)
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	2800      	cmp	r0, #0
 8009884:	d1df      	bne.n	8009846 <__gethex+0x206>
 8009886:	e795      	b.n	80097b4 <__gethex+0x174>
 8009888:	f04f 0b03 	mov.w	fp, #3
 800988c:	e7c5      	b.n	800981a <__gethex+0x1da>
 800988e:	da0b      	bge.n	80098a8 <__gethex+0x268>
 8009890:	eba5 0800 	sub.w	r8, r5, r0
 8009894:	4621      	mov	r1, r4
 8009896:	4642      	mov	r2, r8
 8009898:	4648      	mov	r0, r9
 800989a:	f7fe fb01 	bl	8007ea0 <__lshift>
 800989e:	eba6 0608 	sub.w	r6, r6, r8
 80098a2:	4604      	mov	r4, r0
 80098a4:	f100 0a14 	add.w	sl, r0, #20
 80098a8:	f04f 0b00 	mov.w	fp, #0
 80098ac:	e7ba      	b.n	8009824 <__gethex+0x1e4>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	42b3      	cmp	r3, r6
 80098b2:	dd73      	ble.n	800999c <__gethex+0x35c>
 80098b4:	1b9e      	subs	r6, r3, r6
 80098b6:	42b5      	cmp	r5, r6
 80098b8:	dc34      	bgt.n	8009924 <__gethex+0x2e4>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d023      	beq.n	8009908 <__gethex+0x2c8>
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d025      	beq.n	8009910 <__gethex+0x2d0>
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d115      	bne.n	80098f4 <__gethex+0x2b4>
 80098c8:	42b5      	cmp	r5, r6
 80098ca:	d113      	bne.n	80098f4 <__gethex+0x2b4>
 80098cc:	2d01      	cmp	r5, #1
 80098ce:	d10b      	bne.n	80098e8 <__gethex+0x2a8>
 80098d0:	9a02      	ldr	r2, [sp, #8]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	2301      	movs	r3, #1
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	f8ca 3000 	str.w	r3, [sl]
 80098de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80098e4:	601c      	str	r4, [r3, #0]
 80098e6:	e735      	b.n	8009754 <__gethex+0x114>
 80098e8:	1e69      	subs	r1, r5, #1
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7fe fd0a 	bl	8008304 <__any_on>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d1ed      	bne.n	80098d0 <__gethex+0x290>
 80098f4:	4621      	mov	r1, r4
 80098f6:	4648      	mov	r0, r9
 80098f8:	f7fe f8b8 	bl	8007a6c <_Bfree>
 80098fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098fe:	2300      	movs	r3, #0
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009906:	e725      	b.n	8009754 <__gethex+0x114>
 8009908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f2      	bne.n	80098f4 <__gethex+0x2b4>
 800990e:	e7df      	b.n	80098d0 <__gethex+0x290>
 8009910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1dc      	bne.n	80098d0 <__gethex+0x290>
 8009916:	e7ed      	b.n	80098f4 <__gethex+0x2b4>
 8009918:	0800a4a4 	.word	0x0800a4a4
 800991c:	0800a338 	.word	0x0800a338
 8009920:	0800a64e 	.word	0x0800a64e
 8009924:	f106 38ff 	add.w	r8, r6, #4294967295
 8009928:	f1bb 0f00 	cmp.w	fp, #0
 800992c:	d133      	bne.n	8009996 <__gethex+0x356>
 800992e:	f1b8 0f00 	cmp.w	r8, #0
 8009932:	d004      	beq.n	800993e <__gethex+0x2fe>
 8009934:	4641      	mov	r1, r8
 8009936:	4620      	mov	r0, r4
 8009938:	f7fe fce4 	bl	8008304 <__any_on>
 800993c:	4683      	mov	fp, r0
 800993e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009942:	2301      	movs	r3, #1
 8009944:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009948:	f008 081f 	and.w	r8, r8, #31
 800994c:	fa03 f308 	lsl.w	r3, r3, r8
 8009950:	4213      	tst	r3, r2
 8009952:	4631      	mov	r1, r6
 8009954:	4620      	mov	r0, r4
 8009956:	bf18      	it	ne
 8009958:	f04b 0b02 	orrne.w	fp, fp, #2
 800995c:	1bad      	subs	r5, r5, r6
 800995e:	f7ff fe07 	bl	8009570 <rshift>
 8009962:	687e      	ldr	r6, [r7, #4]
 8009964:	f04f 0802 	mov.w	r8, #2
 8009968:	f1bb 0f00 	cmp.w	fp, #0
 800996c:	d04a      	beq.n	8009a04 <__gethex+0x3c4>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d016      	beq.n	80099a2 <__gethex+0x362>
 8009974:	2b03      	cmp	r3, #3
 8009976:	d018      	beq.n	80099aa <__gethex+0x36a>
 8009978:	2b01      	cmp	r3, #1
 800997a:	d109      	bne.n	8009990 <__gethex+0x350>
 800997c:	f01b 0f02 	tst.w	fp, #2
 8009980:	d006      	beq.n	8009990 <__gethex+0x350>
 8009982:	f8da 3000 	ldr.w	r3, [sl]
 8009986:	ea4b 0b03 	orr.w	fp, fp, r3
 800998a:	f01b 0f01 	tst.w	fp, #1
 800998e:	d10f      	bne.n	80099b0 <__gethex+0x370>
 8009990:	f048 0810 	orr.w	r8, r8, #16
 8009994:	e036      	b.n	8009a04 <__gethex+0x3c4>
 8009996:	f04f 0b01 	mov.w	fp, #1
 800999a:	e7d0      	b.n	800993e <__gethex+0x2fe>
 800999c:	f04f 0801 	mov.w	r8, #1
 80099a0:	e7e2      	b.n	8009968 <__gethex+0x328>
 80099a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099a4:	f1c3 0301 	rsb	r3, r3, #1
 80099a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80099aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0ef      	beq.n	8009990 <__gethex+0x350>
 80099b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099b4:	f104 0214 	add.w	r2, r4, #20
 80099b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80099c2:	2300      	movs	r3, #0
 80099c4:	4694      	mov	ip, r2
 80099c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80099ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 80099ce:	d01e      	beq.n	8009a0e <__gethex+0x3ce>
 80099d0:	3101      	adds	r1, #1
 80099d2:	f8cc 1000 	str.w	r1, [ip]
 80099d6:	f1b8 0f02 	cmp.w	r8, #2
 80099da:	f104 0214 	add.w	r2, r4, #20
 80099de:	d13d      	bne.n	8009a5c <__gethex+0x41c>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	42ab      	cmp	r3, r5
 80099e6:	d10b      	bne.n	8009a00 <__gethex+0x3c0>
 80099e8:	1169      	asrs	r1, r5, #5
 80099ea:	2301      	movs	r3, #1
 80099ec:	f005 051f 	and.w	r5, r5, #31
 80099f0:	fa03 f505 	lsl.w	r5, r3, r5
 80099f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099f8:	421d      	tst	r5, r3
 80099fa:	bf18      	it	ne
 80099fc:	f04f 0801 	movne.w	r8, #1
 8009a00:	f048 0820 	orr.w	r8, r8, #32
 8009a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a06:	601c      	str	r4, [r3, #0]
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	601e      	str	r6, [r3, #0]
 8009a0c:	e6a2      	b.n	8009754 <__gethex+0x114>
 8009a0e:	4290      	cmp	r0, r2
 8009a10:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a14:	d8d6      	bhi.n	80099c4 <__gethex+0x384>
 8009a16:	68a2      	ldr	r2, [r4, #8]
 8009a18:	4593      	cmp	fp, r2
 8009a1a:	db17      	blt.n	8009a4c <__gethex+0x40c>
 8009a1c:	6861      	ldr	r1, [r4, #4]
 8009a1e:	4648      	mov	r0, r9
 8009a20:	3101      	adds	r1, #1
 8009a22:	f7fd ffe3 	bl	80079ec <_Balloc>
 8009a26:	4682      	mov	sl, r0
 8009a28:	b918      	cbnz	r0, 8009a32 <__gethex+0x3f2>
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <__gethex+0x458>)
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	2184      	movs	r1, #132	; 0x84
 8009a30:	e6b3      	b.n	800979a <__gethex+0x15a>
 8009a32:	6922      	ldr	r2, [r4, #16]
 8009a34:	3202      	adds	r2, #2
 8009a36:	f104 010c 	add.w	r1, r4, #12
 8009a3a:	0092      	lsls	r2, r2, #2
 8009a3c:	300c      	adds	r0, #12
 8009a3e:	f7fd f846 	bl	8006ace <memcpy>
 8009a42:	4621      	mov	r1, r4
 8009a44:	4648      	mov	r0, r9
 8009a46:	f7fe f811 	bl	8007a6c <_Bfree>
 8009a4a:	4654      	mov	r4, sl
 8009a4c:	6922      	ldr	r2, [r4, #16]
 8009a4e:	1c51      	adds	r1, r2, #1
 8009a50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a54:	6121      	str	r1, [r4, #16]
 8009a56:	2101      	movs	r1, #1
 8009a58:	6151      	str	r1, [r2, #20]
 8009a5a:	e7bc      	b.n	80099d6 <__gethex+0x396>
 8009a5c:	6921      	ldr	r1, [r4, #16]
 8009a5e:	4559      	cmp	r1, fp
 8009a60:	dd0b      	ble.n	8009a7a <__gethex+0x43a>
 8009a62:	2101      	movs	r1, #1
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff fd83 	bl	8009570 <rshift>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	42b3      	cmp	r3, r6
 8009a70:	f6ff aedb 	blt.w	800982a <__gethex+0x1ea>
 8009a74:	f04f 0801 	mov.w	r8, #1
 8009a78:	e7c2      	b.n	8009a00 <__gethex+0x3c0>
 8009a7a:	f015 051f 	ands.w	r5, r5, #31
 8009a7e:	d0f9      	beq.n	8009a74 <__gethex+0x434>
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	441a      	add	r2, r3
 8009a84:	f1c5 0520 	rsb	r5, r5, #32
 8009a88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009a8c:	f7fe f8a0 	bl	8007bd0 <__hi0bits>
 8009a90:	42a8      	cmp	r0, r5
 8009a92:	dbe6      	blt.n	8009a62 <__gethex+0x422>
 8009a94:	e7ee      	b.n	8009a74 <__gethex+0x434>
 8009a96:	bf00      	nop
 8009a98:	0800a338 	.word	0x0800a338

08009a9c <L_shift>:
 8009a9c:	f1c2 0208 	rsb	r2, r2, #8
 8009aa0:	0092      	lsls	r2, r2, #2
 8009aa2:	b570      	push	{r4, r5, r6, lr}
 8009aa4:	f1c2 0620 	rsb	r6, r2, #32
 8009aa8:	6843      	ldr	r3, [r0, #4]
 8009aaa:	6804      	ldr	r4, [r0, #0]
 8009aac:	fa03 f506 	lsl.w	r5, r3, r6
 8009ab0:	432c      	orrs	r4, r5
 8009ab2:	40d3      	lsrs	r3, r2
 8009ab4:	6004      	str	r4, [r0, #0]
 8009ab6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009aba:	4288      	cmp	r0, r1
 8009abc:	d3f4      	bcc.n	8009aa8 <L_shift+0xc>
 8009abe:	bd70      	pop	{r4, r5, r6, pc}

08009ac0 <__match>:
 8009ac0:	b530      	push	{r4, r5, lr}
 8009ac2:	6803      	ldr	r3, [r0, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aca:	b914      	cbnz	r4, 8009ad2 <__match+0x12>
 8009acc:	6003      	str	r3, [r0, #0]
 8009ace:	2001      	movs	r0, #1
 8009ad0:	bd30      	pop	{r4, r5, pc}
 8009ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ada:	2d19      	cmp	r5, #25
 8009adc:	bf98      	it	ls
 8009ade:	3220      	addls	r2, #32
 8009ae0:	42a2      	cmp	r2, r4
 8009ae2:	d0f0      	beq.n	8009ac6 <__match+0x6>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	e7f3      	b.n	8009ad0 <__match+0x10>

08009ae8 <__hexnan>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	680b      	ldr	r3, [r1, #0]
 8009aee:	6801      	ldr	r1, [r0, #0]
 8009af0:	115e      	asrs	r6, r3, #5
 8009af2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009af6:	f013 031f 	ands.w	r3, r3, #31
 8009afa:	b087      	sub	sp, #28
 8009afc:	bf18      	it	ne
 8009afe:	3604      	addne	r6, #4
 8009b00:	2500      	movs	r5, #0
 8009b02:	1f37      	subs	r7, r6, #4
 8009b04:	4682      	mov	sl, r0
 8009b06:	4690      	mov	r8, r2
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b0e:	46b9      	mov	r9, r7
 8009b10:	463c      	mov	r4, r7
 8009b12:	9502      	str	r5, [sp, #8]
 8009b14:	46ab      	mov	fp, r5
 8009b16:	784a      	ldrb	r2, [r1, #1]
 8009b18:	1c4b      	adds	r3, r1, #1
 8009b1a:	9303      	str	r3, [sp, #12]
 8009b1c:	b342      	cbz	r2, 8009b70 <__hexnan+0x88>
 8009b1e:	4610      	mov	r0, r2
 8009b20:	9105      	str	r1, [sp, #20]
 8009b22:	9204      	str	r2, [sp, #16]
 8009b24:	f7ff fd76 	bl	8009614 <__hexdig_fun>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d14f      	bne.n	8009bcc <__hexnan+0xe4>
 8009b2c:	9a04      	ldr	r2, [sp, #16]
 8009b2e:	9905      	ldr	r1, [sp, #20]
 8009b30:	2a20      	cmp	r2, #32
 8009b32:	d818      	bhi.n	8009b66 <__hexnan+0x7e>
 8009b34:	9b02      	ldr	r3, [sp, #8]
 8009b36:	459b      	cmp	fp, r3
 8009b38:	dd13      	ble.n	8009b62 <__hexnan+0x7a>
 8009b3a:	454c      	cmp	r4, r9
 8009b3c:	d206      	bcs.n	8009b4c <__hexnan+0x64>
 8009b3e:	2d07      	cmp	r5, #7
 8009b40:	dc04      	bgt.n	8009b4c <__hexnan+0x64>
 8009b42:	462a      	mov	r2, r5
 8009b44:	4649      	mov	r1, r9
 8009b46:	4620      	mov	r0, r4
 8009b48:	f7ff ffa8 	bl	8009a9c <L_shift>
 8009b4c:	4544      	cmp	r4, r8
 8009b4e:	d950      	bls.n	8009bf2 <__hexnan+0x10a>
 8009b50:	2300      	movs	r3, #0
 8009b52:	f1a4 0904 	sub.w	r9, r4, #4
 8009b56:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b5a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b5e:	464c      	mov	r4, r9
 8009b60:	461d      	mov	r5, r3
 8009b62:	9903      	ldr	r1, [sp, #12]
 8009b64:	e7d7      	b.n	8009b16 <__hexnan+0x2e>
 8009b66:	2a29      	cmp	r2, #41	; 0x29
 8009b68:	d155      	bne.n	8009c16 <__hexnan+0x12e>
 8009b6a:	3102      	adds	r1, #2
 8009b6c:	f8ca 1000 	str.w	r1, [sl]
 8009b70:	f1bb 0f00 	cmp.w	fp, #0
 8009b74:	d04f      	beq.n	8009c16 <__hexnan+0x12e>
 8009b76:	454c      	cmp	r4, r9
 8009b78:	d206      	bcs.n	8009b88 <__hexnan+0xa0>
 8009b7a:	2d07      	cmp	r5, #7
 8009b7c:	dc04      	bgt.n	8009b88 <__hexnan+0xa0>
 8009b7e:	462a      	mov	r2, r5
 8009b80:	4649      	mov	r1, r9
 8009b82:	4620      	mov	r0, r4
 8009b84:	f7ff ff8a 	bl	8009a9c <L_shift>
 8009b88:	4544      	cmp	r4, r8
 8009b8a:	d934      	bls.n	8009bf6 <__hexnan+0x10e>
 8009b8c:	f1a8 0204 	sub.w	r2, r8, #4
 8009b90:	4623      	mov	r3, r4
 8009b92:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b96:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b9a:	429f      	cmp	r7, r3
 8009b9c:	d2f9      	bcs.n	8009b92 <__hexnan+0xaa>
 8009b9e:	1b3b      	subs	r3, r7, r4
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	3e03      	subs	r6, #3
 8009ba8:	3401      	adds	r4, #1
 8009baa:	42a6      	cmp	r6, r4
 8009bac:	bf38      	it	cc
 8009bae:	2304      	movcc	r3, #4
 8009bb0:	4443      	add	r3, r8
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f843 2b04 	str.w	r2, [r3], #4
 8009bb8:	429f      	cmp	r7, r3
 8009bba:	d2fb      	bcs.n	8009bb4 <__hexnan+0xcc>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	b91b      	cbnz	r3, 8009bc8 <__hexnan+0xe0>
 8009bc0:	4547      	cmp	r7, r8
 8009bc2:	d126      	bne.n	8009c12 <__hexnan+0x12a>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	2005      	movs	r0, #5
 8009bca:	e025      	b.n	8009c18 <__hexnan+0x130>
 8009bcc:	3501      	adds	r5, #1
 8009bce:	2d08      	cmp	r5, #8
 8009bd0:	f10b 0b01 	add.w	fp, fp, #1
 8009bd4:	dd06      	ble.n	8009be4 <__hexnan+0xfc>
 8009bd6:	4544      	cmp	r4, r8
 8009bd8:	d9c3      	bls.n	8009b62 <__hexnan+0x7a>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009be0:	2501      	movs	r5, #1
 8009be2:	3c04      	subs	r4, #4
 8009be4:	6822      	ldr	r2, [r4, #0]
 8009be6:	f000 000f 	and.w	r0, r0, #15
 8009bea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009bee:	6020      	str	r0, [r4, #0]
 8009bf0:	e7b7      	b.n	8009b62 <__hexnan+0x7a>
 8009bf2:	2508      	movs	r5, #8
 8009bf4:	e7b5      	b.n	8009b62 <__hexnan+0x7a>
 8009bf6:	9b01      	ldr	r3, [sp, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0df      	beq.n	8009bbc <__hexnan+0xd4>
 8009bfc:	f1c3 0320 	rsb	r3, r3, #32
 8009c00:	f04f 32ff 	mov.w	r2, #4294967295
 8009c04:	40da      	lsrs	r2, r3
 8009c06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c10:	e7d4      	b.n	8009bbc <__hexnan+0xd4>
 8009c12:	3f04      	subs	r7, #4
 8009c14:	e7d2      	b.n	8009bbc <__hexnan+0xd4>
 8009c16:	2004      	movs	r0, #4
 8009c18:	b007      	add	sp, #28
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c1e <__ascii_mbtowc>:
 8009c1e:	b082      	sub	sp, #8
 8009c20:	b901      	cbnz	r1, 8009c24 <__ascii_mbtowc+0x6>
 8009c22:	a901      	add	r1, sp, #4
 8009c24:	b142      	cbz	r2, 8009c38 <__ascii_mbtowc+0x1a>
 8009c26:	b14b      	cbz	r3, 8009c3c <__ascii_mbtowc+0x1e>
 8009c28:	7813      	ldrb	r3, [r2, #0]
 8009c2a:	600b      	str	r3, [r1, #0]
 8009c2c:	7812      	ldrb	r2, [r2, #0]
 8009c2e:	1e10      	subs	r0, r2, #0
 8009c30:	bf18      	it	ne
 8009c32:	2001      	movne	r0, #1
 8009c34:	b002      	add	sp, #8
 8009c36:	4770      	bx	lr
 8009c38:	4610      	mov	r0, r2
 8009c3a:	e7fb      	b.n	8009c34 <__ascii_mbtowc+0x16>
 8009c3c:	f06f 0001 	mvn.w	r0, #1
 8009c40:	e7f8      	b.n	8009c34 <__ascii_mbtowc+0x16>

08009c42 <_realloc_r>:
 8009c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c46:	4680      	mov	r8, r0
 8009c48:	4614      	mov	r4, r2
 8009c4a:	460e      	mov	r6, r1
 8009c4c:	b921      	cbnz	r1, 8009c58 <_realloc_r+0x16>
 8009c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c52:	4611      	mov	r1, r2
 8009c54:	f7fd be3e 	b.w	80078d4 <_malloc_r>
 8009c58:	b92a      	cbnz	r2, 8009c66 <_realloc_r+0x24>
 8009c5a:	f7fd fdc7 	bl	80077ec <_free_r>
 8009c5e:	4625      	mov	r5, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c66:	f000 f842 	bl	8009cee <_malloc_usable_size_r>
 8009c6a:	4284      	cmp	r4, r0
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	d802      	bhi.n	8009c76 <_realloc_r+0x34>
 8009c70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c74:	d812      	bhi.n	8009c9c <_realloc_r+0x5a>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4640      	mov	r0, r8
 8009c7a:	f7fd fe2b 	bl	80078d4 <_malloc_r>
 8009c7e:	4605      	mov	r5, r0
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d0ed      	beq.n	8009c60 <_realloc_r+0x1e>
 8009c84:	42bc      	cmp	r4, r7
 8009c86:	4622      	mov	r2, r4
 8009c88:	4631      	mov	r1, r6
 8009c8a:	bf28      	it	cs
 8009c8c:	463a      	movcs	r2, r7
 8009c8e:	f7fc ff1e 	bl	8006ace <memcpy>
 8009c92:	4631      	mov	r1, r6
 8009c94:	4640      	mov	r0, r8
 8009c96:	f7fd fda9 	bl	80077ec <_free_r>
 8009c9a:	e7e1      	b.n	8009c60 <_realloc_r+0x1e>
 8009c9c:	4635      	mov	r5, r6
 8009c9e:	e7df      	b.n	8009c60 <_realloc_r+0x1e>

08009ca0 <__ascii_wctomb>:
 8009ca0:	b149      	cbz	r1, 8009cb6 <__ascii_wctomb+0x16>
 8009ca2:	2aff      	cmp	r2, #255	; 0xff
 8009ca4:	bf85      	ittet	hi
 8009ca6:	238a      	movhi	r3, #138	; 0x8a
 8009ca8:	6003      	strhi	r3, [r0, #0]
 8009caa:	700a      	strbls	r2, [r1, #0]
 8009cac:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cb0:	bf98      	it	ls
 8009cb2:	2001      	movls	r0, #1
 8009cb4:	4770      	bx	lr
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4770      	bx	lr
	...

08009cbc <fiprintf>:
 8009cbc:	b40e      	push	{r1, r2, r3}
 8009cbe:	b503      	push	{r0, r1, lr}
 8009cc0:	4601      	mov	r1, r0
 8009cc2:	ab03      	add	r3, sp, #12
 8009cc4:	4805      	ldr	r0, [pc, #20]	; (8009cdc <fiprintf+0x20>)
 8009cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cca:	6800      	ldr	r0, [r0, #0]
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	f000 f83f 	bl	8009d50 <_vfiprintf_r>
 8009cd2:	b002      	add	sp, #8
 8009cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cd8:	b003      	add	sp, #12
 8009cda:	4770      	bx	lr
 8009cdc:	20000078 	.word	0x20000078

08009ce0 <abort>:
 8009ce0:	b508      	push	{r3, lr}
 8009ce2:	2006      	movs	r0, #6
 8009ce4:	f000 fa0c 	bl	800a100 <raise>
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f7f8 fd95 	bl	8002818 <_exit>

08009cee <_malloc_usable_size_r>:
 8009cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf2:	1f18      	subs	r0, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfbc      	itt	lt
 8009cf8:	580b      	ldrlt	r3, [r1, r0]
 8009cfa:	18c0      	addlt	r0, r0, r3
 8009cfc:	4770      	bx	lr

08009cfe <__sfputc_r>:
 8009cfe:	6893      	ldr	r3, [r2, #8]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	b410      	push	{r4}
 8009d06:	6093      	str	r3, [r2, #8]
 8009d08:	da08      	bge.n	8009d1c <__sfputc_r+0x1e>
 8009d0a:	6994      	ldr	r4, [r2, #24]
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	db01      	blt.n	8009d14 <__sfputc_r+0x16>
 8009d10:	290a      	cmp	r1, #10
 8009d12:	d103      	bne.n	8009d1c <__sfputc_r+0x1e>
 8009d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d18:	f000 b934 	b.w	8009f84 <__swbuf_r>
 8009d1c:	6813      	ldr	r3, [r2, #0]
 8009d1e:	1c58      	adds	r0, r3, #1
 8009d20:	6010      	str	r0, [r2, #0]
 8009d22:	7019      	strb	r1, [r3, #0]
 8009d24:	4608      	mov	r0, r1
 8009d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <__sfputs_r>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	4614      	mov	r4, r2
 8009d34:	18d5      	adds	r5, r2, r3
 8009d36:	42ac      	cmp	r4, r5
 8009d38:	d101      	bne.n	8009d3e <__sfputs_r+0x12>
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	e007      	b.n	8009d4e <__sfputs_r+0x22>
 8009d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d42:	463a      	mov	r2, r7
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7ff ffda 	bl	8009cfe <__sfputc_r>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	d1f3      	bne.n	8009d36 <__sfputs_r+0xa>
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d50 <_vfiprintf_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	460d      	mov	r5, r1
 8009d56:	b09d      	sub	sp, #116	; 0x74
 8009d58:	4614      	mov	r4, r2
 8009d5a:	4698      	mov	r8, r3
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	b118      	cbz	r0, 8009d68 <_vfiprintf_r+0x18>
 8009d60:	6a03      	ldr	r3, [r0, #32]
 8009d62:	b90b      	cbnz	r3, 8009d68 <_vfiprintf_r+0x18>
 8009d64:	f7fc fd9a 	bl	800689c <__sinit>
 8009d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_vfiprintf_r+0x2a>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_vfiprintf_r+0x2a>
 8009d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d76:	f7fc fea8 	bl	8006aca <__retarget_lock_acquire_recursive>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	071b      	lsls	r3, r3, #28
 8009d7e:	d501      	bpl.n	8009d84 <_vfiprintf_r+0x34>
 8009d80:	692b      	ldr	r3, [r5, #16]
 8009d82:	b99b      	cbnz	r3, 8009dac <_vfiprintf_r+0x5c>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4630      	mov	r0, r6
 8009d88:	f000 f93a 	bl	800a000 <__swsetup_r>
 8009d8c:	b170      	cbz	r0, 8009dac <_vfiprintf_r+0x5c>
 8009d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d90:	07dc      	lsls	r4, r3, #31
 8009d92:	d504      	bpl.n	8009d9e <_vfiprintf_r+0x4e>
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	b01d      	add	sp, #116	; 0x74
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	0598      	lsls	r0, r3, #22
 8009da2:	d4f7      	bmi.n	8009d94 <_vfiprintf_r+0x44>
 8009da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009da6:	f7fc fe91 	bl	8006acc <__retarget_lock_release_recursive>
 8009daa:	e7f3      	b.n	8009d94 <_vfiprintf_r+0x44>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9309      	str	r3, [sp, #36]	; 0x24
 8009db0:	2320      	movs	r3, #32
 8009db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dba:	2330      	movs	r3, #48	; 0x30
 8009dbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f70 <_vfiprintf_r+0x220>
 8009dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc4:	f04f 0901 	mov.w	r9, #1
 8009dc8:	4623      	mov	r3, r4
 8009dca:	469a      	mov	sl, r3
 8009dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_vfiprintf_r+0x86>
 8009dd2:	2a25      	cmp	r2, #37	; 0x25
 8009dd4:	d1f9      	bne.n	8009dca <_vfiprintf_r+0x7a>
 8009dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dda:	d00b      	beq.n	8009df4 <_vfiprintf_r+0xa4>
 8009ddc:	465b      	mov	r3, fp
 8009dde:	4622      	mov	r2, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ffa2 	bl	8009d2c <__sfputs_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	f000 80a9 	beq.w	8009f40 <_vfiprintf_r+0x1f0>
 8009dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df0:	445a      	add	r2, fp
 8009df2:	9209      	str	r2, [sp, #36]	; 0x24
 8009df4:	f89a 3000 	ldrb.w	r3, [sl]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80a1 	beq.w	8009f40 <_vfiprintf_r+0x1f0>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e08:	f10a 0a01 	add.w	sl, sl, #1
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e14:	931a      	str	r3, [sp, #104]	; 0x68
 8009e16:	4654      	mov	r4, sl
 8009e18:	2205      	movs	r2, #5
 8009e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1e:	4854      	ldr	r0, [pc, #336]	; (8009f70 <_vfiprintf_r+0x220>)
 8009e20:	f7f6 f9d6 	bl	80001d0 <memchr>
 8009e24:	9a04      	ldr	r2, [sp, #16]
 8009e26:	b9d8      	cbnz	r0, 8009e60 <_vfiprintf_r+0x110>
 8009e28:	06d1      	lsls	r1, r2, #27
 8009e2a:	bf44      	itt	mi
 8009e2c:	2320      	movmi	r3, #32
 8009e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e32:	0713      	lsls	r3, r2, #28
 8009e34:	bf44      	itt	mi
 8009e36:	232b      	movmi	r3, #43	; 0x2b
 8009e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e40:	2b2a      	cmp	r3, #42	; 0x2a
 8009e42:	d015      	beq.n	8009e70 <_vfiprintf_r+0x120>
 8009e44:	9a07      	ldr	r2, [sp, #28]
 8009e46:	4654      	mov	r4, sl
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f04f 0c0a 	mov.w	ip, #10
 8009e4e:	4621      	mov	r1, r4
 8009e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e54:	3b30      	subs	r3, #48	; 0x30
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d94d      	bls.n	8009ef6 <_vfiprintf_r+0x1a6>
 8009e5a:	b1b0      	cbz	r0, 8009e8a <_vfiprintf_r+0x13a>
 8009e5c:	9207      	str	r2, [sp, #28]
 8009e5e:	e014      	b.n	8009e8a <_vfiprintf_r+0x13a>
 8009e60:	eba0 0308 	sub.w	r3, r0, r8
 8009e64:	fa09 f303 	lsl.w	r3, r9, r3
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	46a2      	mov	sl, r4
 8009e6e:	e7d2      	b.n	8009e16 <_vfiprintf_r+0xc6>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	1d19      	adds	r1, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9103      	str	r1, [sp, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfbb      	ittet	lt
 8009e7c:	425b      	neglt	r3, r3
 8009e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e82:	9307      	strge	r3, [sp, #28]
 8009e84:	9307      	strlt	r3, [sp, #28]
 8009e86:	bfb8      	it	lt
 8009e88:	9204      	strlt	r2, [sp, #16]
 8009e8a:	7823      	ldrb	r3, [r4, #0]
 8009e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8e:	d10c      	bne.n	8009eaa <_vfiprintf_r+0x15a>
 8009e90:	7863      	ldrb	r3, [r4, #1]
 8009e92:	2b2a      	cmp	r3, #42	; 0x2a
 8009e94:	d134      	bne.n	8009f00 <_vfiprintf_r+0x1b0>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	9203      	str	r2, [sp, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfb8      	it	lt
 8009ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea6:	3402      	adds	r4, #2
 8009ea8:	9305      	str	r3, [sp, #20]
 8009eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f80 <_vfiprintf_r+0x230>
 8009eae:	7821      	ldrb	r1, [r4, #0]
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	f7f6 f98c 	bl	80001d0 <memchr>
 8009eb8:	b138      	cbz	r0, 8009eca <_vfiprintf_r+0x17a>
 8009eba:	9b04      	ldr	r3, [sp, #16]
 8009ebc:	eba0 000a 	sub.w	r0, r0, sl
 8009ec0:	2240      	movs	r2, #64	; 0x40
 8009ec2:	4082      	lsls	r2, r0
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	3401      	adds	r4, #1
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ece:	4829      	ldr	r0, [pc, #164]	; (8009f74 <_vfiprintf_r+0x224>)
 8009ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed4:	2206      	movs	r2, #6
 8009ed6:	f7f6 f97b 	bl	80001d0 <memchr>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d03f      	beq.n	8009f5e <_vfiprintf_r+0x20e>
 8009ede:	4b26      	ldr	r3, [pc, #152]	; (8009f78 <_vfiprintf_r+0x228>)
 8009ee0:	bb1b      	cbnz	r3, 8009f2a <_vfiprintf_r+0x1da>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	3307      	adds	r3, #7
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	3308      	adds	r3, #8
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef0:	443b      	add	r3, r7
 8009ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef4:	e768      	b.n	8009dc8 <_vfiprintf_r+0x78>
 8009ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efa:	460c      	mov	r4, r1
 8009efc:	2001      	movs	r0, #1
 8009efe:	e7a6      	b.n	8009e4e <_vfiprintf_r+0xfe>
 8009f00:	2300      	movs	r3, #0
 8009f02:	3401      	adds	r4, #1
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	4619      	mov	r1, r3
 8009f08:	f04f 0c0a 	mov.w	ip, #10
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f12:	3a30      	subs	r2, #48	; 0x30
 8009f14:	2a09      	cmp	r2, #9
 8009f16:	d903      	bls.n	8009f20 <_vfiprintf_r+0x1d0>
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d0c6      	beq.n	8009eaa <_vfiprintf_r+0x15a>
 8009f1c:	9105      	str	r1, [sp, #20]
 8009f1e:	e7c4      	b.n	8009eaa <_vfiprintf_r+0x15a>
 8009f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f24:	4604      	mov	r4, r0
 8009f26:	2301      	movs	r3, #1
 8009f28:	e7f0      	b.n	8009f0c <_vfiprintf_r+0x1bc>
 8009f2a:	ab03      	add	r3, sp, #12
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4b12      	ldr	r3, [pc, #72]	; (8009f7c <_vfiprintf_r+0x22c>)
 8009f32:	a904      	add	r1, sp, #16
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7fb fe4f 	bl	8005bd8 <_printf_float>
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	1c78      	adds	r0, r7, #1
 8009f3e:	d1d6      	bne.n	8009eee <_vfiprintf_r+0x19e>
 8009f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x202>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x202>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4e:	f7fc fdbd 	bl	8006acc <__retarget_lock_release_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	065b      	lsls	r3, r3, #25
 8009f56:	f53f af1d 	bmi.w	8009d94 <_vfiprintf_r+0x44>
 8009f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5c:	e71c      	b.n	8009d98 <_vfiprintf_r+0x48>
 8009f5e:	ab03      	add	r3, sp, #12
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	462a      	mov	r2, r5
 8009f64:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <_vfiprintf_r+0x22c>)
 8009f66:	a904      	add	r1, sp, #16
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7fc f8d9 	bl	8006120 <_printf_i>
 8009f6e:	e7e4      	b.n	8009f3a <_vfiprintf_r+0x1ea>
 8009f70:	0800a5f9 	.word	0x0800a5f9
 8009f74:	0800a603 	.word	0x0800a603
 8009f78:	08005bd9 	.word	0x08005bd9
 8009f7c:	08009d2d 	.word	0x08009d2d
 8009f80:	0800a5ff 	.word	0x0800a5ff

08009f84 <__swbuf_r>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	460e      	mov	r6, r1
 8009f88:	4614      	mov	r4, r2
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	b118      	cbz	r0, 8009f96 <__swbuf_r+0x12>
 8009f8e:	6a03      	ldr	r3, [r0, #32]
 8009f90:	b90b      	cbnz	r3, 8009f96 <__swbuf_r+0x12>
 8009f92:	f7fc fc83 	bl	800689c <__sinit>
 8009f96:	69a3      	ldr	r3, [r4, #24]
 8009f98:	60a3      	str	r3, [r4, #8]
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	071a      	lsls	r2, r3, #28
 8009f9e:	d525      	bpl.n	8009fec <__swbuf_r+0x68>
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	b31b      	cbz	r3, 8009fec <__swbuf_r+0x68>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	6922      	ldr	r2, [r4, #16]
 8009fa8:	1a98      	subs	r0, r3, r2
 8009faa:	6963      	ldr	r3, [r4, #20]
 8009fac:	b2f6      	uxtb	r6, r6
 8009fae:	4283      	cmp	r3, r0
 8009fb0:	4637      	mov	r7, r6
 8009fb2:	dc04      	bgt.n	8009fbe <__swbuf_r+0x3a>
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f7ff fa3a 	bl	8009430 <_fflush_r>
 8009fbc:	b9e0      	cbnz	r0, 8009ff8 <__swbuf_r+0x74>
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	60a3      	str	r3, [r4, #8]
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	6022      	str	r2, [r4, #0]
 8009fca:	701e      	strb	r6, [r3, #0]
 8009fcc:	6962      	ldr	r2, [r4, #20]
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d004      	beq.n	8009fde <__swbuf_r+0x5a>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	07db      	lsls	r3, r3, #31
 8009fd8:	d506      	bpl.n	8009fe8 <__swbuf_r+0x64>
 8009fda:	2e0a      	cmp	r6, #10
 8009fdc:	d104      	bne.n	8009fe8 <__swbuf_r+0x64>
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f7ff fa25 	bl	8009430 <_fflush_r>
 8009fe6:	b938      	cbnz	r0, 8009ff8 <__swbuf_r+0x74>
 8009fe8:	4638      	mov	r0, r7
 8009fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fec:	4621      	mov	r1, r4
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f000 f806 	bl	800a000 <__swsetup_r>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d0d5      	beq.n	8009fa4 <__swbuf_r+0x20>
 8009ff8:	f04f 37ff 	mov.w	r7, #4294967295
 8009ffc:	e7f4      	b.n	8009fe8 <__swbuf_r+0x64>
	...

0800a000 <__swsetup_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4b2a      	ldr	r3, [pc, #168]	; (800a0ac <__swsetup_r+0xac>)
 800a004:	4605      	mov	r5, r0
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	460c      	mov	r4, r1
 800a00a:	b118      	cbz	r0, 800a014 <__swsetup_r+0x14>
 800a00c:	6a03      	ldr	r3, [r0, #32]
 800a00e:	b90b      	cbnz	r3, 800a014 <__swsetup_r+0x14>
 800a010:	f7fc fc44 	bl	800689c <__sinit>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a01a:	0718      	lsls	r0, r3, #28
 800a01c:	d422      	bmi.n	800a064 <__swsetup_r+0x64>
 800a01e:	06d9      	lsls	r1, r3, #27
 800a020:	d407      	bmi.n	800a032 <__swsetup_r+0x32>
 800a022:	2309      	movs	r3, #9
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a02a:	81a3      	strh	r3, [r4, #12]
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	e034      	b.n	800a09c <__swsetup_r+0x9c>
 800a032:	0758      	lsls	r0, r3, #29
 800a034:	d512      	bpl.n	800a05c <__swsetup_r+0x5c>
 800a036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a038:	b141      	cbz	r1, 800a04c <__swsetup_r+0x4c>
 800a03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a03e:	4299      	cmp	r1, r3
 800a040:	d002      	beq.n	800a048 <__swsetup_r+0x48>
 800a042:	4628      	mov	r0, r5
 800a044:	f7fd fbd2 	bl	80077ec <_free_r>
 800a048:	2300      	movs	r3, #0
 800a04a:	6363      	str	r3, [r4, #52]	; 0x34
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	2300      	movs	r3, #0
 800a056:	6063      	str	r3, [r4, #4]
 800a058:	6923      	ldr	r3, [r4, #16]
 800a05a:	6023      	str	r3, [r4, #0]
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f043 0308 	orr.w	r3, r3, #8
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b94b      	cbnz	r3, 800a07c <__swsetup_r+0x7c>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a072:	d003      	beq.n	800a07c <__swsetup_r+0x7c>
 800a074:	4621      	mov	r1, r4
 800a076:	4628      	mov	r0, r5
 800a078:	f000 f884 	bl	800a184 <__smakebuf_r>
 800a07c:	89a0      	ldrh	r0, [r4, #12]
 800a07e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a082:	f010 0301 	ands.w	r3, r0, #1
 800a086:	d00a      	beq.n	800a09e <__swsetup_r+0x9e>
 800a088:	2300      	movs	r3, #0
 800a08a:	60a3      	str	r3, [r4, #8]
 800a08c:	6963      	ldr	r3, [r4, #20]
 800a08e:	425b      	negs	r3, r3
 800a090:	61a3      	str	r3, [r4, #24]
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	b943      	cbnz	r3, 800a0a8 <__swsetup_r+0xa8>
 800a096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a09a:	d1c4      	bne.n	800a026 <__swsetup_r+0x26>
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	0781      	lsls	r1, r0, #30
 800a0a0:	bf58      	it	pl
 800a0a2:	6963      	ldrpl	r3, [r4, #20]
 800a0a4:	60a3      	str	r3, [r4, #8]
 800a0a6:	e7f4      	b.n	800a092 <__swsetup_r+0x92>
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e7f7      	b.n	800a09c <__swsetup_r+0x9c>
 800a0ac:	20000078 	.word	0x20000078

0800a0b0 <_raise_r>:
 800a0b0:	291f      	cmp	r1, #31
 800a0b2:	b538      	push	{r3, r4, r5, lr}
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	460d      	mov	r5, r1
 800a0b8:	d904      	bls.n	800a0c4 <_raise_r+0x14>
 800a0ba:	2316      	movs	r3, #22
 800a0bc:	6003      	str	r3, [r0, #0]
 800a0be:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a0c6:	b112      	cbz	r2, 800a0ce <_raise_r+0x1e>
 800a0c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0cc:	b94b      	cbnz	r3, 800a0e2 <_raise_r+0x32>
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 f830 	bl	800a134 <_getpid_r>
 800a0d4:	462a      	mov	r2, r5
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	4620      	mov	r0, r4
 800a0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0de:	f000 b817 	b.w	800a110 <_kill_r>
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d00a      	beq.n	800a0fc <_raise_r+0x4c>
 800a0e6:	1c59      	adds	r1, r3, #1
 800a0e8:	d103      	bne.n	800a0f2 <_raise_r+0x42>
 800a0ea:	2316      	movs	r3, #22
 800a0ec:	6003      	str	r3, [r0, #0]
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e7e7      	b.n	800a0c2 <_raise_r+0x12>
 800a0f2:	2400      	movs	r4, #0
 800a0f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	4798      	blx	r3
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e7e0      	b.n	800a0c2 <_raise_r+0x12>

0800a100 <raise>:
 800a100:	4b02      	ldr	r3, [pc, #8]	; (800a10c <raise+0xc>)
 800a102:	4601      	mov	r1, r0
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	f7ff bfd3 	b.w	800a0b0 <_raise_r>
 800a10a:	bf00      	nop
 800a10c:	20000078 	.word	0x20000078

0800a110 <_kill_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4d07      	ldr	r5, [pc, #28]	; (800a130 <_kill_r+0x20>)
 800a114:	2300      	movs	r3, #0
 800a116:	4604      	mov	r4, r0
 800a118:	4608      	mov	r0, r1
 800a11a:	4611      	mov	r1, r2
 800a11c:	602b      	str	r3, [r5, #0]
 800a11e:	f7f8 fb6b 	bl	80027f8 <_kill>
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	d102      	bne.n	800a12c <_kill_r+0x1c>
 800a126:	682b      	ldr	r3, [r5, #0]
 800a128:	b103      	cbz	r3, 800a12c <_kill_r+0x1c>
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	bd38      	pop	{r3, r4, r5, pc}
 800a12e:	bf00      	nop
 800a130:	200003f8 	.word	0x200003f8

0800a134 <_getpid_r>:
 800a134:	f7f8 bb58 	b.w	80027e8 <_getpid>

0800a138 <__swhatbuf_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	460c      	mov	r4, r1
 800a13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a140:	2900      	cmp	r1, #0
 800a142:	b096      	sub	sp, #88	; 0x58
 800a144:	4615      	mov	r5, r2
 800a146:	461e      	mov	r6, r3
 800a148:	da0d      	bge.n	800a166 <__swhatbuf_r+0x2e>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a150:	f04f 0100 	mov.w	r1, #0
 800a154:	bf0c      	ite	eq
 800a156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a15a:	2340      	movne	r3, #64	; 0x40
 800a15c:	2000      	movs	r0, #0
 800a15e:	6031      	str	r1, [r6, #0]
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	b016      	add	sp, #88	; 0x58
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	466a      	mov	r2, sp
 800a168:	f000 f848 	bl	800a1fc <_fstat_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	dbec      	blt.n	800a14a <__swhatbuf_r+0x12>
 800a170:	9901      	ldr	r1, [sp, #4]
 800a172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a17a:	4259      	negs	r1, r3
 800a17c:	4159      	adcs	r1, r3
 800a17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a182:	e7eb      	b.n	800a15c <__swhatbuf_r+0x24>

0800a184 <__smakebuf_r>:
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a188:	079d      	lsls	r5, r3, #30
 800a18a:	4606      	mov	r6, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	d507      	bpl.n	800a1a0 <__smakebuf_r+0x1c>
 800a190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	2301      	movs	r3, #1
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	b002      	add	sp, #8
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	ab01      	add	r3, sp, #4
 800a1a2:	466a      	mov	r2, sp
 800a1a4:	f7ff ffc8 	bl	800a138 <__swhatbuf_r>
 800a1a8:	9900      	ldr	r1, [sp, #0]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7fd fb91 	bl	80078d4 <_malloc_r>
 800a1b2:	b948      	cbnz	r0, 800a1c8 <__smakebuf_r+0x44>
 800a1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b8:	059a      	lsls	r2, r3, #22
 800a1ba:	d4ef      	bmi.n	800a19c <__smakebuf_r+0x18>
 800a1bc:	f023 0303 	bic.w	r3, r3, #3
 800a1c0:	f043 0302 	orr.w	r3, r3, #2
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	e7e3      	b.n	800a190 <__smakebuf_r+0xc>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	6020      	str	r0, [r4, #0]
 800a1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	9b00      	ldr	r3, [sp, #0]
 800a1d4:	6163      	str	r3, [r4, #20]
 800a1d6:	9b01      	ldr	r3, [sp, #4]
 800a1d8:	6120      	str	r0, [r4, #16]
 800a1da:	b15b      	cbz	r3, 800a1f4 <__smakebuf_r+0x70>
 800a1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f81d 	bl	800a220 <_isatty_r>
 800a1e6:	b128      	cbz	r0, 800a1f4 <__smakebuf_r+0x70>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f023 0303 	bic.w	r3, r3, #3
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	431d      	orrs	r5, r3
 800a1f8:	81a5      	strh	r5, [r4, #12]
 800a1fa:	e7cf      	b.n	800a19c <__smakebuf_r+0x18>

0800a1fc <_fstat_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d07      	ldr	r5, [pc, #28]	; (800a21c <_fstat_r+0x20>)
 800a200:	2300      	movs	r3, #0
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	f7f8 fb54 	bl	80028b6 <_fstat>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	d102      	bne.n	800a218 <_fstat_r+0x1c>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	b103      	cbz	r3, 800a218 <_fstat_r+0x1c>
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	bd38      	pop	{r3, r4, r5, pc}
 800a21a:	bf00      	nop
 800a21c:	200003f8 	.word	0x200003f8

0800a220 <_isatty_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d06      	ldr	r5, [pc, #24]	; (800a23c <_isatty_r+0x1c>)
 800a224:	2300      	movs	r3, #0
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	f7f8 fb53 	bl	80028d6 <_isatty>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_isatty_r+0x1a>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_isatty_r+0x1a>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	200003f8 	.word	0x200003f8

0800a240 <_init>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr

0800a24c <_fini>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr
